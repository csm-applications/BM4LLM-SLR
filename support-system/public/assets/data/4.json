{
  "secondary_study": {
    "Secondary study DOI": "10.1007/s10270-022-01050-9",
    "Title": "Conflict management techniques for model merging: a systematic mapping review",
    "Inclusion / Exclusion criteria": "Inclusion criteria:\n- IC1: Publications in which models are the primary artifacts.\n- IC2: Publications that present a technique or contribution for supporting the conflict in model merging.\n- IC3: Publications in peer-reviewed journals, conferences, or workshops.\n\nExclusion criteria:\n\n- EC1: Publications not focusing on MDE (e. g. , conflict management in code-centric approaches).\n- EC2: The paper is Secondary study publication (e. g. , summaries, systematic reviews, or surveys).\n",
    "Prompt instruction": "The paper is included, if all inclusion criteria match. If the paper matches any exclusion criteria, it is excluded."
  },
  "primary_studies": [
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84858721938",
      "Primary study DOI": "10.1109/ICCCI.2012.6158834",
      "Title": "New approach for model merging and transformation",
      "Abstract": "Models are important artifacts in the software development life-cycle and often to produce results on which multiple developers has to work collaboratively, especially with the adoption of Model-Driven Development. If a modeling task is distributed, it will frequently be necessary to merge models developed by different team members. When multiple developers work over diagrams of modules of the same project while integrating those modules conflicts can occur and need to be resolved by merging. Existing approaches for model merging require developers to solve all conflicts manually before commit. Sometimes conflicts increases more because of manual commitment. And existing approaches while merging make assumptions about the types of model to be merged, and the nature of the relationship between them. In this paper, we propose a simple model merging approach for two different diagrams of same model. This facilitates resolution of conflicts and merging. In this paper, we describe proposed algorithm for transforming different software design models to XML and vice versa and we also describe proposed algorithm for model merging along with experimental results. © 2012 IEEE.",
      "Keywords": "Algorithm | Model Merging | Model Transformation | Software modeling | UML | XML",
      "Publication venue": "2012 International Conference on Computer Communication and Informatics, ICCCI 2012",
      "Publication date": "2012-03-27",
      "Publication type": "Conference Paper",
      "Authors": "Thakare, Bhushan S.;Dube, Mahesh R.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84906909966",
      "Primary study DOI": "10.5220/0004709500550066",
      "Title": "Collaborative editing of EMF/Ecore meta-models and models conflict detection, reconciliation, and merging in DiCoMEF",
      "Abstract": "Despite the fact that Domain Specific Modeling tools become very powerful and more frequently used, the support for their cooperation has not reached its full strength and demand for model management is growing. In cooperative work, the decision agents are semi-autonomous and therefore a solution for reconciliating DSM after a concurrent evolution is needed. Conflict detection and reconciliation are important steps for merging of concurrently evolved (meta)models in order to ensure collaboration. In this work, we present a conflict detection, reconciliation and merging framework for concurrently evolved meta-models and models. Besides, we formally specify the EMF Ecore meta-model into set constructs that help to analyze the (meta)model and operations performed on it. Copyright © 2014 SCITEPRESS - Science and Technology Publications. All rights reserved.",
      "Keywords": "Collaborative modeling | Conflict detection | DSML | EMF | Merging",
      "Publication venue": "MODELSWARD 2014 - Proceedings of the 2nd International Conference on Model-Driven Engineering and Software Development",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Koshima, Amanuel;Englebert, Vincent",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84983284265",
      "Primary study DOI": "10.1109/SNPD.2016.7515890",
      "Title": "Composite-based conflict resolution in merging versions of UML models",
      "Abstract": "© 2016 IEEE.Model-driven engineering is now playing an essential role in software development. Adequate model versioning systems are critical to enable efficient team-based development of models. The state-of-art model versioning systems are able to detect and help resolving basic conflicts which arise during the merging of different model versions. However, conflict resolution is typically conducted at the primitive operation level in operation-based system and user interaction is required to choose from the conflicting operations. In this study, we present an approach to resolve conflicts automatically at composite level in model versioning systems for Unified Modeling Language (UML). This approach has two main stages. During the merging stage, a temporary merged model is generated, which represent the central intention of model developers. And during the conflict resolution stage, our approach automatically finds and presents to the model developers all solutions for resolving all inconsistencies in the merged model. The approach was empirically evaluated on a range of test models and proved to be scalable to models of large size.",
      "Keywords": "",
      "Publication venue": "2016 IEEE/ACIS 17th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2016",
      "Publication date": "2016-07-18",
      "Publication type": "Conference Paper",
      "Authors": "Chong, Hao;Zhang, Renwei;Qin, Zheng",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84922610482",
      "Primary study DOI": "10.1109/ISSREW.2014.33",
      "Title": "Early Conflict Detection with Mined Models",
      "Abstract": "© 2014 IEEE.Source Code Management (SCM) systems with extensive support to branching, parallel development, and merging, such as Git and Mercurial, are increasingly popular. Despite the popularity of advanced SCM systems, merging multiple branches is still extremely painful and time consuming because it requires manually resolving a number of conflicts generated while developing branches independently. This is due to the limitations of currently available conflict detection mechanisms: conflicts are identified late and are limited to textual conflicts, while the conflicts that are most expensive to fix are the ones that cause misbehaviors in the program without causing textual conflicts. This paper introduces a multi-branch server-side dynamic analysis that can automatically detect conflicts that produce misbehaviors as soon as they are introduced, regardless the syntactical changes that occur in the program. The results of the analysis can dramatically improve the rate of conflicts that are detected and resolved early in the process. As a consequence, the cost and the effort required to complete merge operations will drastically decrease and the capability to timely evolve software will significantly improve.",
      "Keywords": "Configuration management | Conflict detection | Version control",
      "Publication venue": "Proceedings - IEEE 25th International Symposium on Software Reliability Engineering Workshops, ISSREW 2014",
      "Publication date": "2014-12-12",
      "Publication type": "Conference Paper",
      "Authors": "Mariani, Leonardo;Micucci, Daniela;Pastore, Fabrizio",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70349805167",
      "Primary study DOI": "10.1109/CVSM.2009.5071721",
      "Title": "Operation-based conflict detection and resolution",
      "Abstract": "Models are in wide-spread use in the software development lifecycle and model-driven development even promotes them from an abstraction of the system to the description the system is generated from. Therefore it is increasingly important to collaborate on models. These models can range from requirements models over UML models to project management models such as schedules. Tool support for collaboration on models is therefore crucial. Traditionally Software Configuration Management (SCM) systems such as RCS [9] or Subversion [10] have supported this task for textual artifacts such as source code on the granularity of files and textual lines. They do not work well for graph-like models with many links since the granularity needed to support them is on the level of model elements and their attributes. For the design of a novel SCM system addressing these requirements it is essential to define how conflicts on models are detected and how they can be resolved. In this paper we present an approach to conflict detection and resolution on models. We employ operation-based change tracking and therefore detect conflicts based on operations. For conflict resolution we propose an integration of SCM with techniques from Rational Management to effectively resolve conflicts. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 2009 ICSE Workshop on Comparison and Versioning of Software Models, CVSM 2009",
      "Publication date": "2009-10-15",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Helming, Jonas;Seyboth, Stephan",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-58349097327",
      "Primary study DOI": "10.1109/ICYCS.2008.280",
      "Title": "Using Stakeholder Analysis for Improving Statechart Merging in Software Requirement Management",
      "Abstract": "View-based requirement elicitation provides an effective way to collect information from different stakeholders, who may emphasize distinct aspects of a system. In this paper, we introduce the idea of stakeholder analysis into viewpoint-based requirement analysis and propose a framework for merging state model viewpoints. We give a formal template in which each stakeholder can rank their expected behaviors of the model according to their preference. Our merge operator is behavior preserving and has strong robustness in merging inconsistent requirement. Besides, the operator provides mechanisms to calculate the behaviors' importance based on stakeholder preference and stakeholder confidence level. A common refinement of the original models tries to maximally meet all stakeholders′ requirements, and the proposed methodology provides good references for making decisions when conflicting behaviors appear between models. It is shown that viewpoints merging in this framework is efficient and reasonable. © 2008 IEEE.",
      "Keywords": "Framework | Requirement engineering | Stakeholder preference | Statechart merging | Viewpoint",
      "Publication venue": "Proceedings of the 9th International Conference for Young Computer Scientists, ICYCS 2008",
      "Publication date": "2008-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Cheng, Jun;Liu, Qiang",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85049791656",
      "Primary study DOI": "10.1109/MS.2018.290110057",
      "Title": "Collaborative-Design Conflicts: Costs and Solutions",
      "Abstract": "© 2018 IEEE.Collaborative design exposes software architects to the risk of making conflicting modeling changes that either can't be merged or, when merged, violate consistency rules, nonfunctional requirements, or other system constraints. Such design conflicts are common and incur a high cost, including having to redo and abandon work. Proactive conflict detection can alleviate this risk. This article motivates the need for design conflict detection, describes the benefits of such detection to practitioners, and identifies requirements for building detection tools. In particular, FLAME is a collaborative-design framework that efficiently and continuously detects design conflicts. This article is part of a theme issue on collaborative modeling.",
      "Keywords": "collaborative design | collaborative modeling | design | FLAME | Framework for Logging and Analyzing Modeling Events | proactive conflict detection | software architecture | software development | software engineering",
      "Publication venue": "IEEE Software",
      "Publication date": "2018-11-01",
      "Publication type": "Article",
      "Authors": "Bang, Jae Young;Brun, Yuriy;Medvidović, Nenad",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77954724460",
      "Primary study DOI": "10.1145/1810295.1810364",
      "Title": "EMFStore: a model repository for EMF models",
      "Abstract": "Models need to be put under version control to facilitate collaboration and to control change. EMFStore is a Software Configuration Management system tailored to the specific requirements for versioning models. It employs operation-based change tracking, conflict detection and merging. © 2010 ACM.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2010-07-23",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Helming, Jonas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84903736139",
      "Primary study DOI": "10.1109/WICSA.2014.31",
      "Title": "Inconsistency Resolution in Merging Versions of Architectural Models",
      "Abstract": "State-of-the-art optimistic model versioning systems, which are critical to enable efficient team-based development of architectural models, are able to detect and help resolve basic conflicts arising during the merging of model versions. However, it is often overlooked that model merging may also cause severe syntactical and semantic inconsistencies. In this paper, we propose an approach to guide the resolution of inconsistencies detected in a merged architectural model. Our approach automatically finds and presents to the software architects all solutions for resolving all inconsistencies arisen during the merging of model versions. For inconsistencies that pre-exist in the model, our approach is able to suggest exactly which model elements should be changed to resolve them. Our approach is built upon a repair generation which can quickly derive resolutions for an inconsistency by examining its static and dynamic structure and forming concrete repair actions from changes in the versions to be merged. An empirical validation on a range of industrial models has demonstrated that our approach is scalable to both large models and large differences between model versions. © 2014 IEEE.",
      "Keywords": "Architectural modeling | inconsistency management | model merging | model versioning",
      "Publication venue": "Proceedings - Working IEEE/IFIP Conference on Software Architecture 2014, WICSA 2014",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Dam, Hoa Khanh;Reder, Alexander;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84893465740",
      "Primary study DOI": "10.1109/EDOCW.2013.34",
      "Title": "Handling Concurrent Changes in Collaborative Process Model Development: A Change-Pattern Based Approach",
      "Abstract": "Business process modeling has gained increasing interest with the advent of business process management systems in organizational contexts. As business processes are subject to frequent change also respective models are complex and under continuous development with multiple modelers being involved. This paper presents an approach to integrate concurrent changes of multiple modelers equivalently into a resulting process model. Through change patterns we capture the semantics of changes and use them for recognizing instances hereof from subsequent model revisions. These change patterns were identified by analyzing a set of recurring changes during model creation, modification, and refactoring. Together with the concept of conflict types change patterns are used as a conceptual means to implement a semi-automated merging mechanism within a collaborative wiki-based modeling environment. This approach is expected to facilitate smooth (incremental and iterative) development of models in highly dynamic modeling environments and is a human-oriented way to conflict resolution in (concurrent) process model development. © 2013 IEEE.",
      "Keywords": "Business process design | Business process modeling | Collaborative modeling | Information systems design",
      "Publication venue": "Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOC",
      "Publication date": "2013-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Erol, Selim;Neumann, Gustaf",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85056872612",
      "Primary study DOI": "10.1109/VLHCC.2018.8506512",
      "Title": "Evaluating the efficiency of using a search-based automated model merge technique",
      "Abstract": "© 2018 IEEE.Model-driven engineering relies on effective collaboration between different teams which introduces complex model management challenges. DSE Merge aims to efficiently merge model versions created by various collaborators using search-based exploration of solution candidates that represent conflict-free merged models guided by domain-specific knowledge. In this paper, we report how we systematically evaluated the efficiency of the DSE Merge technique from the user point of view using a reactive experimental Software engineering approach. The empirical tests included the involvement of the intended end users (i.e. engineers), namely undergraduate students, which were expected to confirm the impact of design decisions. In particular, we asked users to merge the different versions of the same model using DSE Merge when compared to using Diff Merge. The experiment showed that to use DSE Merge participant required lower cognitive effort, and expressed their preference and satisfaction with it.",
      "Keywords": "Domain-Specific Languages | Software Language Engineering | Usability Evaluation",
      "Publication venue": "Proceedings of IEEE Symposium on Visual Languages and Human-Centric Computing, VL/HCC",
      "Publication date": "2018-10-23",
      "Publication type": "Conference Paper",
      "Authors": "Barisic, Ankica;Debreceni, Csaba;Varrot, Daniel;Amaral, Vasco;Goulao, Miguel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70349682940",
      "Primary study DOI": "10.1109/ICSE-COMPANION.2009.5071020",
      "Title": "Improving conflict resolution in model versioning systems",
      "Abstract": "Collaborative software development is nowadays inconceivable without optimistic version control systems (VCSs). Without such systems the parallel modification of one artifact by multiple users is impracticable. VCSs proved successful in the versioning of code, but they are only conditionally appropriate to the management of model versions. Conflicts which may occur when two different versions of one model are merged are detected in an unsatisfactory manner and consequently, automatic conflict resolution is hardly offered. In this work, a generic framework allowing precise conflict detection and intelligent conflict resolution for models is proposed. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "2009 31st International Conference on Software Engineering - Companion Volume, ICSE 2009",
      "Publication date": "2009-10-12",
      "Publication type": "Conference Paper",
      "Authors": "Broschy, Petra",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84943329798",
      "Primary study DOI": "10.1109/WICSA.2015.15",
      "Title": "Proactive Detection of Higher-Order Software Design Conflicts",
      "Abstract": "© 2015 IEEE.Software architects who collaboratively evolve a software model rely on version control systems (VCSs) to synchronize their individual changes to the model. However, with the current generation of software model VCSs, architects remain unaware of newly arising conflicts until the next synchronization, raising the risk that delayed conflict resolution will be much harder. There are existing tools that proactively detect analogous conflicts at the level of source code. However, it is challenging to directly use them for software models because those tools are constructed to manage code-level rather than model-level changes. Furthermore, no empirical data is currently available regarding the impact of proactive conflict detection on collaborative design. In this paper, we report on our design-level proactive conflict detection research, which specifically targets a class of higher-order conflicts that do not prevent merging but do violate a system's consistency rule. We present FLAME, an extensible, operation-based collaborative software design framework that proactively detects conflicts. We also present a user study result involving FLAME conducted with 42 participants. The study indicated that the participants who used FLAME were able to create higher quality models in the same amount of time, and to detect and resolve higher-order conflicts earlier and more quickly.",
      "Keywords": "collaborative software design | proactive conflict detection | software modeling",
      "Publication venue": "Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015",
      "Publication date": "2015-07-14",
      "Publication type": "Conference Paper",
      "Authors": "Bang, Jae Young;Medvidovic, Nenad",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77957911027",
      "Primary study DOI": "10.1109/SCC.2010.38",
      "Title": "Detection of Semantically Equivalent Fragments for Business Process Model Change Management",
      "Abstract": "Modern business process modeling environments support distributed development by means of model version control, i. e. comparison and merging of two different model versions. This is a challenging task since most modeling languages support an almost arbitrary creation of process models. Thus, in multi-developer environments, process models or parts of them are often syntactically very different but semantically equivalent. Hence, the comparison of business process models must be performed on a semantic level rather then on a syntactic level. For the domain of business process modeling, this problem is yet unsolved. This paper describes an approach that allows the semantic comparison of different business process models using a normal form. For that purpose, the process models are fully automatically translated into process model terms and normalized using a term rewriting system. The resulting normal forms can be efficiently compared and easily be used for reconciliation. Our approach enables the semantic comparison of business process models ignoring syntactic redundancies. © 2010 IEEE.",
      "Keywords": "Business process models | Change management | Conflicts | Consistency",
      "Publication venue": "Proceedings - 2010 IEEE 7th International Conference on Services Computing, SCC 2010",
      "Publication date": "2010-10-20",
      "Publication type": "Conference Paper",
      "Authors": "Gerth, Christian;Luckey, Markus;Küster, Jochen M.;Engels, Gregor",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79951932158",
      "Primary study DOI": "10.1109/EDOC.2010.15",
      "Title": "Comparing State- and Operation-Based Change Tracking on Models",
      "Abstract": "In recent years, models are increasingly used throughout the entire lifecycle in software development projects. In effect, the need for collaborating on these models emerged, requiring change tracking and versioning. However, many researchers have shown that existing methods and tools for Version Control (VC) do not work well on graph-like models, such as UML, SysML or domain-specific modeling languages. To alleviate this, alternative techniques and methods have been proposed which can be classified into state-based and operation-based approaches. Existing research shows advantages of operation-based over state-based approaches in selected use cases, such as conflict detection or merging. However, there are only few results available on the advantages of operation-based approaches in the most common use case of a VC system: review and understand change. In this paper, we present and discuss both approaches and their use cases. Moreover, we present the results of an empirical study to compare a state-based with an operation-based approach for the use case of reviewing and understanding change. For this study, we have mined an operation-based model repository and interviewed users to assess their understanding of randomly selected changes. Our results indicate that users better understand complex changes in the operation-based representation. © 2010 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOC",
      "Publication date": "2010-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Herrmannsdoerfery, Markus;Liz, Yang;Helmingx, Jonas;David, Joern",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79952915898",
      "Primary study DOI": "10.1109/HICSS.2011.126",
      "Title": "Conflict Analysis at Collaborative Development of Domain Specific Models using Description Logics",
      "Abstract": "Today the distribution of development locations, the co-evolution of models and the concurrency of work are typical for collaborative modeling in software projects. Software engineering teams demand modeling techniques at several abstraction levels to manage the complexity of software descriptions. Besides, software models are applied more and more for the specification of safety-critical systems. Hence software models take a hybrid role - as a matter of team communication and precise specification for refinement. Both aspects are considered in the research area of Model Driven Engineering (MDE). It provides methods to deal with formal specified meta-models of graphical (intuitive) modeling languages. Unfortunately the syntactical a semantically correct (consistent) integration of concurrently evolved models is poorly considered by the most MDE approaches. Especially the detection and analyzing of model merge conflicts can be automatized by using logical inference techniques. Therefore this paper proposes an approach based on description logics. © 2011 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the Annual Hawaii International Conference on System Sciences",
      "Publication date": "2011-03-28",
      "Publication type": "Conference Paper",
      "Authors": "Bartelt, Christian",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84893582619",
      "Primary study DOI": "10.1109/ASE.2013.6693079",
      "Title": "Consistency-preserving edit scripts in model versioning",
      "Abstract": "In model-based software development, models are iteratively evolved. To optimally support model evolution, developers need adequate tools for model versioning tasks, including comparison, patching, and merging of models. A significant disadvantage of tools currently available is that they display, and operate with, low-level model changes which refer to internal model representations and which can lead to intermediate inconsistent states. Higher-level consistency-preserving edit operations including refactorings are better suited to explain changes or to resolve conflicts. This paper presents an automatic procedure which transforms a low-level difference into an executable edit script which uses consistency-preserving edit operations only. Edit scripts support consistent model patching and merging on a higher abstraction level. Our approach to edit script generation has been evaluated in a larger real-world case study. © 2013 IEEE.",
      "Keywords": "",
      "Publication venue": "2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings",
      "Publication date": "2013-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Kehrer, Timo;Kelter, Udo;Taentzer, Gabriele",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34547296637",
      "Primary study DOI": "10.1109/ICSM.2006.64",
      "Title": "Supporting Collaborative Development in an Open MDA Environment",
      "Abstract": "The MDA approach aims to ease software maintenance faced with platform and business evolution. In this approach, main development artifacts, i.e. models, are defined with the Meta Object Facility (MOF) standard. To support collaborative development in MDA, we propose a mechanism for merging concurrent changes to MOF models. Our approach has the following novel functionality. First, as MOF models can have ordered relations, our mechanism can identify the order changes in MOF models, detect the conflicts caused by concurrent order changes, and integrate those changes. Second, as MOF models must respect multiplicity constraints, our mechanism detects the concurrent modifications that result in multiplicity violations. Therefore, it ensures the consistency of the merge result. Third, we offer a framework for building conflict resolution programs dedicated to developers' particular requirements. This framework offers a flexible and automated way for resolving conflicts. This work is a part of ModelBus, an open environment for CASE tool interoperability. Its contribution is to enable models to be concurrently modified by several developers and with different tools. Model Bus implementation is available as the Eclipse open source project, Model Driven Development integration (MDDi). © 2006 IEEE.",
      "Keywords": "CASE tool | Collaboration | MDA | Merging | Metamodel | Model | MOF | Software configuration management",
      "Publication venue": "IEEE International Conference on Software Maintenance, ICSM",
      "Publication date": "2006-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Sriplakich, Prawee;Blanc, Xavier;Gervais, Marie Pierre",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85049124242",
      "Primary study DOI": "10.1109/KBEI.2017.8324972",
      "Title": "A UML profile for modeling the conflicts in model merging",
      "Abstract": "© 2017 IEEE.To the challenge entailed by the complexity and size of software systems, developers have to cooperate and work in parallel on software models. Models are changed separately, and they should be merged periodically to obtain an integrated single model. This leads to conflict in merging models. Therefore, several approaches have been proposed to detect such conflicts. For some conflict detection approaches, it is required to describe conflict constraints which are an open issue. In contribution to the solution of this problem, we present a UML profile for modeling conflict conditions which can be used for automatic generation of required constraints. This profile helps to build a conflict model by exploiting example of models which participate in the model merging process. Hence, software engineers are able to define conflicts via a concrete graphical syntax in a familiar UML editor. To evaluate the proposed profile, a case study consisting of two conflicts is performed that shows the usefulness of this profile.",
      "Keywords": "model merging | model-driven software engineering | modeling the conflicts | UML profile",
      "Publication venue": "2017 IEEE 4th International Conference on Knowledge-Based Engineering and Innovation, KBEI 2017",
      "Publication date": "2017-07-02",
      "Publication type": "Conference Paper",
      "Authors": "Sharbaf, Mohammadreza;Zamani, Bahman",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-71049193368",
      "Primary study DOI": "10.1109/TASE.2009.34",
      "Title": "Merging of Use Case Models: Semantic Foundations",
      "Abstract": "Use case models are the artifact of choice for capturing functional requirements. This typically collaborative activity makes merging a necessity. Use cases however, are often neglected when it comes to model merging, since they are commonly treated as text only items. By defining a formal syntax and semantics for use case models, manipulated within a generic metamodel for operation-based merging, we show how use case models can be effectively merged. This formal foundation allows for the modeling of use cases; defining meaningful change operations on them; and for detecting modeling inconsistencies, inconformities, and conflicts. Several practical examples validate the concepts presented: existing and planned tool support is introduced. © 2009 IEEE.",
      "Keywords": "Change plane | Conflict | Finite state machine | Inconformity | Inconsistency | Model merging | Model transformation | Operation-based merging | Use case model",
      "Publication venue": "Proceedings - 2009 3rd IEEE International Symposium on Theoretical Aspects of Software Engineering, TASE 2009",
      "Publication date": "2009-11-16",
      "Publication type": "Conference Paper",
      "Authors": "Barrett, Stephen;Sinnig, Daniel;Chalin, Patrice;Butler, Greg",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33646539477",
      "Primary study DOI": "",
      "Title": "Merging requirements views with incompleteness and inconsistency",
      "Abstract": "The purpose of X-SCTL/MUS methodology is to support the collaborative development of software requirements specifications. It is a viewpoint-based approach which separates the descriptions provided by different stakeholders, and concentrates on identifying and resolving conflicts between them. X-SCTL/MUS allows the incremental development of each partial model, facilitating the task division and decreasing the development complexity. In order to fulfill all these exigencies, one of its functionalities consists in providing a way to compose requirements from different agents in a merged specification which represents explicitly overspecification and underspecification phenomena and over which, for instance, it is possible to formally verify properties. The main issue in this paper is precisely the description of the composition operator used to obtain the merged model representing the stakeholders' requirements. We will show the criteria employed to select the composition operator that fits the desired characteristics best. Finally, the contribution will be illustrated, with a little but explanatory example. © 2005 IEEE.",
      "Keywords": "Incompleteness | Inconsistency | Merging | Requirements Specification | Viewpoints",
      "Publication venue": "Proceedings of the Australian Software Engineering Conference, ASWEC",
      "Publication date": "2005-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Martínez, Ana Belén Barragáns;Pazos Arias, José J.;Vilas, Ana Fernández",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-27644580060",
      "Primary study DOI": "10.1109/re.2005.35",
      "Title": "iVuBlender: a tool for merging incomplete and inconsistent views",
      "Abstract": "View merging is an important activity in any conceptual modeling language. It is often desirable to combine a set of views to gain a unified perspective, to test hypotheses about how views are related, or to perform various types of analysis. A major challenge for view merging is toleration of incompleteness and inconsistency: views may be inconclusive, and may have conflicts over the concepts being modeled or how they are structured. Drawing on the theory developed in our earlier work [6, 5], we present a view merging tool, called iVuBlender, that allows for explicit modeling of incompleteness and inconsistency and provides a framework for interconnecting and merging incomplete and inconsistent views. © 2005 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the IEEE International Conference on Requirements Engineering",
      "Publication date": "2005-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Sabetzadeh, Mehrdad;Easterbrook, Steve",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85029600289",
      "Primary study DOI": "10.1109/TSE.2016.2623623",
      "Title": "GK-Tail+ An Efficient Approach to Learn Software Models",
      "Abstract": "© 1976-2012 IEEE.Inferring models of program behavior from execution samples can provide useful information about a system, also in the increasingly common case of systems that evolve and adapt in their lifetime, and without requiring large developers' effort. Techniques for learning models of program behavior from execution traces shall address conflicting challenges of recall, specificity and performance: They shall generate models that comprehensively represent the system behavior (recall) while limiting the amount of illegal behaviors that may be erroneously accepted by the model (specificity), and should infer the models within a reasonable time budget to process industrial scale systems (performance). In our early work, we designed GK-Tail, an approach that can infer guarded finite state machines that model the behavior of object-oriented programs in terms of sequences of method calls and constraints on the parameter values. GK-Tail addresses well two of the three main challenges, since it infers guarded finite state machines with a high level of recall and specificity, but presents severe limitations in terms of performance that reduce its scalability. In this paper, we present GK-Tail+, a new approach to infer guarded finite state machines from execution traces of object-oriented programs. GK-Tail+ proposes a new set of inference criteria that represent the core element of the inference process: It largely reduces the inference time of GK-Tail while producing guarded finite state machines with a comparable level of recall and specificity. Thus, GK-Tail+ advances the preliminary results of GK-Tail by addressing all the three main challenges of learning models of program behavior from execution traces.",
      "Keywords": "Dynamic model learning | guarded finite state machines | software models | specification mining | state based models",
      "Publication venue": "IEEE Transactions on Software Engineering",
      "Publication date": "2017-08-01",
      "Publication type": "Article",
      "Authors": "Mariani, Leonardo;Pezze, Mauro;Santoro, Mauro",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84963819343",
      "Primary study DOI": "10.1109/ASE.2015.106",
      "Title": "SiPL -- A Delta-Based Modeling Framework for Software Product Line Engineering",
      "Abstract": "© 2015 IEEE.Model-based development has become a widely-used approach to implement software, e.g. for embedded systems. Models replace source code as primary executable artifacts in these cases. Software product line technologies for these domains must be able to generate models as instances of an SPL. This need is addressed among others by an implementation technology for SPLs known as delta modeling. Current approaches to delta modeling require deltas to be written manually using delta languages, and they offer only very limited support for creating and testing a network of deltas. This paper presents a new approach to delta modeling and a supporting tool suite: the abstract notion of a delta is refined to be a consistency-preserving edit script which is generated by comparing two models. The rich structure of edit scripts allows us to detect conflicts and further relations between deltas statically and to implement restructurings in delta sets such as the merging of two deltas. We illustrate the tooling using a case study.",
      "Keywords": "Delta modeling | Model differencing | Model-based development | Software product line engineering",
      "Publication venue": "Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015",
      "Publication date": "2016-01-04",
      "Publication type": "Conference Paper",
      "Authors": "Pietsch, Christopher;Kehrer, Timo;Kelter, Udo;Reuling, Dennis;Ohrndorf, Manuel",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77958083370",
      "Primary study DOI": "10.1109/TSMCA.2010.2052599",
      "Title": "A Model for the Integration of Prioritized Knowledge Bases Through Subjective Belief Games",
      "Abstract": "Belief merging is concerned with the integration of several belief bases such that a coherent belief base is developed. Various belief merging models that use a belief negotiation game have been developed. These models often consist of two key functions, namely, negotiation and weakening. A negotiation function finds and selects the weakest belief bases among the available belief bases, while the weakening function removes the least valuable set of information from the selected belief base. This process is iteratively repeated until a consistent belief base is developed. In this paper, we extend the current game-based belief merging models by introducing the Subjective belief game model. The Subjective belief game model operates over a Subjective belief profile, which consists of belief bases with Subjectively annotated formulas. The Subjective information attached to each formula enables the proposed model to prioritize the formulas in the merging process. One of the advantages of the proposed game is that it provides room for enhancing the content of the weak belief bases, instead of enforcing their further weakening. Trustworthiness of the information sources is also considered. We provide several instantiations of the model. The Subjective belief game model can be useful for formalizing a negotiation process between the human participants of a design process in cases where discrepancies and conflicts arise. We apply this belief game model to an example case study of collaboratively designing some parts of unified modeling language (UML) class diagram for vehicle design. © 2006 IEEE.",
      "Keywords": "Belief merging | collaborative modeling | formal conflict resolution | negotiation | social contraction",
      "Publication venue": "IEEE Transactions on Systems, Man, and Cybernetics Part A:Systems and Humans",
      "Publication date": "2010-11-01",
      "Publication type": "Article",
      "Authors": "Bagheri, Ebrahim;Ghorbani, Ali A.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70349817376",
      "Primary study DOI": "10.1109/CVSM.2009.5071716",
      "Title": "History-based merging of models",
      "Abstract": "Model-driven development in collaborative teams requires services for merging models. Such services should have the same quality as one is used to for source code. The constraints which are relevant in model driven engineering imply that the merging of models must be implemented differently than merging of texts. Based on the analysis of these constraints, we present an approach for merging models that attains a high level of consistency of the merged models and minimizes the loss of effort due to conflict resolution. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 2009 ICSE Workshop on Comparison and Versioning of Software Models, CVSM 2009",
      "Publication date": "2009-10-15",
      "Publication type": "Conference Paper",
      "Authors": "Schmidt, Maik;Wenzel, Sven;Kehrer, Timo;Kelter, Udo",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85061428176",
      "Primary study DOI": "10.1109/CIST.2018.8596468",
      "Title": "An AHP-Based Method to Fix Inconsistencies in UML Collaborative Modeling",
      "Abstract": "© 2018 IEEE.Building UML models in a collaborative way can give rise to several inconsistencies. Fixing these inconsistencies is the ultimate purpose considered in the inconsistency management process after detecting and diagnosing them. In this paper, we focus on laying the foundation for solutions aiming to help collaborative modelers choosing the right repair action that fit their modeling objectives and strategies. To this end, we use the AHP (Analytic Hierarchy Process) technique for organizing and analyzing the modelers' decisions. Ultimately, it is up to the software designers to take the appropriate action to fix the detected inconsistency.",
      "Keywords": "AHP Technique | Collaborative Modeling | Decision Problems | Inconsistencies in UML Models",
      "Publication venue": "Colloquium in Information Science and Technology, CIST",
      "Publication date": "2018-12-28",
      "Publication type": "Conference Paper",
      "Authors": "Allaki, Driss;Dahchour, Mohamed;En-Nouaary, Abdeslam",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77951730974",
      "Primary study DOI": "10.1109/HICSS.2010.363",
      "Title": "Technology Support for Collaborative Inconsistency Management in Model Driven Engineering",
      "Abstract": "Model driven engineering is one answer to increasing demands on software development and maintenance. Today's software systems are often large, complex but also safety-critical and should be highly adaptable in life cycle. The efficient development of large and complex software systems needs a high degree of collaboration in the design and specification phases. Well-defined, (graphical) modeling languages provide therefore a matter of communication for software engineers. Further the distribution of development locations and the concurrency of work are typical in global software engineering projects. This kind of collaborative modeling needs reliable integration mechanisms for co-evolved models. However the syntactic and semantic correct (consistent) integration of concurrent evolved models is not satisfactorily supported by current tools. Especially the inconsistency resolution for merged architecture and design models is a communication-intensive, collaborative task. This paper proposes a technology support of automatic inconsistency analysis and visualization for distributed modelers whose synchronize their parallel work. © 2010 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the Annual Hawaii International Conference on System Sciences",
      "Publication date": "2010-05-07",
      "Publication type": "Conference Paper",
      "Authors": "Bartelt, Christian;Schindler, Björn",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84856615167",
      "Primary study DOI": "10.1109/APSEC.2011.24",
      "Title": "Toward Inconsistency Awareness in Collaborative Software Development",
      "Abstract": "Change management is a key issue in collaborative software development. In a collaborative work, the fact that many change processes applied to shared artifacts are executed concurrently leads to the inconsistency problem. Most of previous studies addressed only conflicts, a type of inconsistency caused by concurrent change activities on shared artifacts. In this paper, we define patterns of inconsistency, including conflict patterns, concerning the change context instead of only concurrent change activities. To deal with these inconsistencies, we propose an approach that is a combination of the process support approach and awareness support approach. We model change processes as Change Support Workflows (CSWs) and manage their execution. We then introduce a Change Support Model (CSM) based on this approach. CSM is a model of a dynamic workflow management system. In CSM, inconsistency awareness is implemented using workspace awareness and context awareness techniques. Requirements, static model, architecture, and dynamic model of CSM are also specified. Our approach will help workers to implement changes more safely and efficiently in collaborative environments. © 2011 IEEE.",
      "Keywords": "Change Support Model | Change support workflow | Collaborative software development | Inconsistency awareness | Patterns of inconsistency",
      "Publication venue": "Proceedings - Asia-Pacific Software Engineering Conference, APSEC",
      "Publication date": "2011-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Huyen, Phan Thi Thanh;Ochimizu, Koichiro",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79959913403",
      "Primary study DOI": "10.1145/1985793.1986005",
      "Title": "Inconsistency management framework for model-based development",
      "Abstract": "In contrast to programming environments, model-based development tools lack in an efficient support in detecting and repairing design errors. However, inconsistencies must be resolved eventually and the detection of inconsistencies is of little use if it is not known how to use this information. Quite many approaches exist for detecting inconsistencies. Only some of them provide solutions for repairing individual inconsistencies but none of them are able to investigate the repair problem comprehensively - in particular considering the side effects that might occur when applying a repair. My PhD thesis focuses on resolving inconsistencies, the different strategies one can follow and how to deal with the critical problem of side effects. My approach is based on an incremental approach for detecting inconsistencies and combines runtime analysis of the design rules' evaluation behavior with static analysis on the design rules' structure. The main contribution is an efficient and effective inconsistency management framework that can be applied generically to (most) modeling and design rule languages. © 2011 Author.",
      "Keywords": "inconsistencies | resolving inconsistencies | side effects | user guidance",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2011-07-07",
      "Publication type": "Conference Paper",
      "Authors": "Reder, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84866911610",
      "Primary study DOI": "10.1145/2351676.2351707",
      "Title": "Computing repair trees for resolving inconsistencies in design models",
      "Abstract": "Resolving inconsistencies in software models is a complex task because the number of repairs grows exponentially. Existing approaches thus emphasize on selected repairs only but doing so diminishes their usefulness. This paper copes with the large number of repairs by focusing on what caused an inconsistency and presenting repairs as a linearly growing repair tree. The cause is computed by examining the runtime evaluation of the inconsistency to understand where and why it failed. The individual changes that make up repairs are then modeled in a repair tree as alternatives and sequences reflecting the syntactic structure of the inconsistent design rule. The approach is automated and tool supported. Its scalability was empirically evaluated on 29 UML models and 18 OCL design rules where we show that the approach computes repair trees in milliseconds on average. We believe that the approach is applicable to arbitrary modeling and constraint languages. Copyright 2012 ACM.",
      "Keywords": "Inconsistency management | Repairing inconsistencies",
      "Publication venue": "2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012 - Proceedings",
      "Publication date": "2012-10-05",
      "Publication type": "Conference Paper",
      "Authors": "Reder, Alexander;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85010216416",
      "Primary study DOI": "10.1109/CIST.2016.7805060",
      "Title": "Detecting and fixing UML model inconsistencies using constraints",
      "Abstract": "© 2016 IEEE.Complex software systems are often modeled as a collection of related UML diagrams, each of which describes particular aspects of the system being investigated. These diagrams might contain inconsistencies due to the evolving nature of software systems and to the refinement of the models across the software life cycle. It is so mandatory to discover the potential inconsistencies in UML models as soon as possible before implementing the system. This paper proposes a method for checking the consistency of UML models, based on formal constraints defined at the meta-model of UML. These constraints are described using EVL (Epsilon Validation Language) by matching related diagrams features at the meta-level. EVL also helps repair and correct the inconsistencies being detected. Our method is easily automated and is complete in terms of coverage of both potential inconsistencies and the UML diagrams commonly used.",
      "Keywords": "Checking inconsistencies | Constraint-based method | Inconsistency management | UML models",
      "Publication venue": "Colloquium in Information Science and Technology, CIST",
      "Publication date": "2016-07-02",
      "Publication type": "Conference Paper",
      "Authors": "Allaki, Driss;Dahchour, Mohamed;En-Nouaary, Abdeslam",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84903539614",
      "Primary study DOI": "10.1109/ASWEC.2014.33",
      "Title": "Inconsistency Management between Architectural Decisions and Designs Using Constraints and Model Fixes",
      "Abstract": "The software architecture community has proposed to document the design rationale of software architectures by means of architectural design decisions (ADDs). The constant evolution of software systems requires that both architectural designs and corresponding ADDs are continuously documented and synchronized. However, in practice, designs and ADDs become inconsistent over time. Usually, the potential inconsistencies need to be detected and resolved manually. We propose to alleviate this problem by providing semi-automated support for detecting and handling these inconsistencies. For this, we use constraints for consistency checking between reusable ADDs and component-and-connector (C&amp;C) models. These constraints apply on the C&amp;C models and their invalidation is resolved by software architects either 1) by executing automatically suggested model fixes on the C&amp;C models, or 2) by reconsidering ADDs and subsequently updating the corresponding C&amp;C diagrams, in order to align designs to decisions. We demonstrate our approach in the context of a case study and evaluate its efficiency and scalability. © 2014 IEEE.",
      "Keywords": "architectural design decisions | component-and-connector view | inconsistency management",
      "Publication venue": "Proceedings of the Australian Software Engineering Conference, ASWEC",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Lytra, Ioanna;Zdun, Uwe",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85073149764",
      "Primary study DOI": "10.1109/SYSCON.2019.8836869",
      "Title": "Model Management Tools for Models of Different Domains: A Systematic Literature Review",
      "Abstract": "© 2019 IEEE.Objective: The goal of this study is to present an overview of industrial and academic approaches to cross-domain model management. We aim at identifying industrial and academic tools for cross-domain model management and describing the inconsistency types addressed by them as well as strategies the users of the tools employ to keep consistency between models of different domains. Method: We conducted a systematic literature review. Using the keyword-based search on Google Scholar we analyzed 515 potentially relevant studies; after applying inclusion and exclusion criteria 88 papers were selected for further analysis. Results: The main findings/contributions are: (i) a list of available tools used to support model management; (ii) approximately 31% of the tools can provide consistency model checking on models of different domains and approximately 24% on the same domain; (iii) available strategies to keep the consistency between models of different domains are not mature enough; (iv) explicit modeling dependencies between models is not common in the industry. However, it is considered as a requirement by academia if one wishes to manage inconsistency between models of different domains. Conclusion: This study presents an overview of industrial practices and academic approaches about the cross-domain model management. The results presented in this study can be used as a starting point for future research on model management topics, and also for further improvement of actual model management tools.",
      "Keywords": "Model Management | Model-Based Systems Engineering | Systematic Literature Review | Systems Engineering",
      "Publication venue": "SysCon 2019 - 13th Annual IEEE International Systems Conference, Proceedings",
      "Publication date": "2019-04-01",
      "Publication type": "Conference Paper",
      "Authors": "Torres, Weslley;Van Den Brand, Mark;Serebrenik, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-50649122990",
      "Primary study DOI": "10.1109/ICST.2008.23",
      "Title": "Detecting and Repairing Inconsistencies across Heterogeneous Models",
      "Abstract": "With the advent of Domain Specific Languages for Model Engineering, detecting inconsistencies between models is becoming increasingly challenging. Nowadays, it is not uncommon for models participating in the same development process to be captured using different modelling languages and even different modelling technologies. We present a classification of the types of relationships that can arise between models participating in a software development process and outline the types of inconsistencies each relationship can suffer from. From this classification we identify a set of requirements for a generic inconsistency detection and reconciliation mechanism and use a case study to demonstrate how those requirements are implemented in the Epsilon Validation Language (EVL), a task-specific language developed in the context of the Epsilon GMT component. © 2008 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 1st International Conference on Software Testing, Verification and Validation, ICST 2008",
      "Publication date": "2008-09-05",
      "Publication type": "Conference Paper",
      "Authors": "Kolovos, Dimitrios S.;Paige, Richard F.;Polack, Fiona A.C.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84941265770",
      "Primary study DOI": "10.1109/SYSCON.2015.7116733",
      "Title": "Analyzing semantic relationships between multiformalism models for inconsistency management",
      "Abstract": "© 2015 IEEE.The involvement of multiple stakeholders in the design of complex engineered system presents many challenges. One of the challenge is that the overlapping stakeholder concerns leads to semantic relationships appearing between models. From an inconsistency management perspective, it is critical to investigate how these relationships appear and what are their types. Based on a decision-theoretic foundation, this paper investigates the types of semantic relationships between multiformalism models. We argue that the semantic relationships can be formally captured for two cases - between model versions, and between models from a given instant. Further, we argue that semantic overlap for these two cases can be described through three relationships: equivalence, refinement and abstraction. These relationships can lead to the three types of inconsistencies: inconsistent constraints, inconsistent predictions and inconsistencies between specification and analysis. The paper presents a set of generic rules which can be used to detect these inconsistencies.",
      "Keywords": "",
      "Publication venue": "9th Annual IEEE International Systems Conference, SysCon 2015 - Proceedings",
      "Publication date": "2015-06-02",
      "Publication type": "Conference Paper",
      "Authors": "Qamar, Ahsan;Herzig, Sebastian J.I.;Paredis, Christiaan J.J.;Törngren, Martin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85061429260",
      "Primary study DOI": "10.1109/CIST.2018.8596542",
      "Title": "Managing Model Conflicts in Collaborative Modeling Using Constraint Programming",
      "Abstract": "© 2018 IEEE.Inconsistencies present a serious problem to overcome in collaborative modeling scenarios; this is due to the concurrent changes made by the different stakeholders. Because software systems undergo constant changes in order to continue to be relevant and to meet environment modifications and user requirements, updates that occur simultaneously can cause inconsistencies. It is therefore a critical challenge to manage these changes to maintain the coherence of the shared model. In this paper, we propose an approach for managing inconsistencies, in the context of collaborative modeling, using the constraint satisfaction problem (CSP) formalism. Our objective is to provide automated support for assisting developers in the detection and resolution of conflicts that may arise when they work on a shared model.",
      "Keywords": "collaborative modeling | concurrent modifications | constraint satisfaction problem | inconsistency problems | model evolution",
      "Publication venue": "Colloquium in Information Science and Technology, CIST",
      "Publication date": "2018-12-28",
      "Publication type": "Conference Paper",
      "Authors": "Zerrouk, Manar;Anwar, Adil;Benelallam, Imade",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85021631540",
      "Primary study DOI": "10.1109/WITS.2017.7934626",
      "Title": "Collaborative modelling: An MDE-oriented process to manage large-scale models",
      "Abstract": "© 2017 IEEE.The application of Model Driven Engineering in an industrial context implies working with large models, hence the need for collaborative modeling. Each developer focuses on a part of the large model and may manipulate it independently. As each part evolves rapidly and concurrently due to changes made by different designers, inconsistencies may occur. This work aims to provide support for dealing with concurrent changes. We propose a metamodel for the description of large models, and we also propose a process for the management of concurrent changes.",
      "Keywords": "collaborative modeling | concurrent modifications | inconsistency problems | large models | model partitioning | scalability",
      "Publication venue": "2017 International Conference on Wireless Technologies, Embedded and Intelligent Systems, WITS 2017",
      "Publication date": "2017-05-26",
      "Publication type": "Conference Paper",
      "Authors": "Zerrouk, Manar;Anwar, Adil;Benelallam, Imade;Elhamlaoui, Mahmoud",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85009826168",
      "Primary study DOI": "10.1109/ISSREW.2016.32",
      "Title": "Verifying the Consistency of UML Models",
      "Abstract": "© 2016 IEEE.The Unified Modelling Language (UML) is the most used Object Management Group specification and is the de-facto standard modeling language for object-oriented design and documentation. When UML diagrams convey contradicting or conflicting semantics, the diagrams are said to be inconsistent. Such inconsistencies may be a source of faults in software systems. It is therefore paramount that they get detected (through a sort of verification activity), analyzed and fixed. This paper presents the steps to verify, with OCL constraints, the consistency of UML models. To carry out the verification of UML consistency models, the following steps were identified: 1) transformation of UML consistency rules into OCL constraints, 2) generation of a plugin in Papyrus that include the OCL constraints, 3) importation into Papyrus (by using EMF) of UML models found in ReMoDD and UML Repository, 4) execution of the plugin with the OCL constraints against the imported UML models.",
      "Keywords": "Model Checking | Model Consistency Verification | UML | Unified Modeling Language Consistency rules",
      "Publication venue": "Proceedings - 2016 IEEE 27th International Symposium on Software Reliability Engineering Workshops, ISSREW 2016",
      "Publication date": "2016-12-16",
      "Publication type": "Conference Paper",
      "Authors": "Torre, Damiano",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84870849026",
      "Primary study DOI": "10.1109/COMPSAC.2012.36",
      "Title": "An Approach for Detecting Inconsistencies between Behavioral Models of the Software Architecture and the Code",
      "Abstract": "In practice, inconsistencies between architectural documentation and the code might arise due to improper implementation of the architecture or the separate, uncontrolled evolution of the code. Several approaches have been proposed to detect inconsistencies between the architecture and the code but these tend to be limited for capturing inconsistencies that might occur at runtime. We present a runtime verification approach for detecting inconsistencies between the dynamic behavior of the documented architecture and the actual runtime behavior of the system. The approach is supported by a set of tools that implement the architecture and the code patterns in Prolog, and automatically generate runtime monitors for detecting inconsistencies. We illustrate the approach and the toolset for a Crisis Management System case study. © 2012 IEEE.",
      "Keywords": "Inconsistency detection | Runtime verification | Software architectures",
      "Publication venue": "Proceedings - International Computer Software and Applications Conference",
      "Publication date": "2012-12-14",
      "Publication type": "Conference Paper",
      "Authors": "Çiraci, Selim;Sözer, Hasan;Tekinerdogan, Bedir",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85079668393",
      "Primary study DOI": "10.1109/IEEM44572.2019.8978930",
      "Title": "A Framework for Inconsistency Detection Across Heterogeneous Models in Industry 4.0",
      "Abstract": "© 2019 IEEE.Manufacturing systems nowadays get more interconnected and flexible. Developing such a system appeals for closer interdisciplinary collaboration. Various models are used by different engineers to shape specific views on the system, but might also introduce contradictions, i.e. inconsistencies, leading to engineering delays or failures. This study proposes a knowledge-based framework to detect and avoid inconsistency across models representing different views of the same system. A prototype of the framework is implemented and evaluated.",
      "Keywords": "Inconsistency | Knowledge Base | Manufacturing System Development | Model-based Engineering",
      "Publication venue": "IEEE International Conference on Industrial Engineering and Engineering Management",
      "Publication date": "2019-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Zou, M.;Li, H.;Vogel-Heuser, B.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77952232285",
      "Primary study DOI": "10.1109/ASE.2009.57",
      "Title": "Enhanced Automation for Managing Model and Metamodel Inconsistency",
      "Abstract": "Model-Driven Engineering (MDE) introduces additional challenges for managing evolution. For example, a metamodel change may affect instance models. Existing tool supported approaches for updating models in response to a metamodel change assume extra effort from metamodel developers. When no existing approach is applicable, metamodel users must update their models manually, an error prone and tedious task. In this paper, we describe the technical challenges faced when using the Eclipse Modeling Framework (EMF) and existing approaches for updating models in response to a metamodel change. We then motivate and describe alternative techniques, including: a mechanism for loading, storing and mainpulating inconsistent models; a mapping of inconsistent models to a human-usable notation for semi-automated and collaborative co-evolution; and integration with an inter-model reference manager, achieving automatic consistency checking as part of metamodel distribution. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "ASE2009 - 24th IEEE/ACM International Conference on Automated Software Engineering",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Rose, Louis M.;Kolovos, Dimitrios S.;Paige, Richard F.;Polack, Fiona A.C.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85029226586",
      "Primary study DOI": "10.1109/TSE.2016.2620145",
      "Title": "A Feature-Based Classification of Model Repair Approaches",
      "Abstract": "© 1976-2012 IEEE.Consistency management, the ability to detect, diagnose and handle inconsistencies, is crucial during the development process in Model-driven Engineering (MDE). As the popularity and application scenarios of MDE expanded, a variety of different techniques were proposed to address these tasks in specific contexts. Of the various stages of consistency management, this work focuses on inconsistency handling in MDE, particularly in model repair techniques. This paper proposes a feature-based classification system for model repair techniques, based on an systematic literature review of the area. We expect this work to assist developers and researchers from different disciplines in comparing their work under a unifying framework, and aid MDE practitioners in selecting suitable model repair approaches.",
      "Keywords": "consistency management | inconsistency handling | model repair | Model-driven engineering",
      "Publication venue": "IEEE Transactions on Software Engineering",
      "Publication date": "2017-07-01",
      "Publication type": "Article",
      "Authors": "MacEdo, Nuno;Jorge, Tiago;Cunha, Alcino",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84959555654",
      "Primary study DOI": "10.1109/UMEDIA.2015.7297436",
      "Title": "Consistency checking of UML class and sequence diagrams",
      "Abstract": "© 2015 IEEE.In object-oriented software modeling using the Unified Modeling Language, different aspects of a system are represented by various types of diagrams. UML diagrams represent two different views of a system model. They are static and dynamic views. In this paper we study the dynamic view of Class Diagrams and static view of Sequence Diagrams for checking consistency among them. We assume that the system is specified as a set of Class diagrams and the Sequence Diagrams are drawn using Enterprise Architect. With large and more complex UML models in the software development industry there is a serious issue on inconsistency of such diagrams. In design, evolution presents three issues: Consistency amongst design representations, traceability of a design change in code in order to maintain consistency and versioning of design entities along with versioning of code. As first step we translate UML class and Sequence diagrams into XMI (XML Metadata Interchange) format. We propose an algorithm to check the consistency among these two diagrams. Furthermore show how identify errors and inconsistencies using automated tool.",
      "Keywords": "sequence diagram | unified modeling language | xml metadata interchange",
      "Publication venue": "2015 8th International Conference on Ubi-Media Computing, UMEDIA 2015 - Conference Proceeedings",
      "Publication date": "2015-10-12",
      "Publication type": "Conference Paper",
      "Authors": "Ekanayake, E. M.N.K.;Kodituwakku, Saluka R.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-51849101223",
      "Primary study DOI": "10.1109/INMIC.2007.4557693",
      "Title": "An Accessible Formal Specification of the UML and OCL Meta-Model in Isabelle/HOL",
      "Abstract": "UML is the de-facto standard for system modeling. Due to its visual syntax and expressiveness, it is widely accepted and used in the industry. However, it is a semi-formal means of system specification and thus prone to inconsistencies. We believe that UML models need to be thoroughly verified because verification of UML models helps to find errors in the early system design. Object Constraint Language (OCL) somewhat alleviates this problem but is not always enough. Past attempts at formally specifying UML for verification include those based on simplistic Z specifications and the much more complex ones based on shallow embedding of UML and OCL in Higher Order Logic (HOL). All these approaches are either too simplistic or too complex for the software industry's purposes. In this paper, we formalize UML's class diagram and OCL constraints in the highly successful automated/interactive theorem prover Isabelle using one of its built-in logics, HOL. The aim is to create a formalization, which is accessible to the average software engineer while still being powerful enough to be able to prove consistency and other useful properties. The formalization based on UML2.0 and OCL2.0, addresses all concepts related to class diagrams such as type definitions, attributes, operations, aggregation and association along with the syntax and semantics of OCL expressions in the context of UML class diagrams. © 2007 IEEE.",
      "Keywords": "Algorithms | Automated theorem prover | Formal methods | System design | Tools & applications",
      "Publication venue": "INMIC2007 - 11th IEEE International Multitopic Conference",
      "Publication date": "2007-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Ali, Tamleek;Nauman, Mohammad;Alam, Masoom",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84893540269",
      "Primary study DOI": "10.1109/IECON.2013.6700279",
      "Title": "A customized design framework for the model-based development of engine control systems",
      "Abstract": "In the model-based design of complex technical systems, many design data artifacts are generated, such as models in different formalisms and design-related documents, which include specifications, test results, and design decisions. The consistent treatment and integration of these design artifacts is a challenge that is as of yet unsolved in industrial practice. This paper illustrates the industrial applicability of a software-based Design Framework (DF) [1] for the model-based design of an engine control system that was developed recently within the European research project MULTIFORM [2]. The goal of the Design Framework is to reduce the design effort, and thus the cost, while improving the quality of the designed system by consistently integrating the artifacts and tools that arise in model-based design processes. To ensure that design inconsistencies and errors are detected as early as possible (i.e. when it is relatively cheap to correct them), the framework provides structured data and model management as well as automated design consistency checking and design parameter propagation. © 2013 IEEE.",
      "Keywords": "Combustion engines | Design support | Model-based design | Tool integration",
      "Publication venue": "IECON Proceedings (Industrial Electronics Conference)",
      "Publication date": "2013-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Hufner, Martin;Sonntag, Christian;Engell, Sebastian;Grobosch, Sebastian",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34547491666",
      "Primary study DOI": "10.1109/ASE.2006.48",
      "Title": "Management of Incomplete and Inconsistent Views",
      "Abstract": "Views have long been used as a means to structure and manage conceptual models. Model management aims to keep track of the relationships between a set of views as they evolve, and to describe the manipulations performed over them in terms of a set of predefined operators. A major challenge in model management is handling the incompleteness and inconsistency of views. In this extended abstract, we describe a general framework for the management of incomplete and inconsistent views. We use our framework as a basis for exploring the systematic application of important design principles, such as traceability, reusability and separation of concerns, in model management. © 2006 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings - 21st IEEE/ACM International Conference on Automated Software Engineering, ASE 2006",
      "Publication date": "2006-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Sabetzadeh, Mehrdad",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85034768131",
      "Primary study DOI": "10.1109/COMTECH.2017.8065769",
      "Title": "Formal semantics of executable node and activity group of UML 2.5 activity diagram",
      "Abstract": "© 2017 IEEE.The semantics of Unified Modeling Language (UML) version 2.5, as defined by Object Management Group (OMG), are informal which leads to critical problems like ambiguities, inconsistencies, vagueness and misinterpretations. The solution to all aforementioned issues associated with UML is the transformation of UML informal semantics into formal mathematical semantics. The Executable Node and Activity Group are principal components of UML 2.5 Activity Diagram and they have not been completely formalized in existing researches so far. Our earlier publications presented formalization of structural semantics of UML 2.5 Activity Diagram in Z notation. This paper is an extension of our previous work by comprehensive formalization of structural semantics of Executable Node and Activity Group into Z notation. The defined formal semantic are then verified using various proof techniques offered by Z/EVES toolset.",
      "Keywords": "Activity Group | Executable Node | Formal Semantics | UML 2.5 Activity Diagram | Z Notation | Z/EVES Toolkit",
      "Publication venue": "International Conference on Communication Technologies, ComTech 2017",
      "Publication date": "2017-10-11",
      "Publication type": "Conference Paper",
      "Authors": "Jamal, Maryam;Zafar, Nazir Ahmad",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33750594998",
      "Primary study DOI": "10.1109/TSMCA.2006.883181",
      "Title": "From Predefined Consistency to User-Centered Emergent Consistency in Real-Time Collaborative Editing Systems",
      "Abstract": "In this paper, we introduce a basic conceptual model of real-time collaborative editing systems which differentiates the coordination aspect of actions (which do not exist in single-user systems) from the application-dependent semantic aspect of actions (i.e., those actions that happen in single-user systems). Based on this model, a new taxonomy is provided to analyze the existing consistency-maintenance mechanisms and highlight potential new mechanisms. Furthermore, a new user-centered consistency model is proposed, which focuses on dynamic consistency that is negotiable among end users rather than static consistency that is automatically determined by the system. In the mean time, some challenging research issues in real-time collaborative editing systems are outlined. © 2006 IEEE.",
      "Keywords": "Collaborative work | Conflict resolution | Consistency maintenance | Multiuser negotiation",
      "Publication venue": "IEEE Transactions on Systems, Man, and Cybernetics Part A:Systems and Humans",
      "Publication date": "2006-11-01",
      "Publication type": "Article",
      "Authors": "Orgun, Mehmet A.;Xue, Liyin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84887907901",
      "Primary study DOI": "10.1109/TSE.2013.30",
      "Title": "Determining the Cause of a Design Model Inconsistency",
      "Abstract": "When a software engineer finds an inconsistency in a model, then the first question is why? What caused it? Obviously, there must be an error. But where could it be? Or is the design rule erroneous and if yes then which part? The cause of an inconsistency identifies the part of the model or design rule where the error must be. We believe that the visualization of an inconsistency ought to visualize the cause. Understanding the cause is of vital importance before a repair can even be formulated. Indeed, any automation (e.g., code generation, refactoring) has to be considered with caution if it involves model elements that cause inconsistencies. This paper analyzes the basic structure of inconsistent design rules as well as their behavior during validation and presents an algorithm for computing its cause. The approach is fully automated, tool supported, and was evaluated on 14,111 inconsistencies across 29 design models. We found that our approach computes correct causes for inconsistencies, these causes are nearly always a subset of the model elements investigated by the design rules' validation (a naive cause computation approximation), and the computation is very fast (99.8 percent of the causes are computable in < 100 ms). © 1976-2012 IEEE.",
      "Keywords": "Design tools and techniques | Programming environments/construction tools | Validation",
      "Publication venue": "IEEE Transactions on Software Engineering",
      "Publication date": "2013-11-25",
      "Publication type": "Article",
      "Authors": "Reder, Alexander;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84904600149",
      "Primary study DOI": "10.1109/TSMC.2013.2296275",
      "Title": "Resolving Design Conflicts and Evaluating Solidarity in Distributed Design",
      "Abstract": "The resolution of complex design problems requires a distributed design system that considers the involvement of various designers. Inconsistencies of design objectives and working procedures of distributed subsystems can cause design conflicts due to couplings among their subproblems. Another issue is the management of imprecision in design systems caused by the lack of knowledge about the final decision. In this paper, we define a conflict management model using the concept of set-based design to overcome these issues. We utilize constraint satisfaction problem (CSP) techniques and model agent attitudes to detect and justify design conflicts of heterogeneous design agents. A novel cooperative CSP is defined for resolving design conflicts through compromising constraint restriction. The conflict resolution system can be adopted with different strategies which take into account the solidarity architecture of design agents. The gains and costs of centralized, decentralized and controlled conflict resolution system strategies are simulated with the Monte Carlo method where design agent characters and their interactions reflect a stochastic nature. © 2013 IEEE.",
      "Keywords": "Concurrent engineering | conflict resolution | constraint satisfaction problem | distributed design | multiagent systems | set-based design",
      "Publication venue": "IEEE Transactions on Systems, Man, and Cybernetics: Systems",
      "Publication date": "2014-01-01",
      "Publication type": "Article",
      "Authors": "Canbaz, Baris;Yannou, Bernard;Yvars, Pierre Alain",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-0034174018",
      "Primary study DOI": "10.1109/2.839317",
      "Title": "Leveraging inconsistency in software development",
      "Abstract": "Maintaining consistency at all times is counterproductive. In many cases, it may be desirable to tolerate or even encourage inconsistency to facilitate distributed teamwork and prevent premature commitment to design decisions. Several available tools detect inconsistency in different phases of software development. In general, each tool concentrates on one particular type of description and defines consistency narrowly in terms of integrity rules for that description type. Such method-specific consistency checking is extremely useful but covers only a fraction of the range of consistency relationships that can affect software development.",
      "Keywords": "",
      "Publication venue": "Computer",
      "Publication date": "2000-01-01",
      "Publication type": "Article",
      "Authors": "Nuseibeh, Bashar;Easterbrook, Steve;Russo, Alessandra",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85077996777",
      "Primary study DOI": "10.1109/REW.2019.00016",
      "Title": "Towards the Use of Model-Driven Technologies in an Integral Software Development Process",
      "Abstract": "© 2019 IEEE.This work presents a model-driven engineering approach to the software development process for space applications following the standards ECSS-E-ST-40C and ECSS-Q-ST-80C. This approach is based on the use of models for the definition of the different constituent elements of the process, i.e. specification, requirements and validation procedures. The proposed approach provides development teams with a set of features that deliver an integrated solution to the software development process. These features include the use of model checking techniques to avoid inconsistencies between the different items and the ability to obtain input data from different sources, like telemetry and telecommand databases. Furthermore it enables the definition of transformations to generate different products such as component code, formatted output files, or configuration files for a ground support equipment software that allows the automatic execution of the defined functional tests. This approach has been validated through a case study in which a subset of the functionality of the software of the Instrument Control Unit of the Energy Particle Detector instrument on-board Solar Orbiter has been modelled.",
      "Keywords": "Mission Operation | Model Driven Engineering | On Board Software | Software Verification and Validation",
      "Publication venue": "Proceedings - 2019 IEEE 27th International Requirements Engineering Conference Workshops, REW 2019",
      "Publication date": "2019-09-01",
      "Publication type": "Conference Paper",
      "Authors": "Montalvo, Aaron;Parra, Pablo;Polo, Oscar R.;Carrasco, Alberto;Martinez, Agustin;Sanchez, Sebastian",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77950404074",
      "Primary study DOI": "10.1109/ICCES.2009.5383227",
      "Title": "Detecting inconsistencies between software architecture views",
      "Abstract": "Software architecture is widely presented in multiple architectural views in order to address different concerns of stakeholders and to minimize complexities of presenting architecture in one model. Using multiple architecture views raised the problem of inconsistencies as views are interrelated and overlap with one another. This paper proposes a framework to help checking inconsistencies between architectural views. We firstly define the types of inconsistencies that might occur between multiple architectural views and then we propose a framework for checking inconsistencies between them. At the end a case study is provided to evaluate the framework. ©2009 IEEE.",
      "Keywords": "Architectural views | Consistency checking | Software architecture | Viewpoints",
      "Publication venue": "Proceedings - The 2009 International Conference on Computer Engineering and Systems, ICCES'09",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Michel, Mirette M.;Galal-Edeen, Galal H.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85063204923",
      "Primary study DOI": "10.1109/TENCON.2018.8650378",
      "Title": "Automated consistency checking of UML/MARTE based software systems",
      "Abstract": "© 2018 IEEE.Development of UML/MARTE based modelling technique is gaining popularity day by day. UML/MARTE model driven approach can be used to describe non real time software systems as well as timing constraints for real time software systems. However it is essential to ensure consistency among the different UML diagrams as it affects the quality of software system. The novelty of this paper lies in proposing comprehensive framework for automatic verification of inter diagram consistency based on UML/MARTE models. A simulator has been developed based on the formal specification to automatically detect inconsistencies at the early stage of design. The proposed methodology is applied and explained on a case study for substantiation of the approach.",
      "Keywords": "",
      "Publication venue": "IEEE Region 10 Annual International Conference, Proceedings/TENCON",
      "Publication date": "2018-07-02",
      "Publication type": "Conference Paper",
      "Authors": "Dey, Shouvik;Hazra, Rumpa;Kanjilal, Ananya;Bhattacharya, Swapan",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85059981147",
      "Primary study DOI": "10.1109/COASE.2018.8560537",
      "Title": "Modelling consistency rules within production system engeering",
      "Abstract": "© 2018 IEEE.The engineering of control systems is an essential part within the engineering of production systems cumulating various predecessor engineering activities. Therefore a high data quality of the predecessor activities has to be ensured especially avoiding inconsistencies between provided sets of engineering data. Within this paper, a methodology is sketched applicable to model engineering discipline crossing consistency rules to enable an automatic evaluation for consistency management. It is based on the use of AutomationML as production system modelling language but can be generalized to further modelling means.",
      "Keywords": "consistency management | data quality | production system control engineering methodology",
      "Publication venue": "IEEE International Conference on Automation Science and Engineering",
      "Publication date": "2018-12-04",
      "Publication type": "Conference Paper",
      "Authors": "Lüder, Arndt;Pauly, Johanna Lisa;Wimmer, Manuel",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84971472950",
      "Primary study DOI": "10.1109/KBEI.2015.7436156",
      "Title": "Towards automatic generation of formal specifications for UML consistency verification",
      "Abstract": "© 2015 IEEE.With the growth of systems complexity the need for verifying the behavior of systems is increasing. UML per se provides no means to check model consistency. However, UML models can be checked if they are converted into their equivalent formal representation. In this paper, we propose an approach based on Model-to-Text transformation to perform a semi-automatic mapping for verification of concurrent UML models using MERL language and MetaEdit+ tool. State machine is transformed into SMV model description and activity diagram is transformed into LTL formulas. Then, we use NuSMV model checker to verify the obtained formal specification. To evaluate the work, a case study of the ordering system is presented to illustrate our approach. A mapping method to check the consistency of state machines with related activity diagrams at early stages of system development is the main result of our work.",
      "Keywords": "MetaEdit+ | Model checking | Model transformation | UML diagram",
      "Publication venue": "Conference Proceedings of 2015 2nd International Conference on Knowledge-Based Engineering and Innovation, KBEI 2015",
      "Publication date": "2016-03-17",
      "Publication type": "Conference Paper",
      "Authors": "Sharbaf, Mohammadreza;Zamani, Bahman;Ladani, Behrouz Tork",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77956615586",
      "Primary study DOI": "10.1109/ICSM.2003.1235428",
      "Title": "Impact analysis and change management of UML models",
      "Abstract": "The use of Unified Modeling Language (UML) analysis/design models on large projects leads to a large number of interdependent UML diagrams. As software systems evolve, those diagrams undergo changes to, for instance, correct errors or address changes in the requirements. Those changes can in turn lead to subsequent changes to other elements in the UML diagrams. Impact analysis is then defined as the process of identifying the potential consequences (side-effects) of a change, and estimating what needs to be modified to accomplish a change. In this article, we propose a UML model-based approach to impact analysis that can be applied before any implementation of the changes, thus allowing an early decision-making and change planning process. We first verify that the UML diagrams are consistent (consistency check). Then changes between two different versions of a UML model are identified according to a change taxonomy, and model elements that are directly or indirectly impacted by those changes (i.e., may undergo changes) are determined using formally defined impact analysis rules (written with Object Constraint Language). A measure of distance between a changed element and potentially impacted elements is also proposed to prioritize the results of impact analysis according to their likelihood of occurrence. We also present a prototype tool that provides automated support for our impact analysis strategy, that we then apply on a case study to validate both the implementation and methodology.",
      "Keywords": "",
      "Publication venue": "IEEE International Conference on Software Maintenance, ICSM",
      "Publication date": "2003-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Briand, L. C.;Labiche, Y.;O'Sullivan, L.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85069192147",
      "Primary study DOI": "10.1109/ISMVL.2019.00019",
      "Title": "Four-Valued Logic in UML/OCL Models: A “Playground” for the MVL Community",
      "Abstract": "© 2019 IEEE.The Unified Modeling Language (UML) together with the Object Constraint Language (OCL) are the description means for modeling and specifying, e. g., software systems in early stages of the design. They allow to define components, their relations, and constraints of a system while, at the same time, hide precise implementation details. Despite providing a 'blueprint' for the desired systems, UML/OCL descriptions also allow for an early validation and verification of the design. However, an often overseen feature of UML/OCL is that it explicitly allows for the consideration of irregular variables assignments such as null and invalid-yielding a four-valued logic in the current UML/OCL version. In this tutorial, we provide an overview on this feature and the resulting four-valued UML/OCL logic. More precisely, we are providing a review of the corresponding description means as well as existing methods that allow for a validation and verification of the corresponding models. By this, we are aiming to introduce those UML/OCL descriptions and methods to the MVL community in order to trigger new directions for research and application.",
      "Keywords": "MVL | UML/OCL",
      "Publication venue": "Proceedings of The International Symposium on Multiple-Valued Logic",
      "Publication date": "2019-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Przigoda, Nils;Przigoda, Judith;Wille, Robert",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-50649115979",
      "Primary study DOI": "10.1109/ICST.2008.66",
      "Title": "A Methodology for UML Models V&V",
      "Abstract": "The introduction of UML models in the software life cycle poses new issues and challenges that are not adequately supported by current state-of-the-art development tools, especially concerning V&V activities. Indeed, every tool usually focuses on a small set of specialized activities, failing to provide a satisfactory (general purpose) V&V framework. In this paper we propose a methodology which allows a seamless integration of V&V into a UML-based development environment. The methodology exploits a set of supporting tools designed to be integrated in a unified framework. We believe that such proactive collaboration between tools can reduce significantly both effort and time required to tackle consistency, correctness, quality and long-term maintainability of UML models, increasing the development productivity and the overall quality of the delivered system. © 2008 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 1st International Conference on Software Testing, Verification and Validation, ICST 2008",
      "Publication date": "2008-09-05",
      "Publication type": "Conference Paper",
      "Authors": "Baruzzo, A.;Comini, M.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-67649983424",
      "Primary study DOI": "10.1109/CSMR.2009.35",
      "Title": "Concurrent Fine-Grained Versioning of UML Models",
      "Abstract": "Concurrent versioning of source code is a common and well-established practice to manage concurrency and consistency within source code repository. With the growing complexity of nowadays software systems, the need for high level representations of the system to develop becomes inevitable. These software models evolve together with the software system, thus requiring versioning management. Moreover, software models are often the result of cooperative work by different software engineers, that need to update them even concurrently. Unfortunately, the available concurrent versioning tools, do not provide an adequate support for this type of software artifacts. We propose a solution to manage versioning and concurrency for software models (in particular, UML models), that consists of a finegrained concurrent modeling approach. The approach has been implemented and integrated in an artifact management system, thus also enabling reuse of model elements across the entire project. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR",
      "Publication date": "2009-07-13",
      "Publication type": "Conference Paper",
      "Authors": "De Lucia, Andrea;Fasano, Fausto;Scanniello, Giuseppe;Tortora, Genoveffa",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34547678481",
      "Primary study DOI": "10.1109/CSCWD.2006.253033",
      "Title": "Cooperative Multi-Versioning Technique Based on Version Replication",
      "Abstract": "This paper first discusses the progress and existing problems in the study of cooperative graphics editing systems (COES), and then a new distributed multi-versioning model based on version replication is proposed for consistency maintenance of discordant conflicting Operations according to the conflicting features and types of concurrent operations in CGES. Based on this model, the scheme of expressing versions is further discussed in detail, including the method of expressing versions and showing execution effect of versions. Then an algorithm of multiple versions incremental creation based on version replication is devised, and an application example is given. The discussion ends up with the future research. © 2006 IEEE.",
      "Keywords": "Consistency maintenance | Cooperative graphics editing systems | Multi-versioning model | Version replication",
      "Publication venue": "Proceedings - 2006 10th International Conference on Computer Supported Cooperative Work in Design, CSCWD 2006",
      "Publication date": "2006-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Dou, Wanfeng;Zhu, Ming;Shen, Qi",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-57849135661",
      "Primary study DOI": "10.1109/ICSM.2008.4658105",
      "Title": "COMOVER: Concurrent model versioning",
      "Abstract": "Concurrent versioning of source code is a common and well-established practice to manage concurrency and consistency within source code repository. Similarly to source code, software models are often the result of cooperative work by different software engineers, that need to update them even concurrently. Unfortunately, modeling tools rarely provide support for concurrency and consistency. On the other hand, the available concurrent versioning tools do not provide an adequate support for software models. In this paper we present COMOVER (COncurrent MOdel VERsioning), a tool that integrates software modeling features with versioning and concurrency management as well as model elements sharing and exchanging. © 2008 IEEE.",
      "Keywords": "",
      "Publication venue": "IEEE International Conference on Software Maintenance, ICSM",
      "Publication date": "2008-12-29",
      "Publication type": "Conference Paper",
      "Authors": "Barone, Ivo;De Lucia, Andrea;Fasano, Fausto;Rullo, Esterino;Scanniello, Giuseppe;Tortora, Genoveffa",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34748833439",
      "Primary study DOI": "10.1109/ICSEM.2007.373341",
      "Title": "A Consistency-Preserving Protocol for Distributed Collaborative Model Authoring",
      "Abstract": "In recent years, creating a conceptual system model using a formal modeling language has became an inseparable part of the system development lifecycle. As systems' complexity grows, system models are almost exclusively a result of a collaborative effort of a group of developers, who typically need to work simultaneously. This need calls for an efficient mechanism to enable the group of developers to collaborate while modeling the same system. The complexity of devising such a mechanism is primarily due to the need to maintain the model's consistency at all times. Consistency is achieved by validating the model against a schema, which defines the semantic rules of the modeling language. A modeling process that satisfies the model's consistency is one that allows only those modifications that yield a valid model to take effect. A method is therefore sought that takes a valid model and a modifier as input and applies the modifier only if it results in a new valid model. A common mechanism for enabling collaborative work is a version control application, such as SVN. Although SVN provides a rich environment for collaboration, it is not designed to handle the consistency requirement. Assuming the modeling language provides a validation procedure, we propose a protocol that enables a group of developers engaged in conceptual modeling of the same system to work simultaneously while maintaining the consistency of the shared model. The paper describes the protocol and the proof for its completeness. © 2007 IEEE.",
      "Keywords": "",
      "Publication venue": "2007 International Conference on Systems Engineering and Modeling, ICSEM '07",
      "Publication date": "2007-10-01",
      "Publication type": "Conference Paper",
      "Authors": "Beimel, Dizza;Galanti, Lior",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78651454447",
      "Primary study DOI": "10.1109/FITME.2010.5654698",
      "Title": "Research on consistency checking method of UML model in embedded system",
      "Abstract": "To solve the problem of consistency checking of UML model in embedded system, the model consistency was analyzed. The executable UML was put forward which was an enhanced subset of UML. The state-event table was used to express the system model from model's transformation. And the model's consistency checking was come true by dynamic emulation. Finally, a case was presented to verify the feasibility of this method. © 2010 IEEE.",
      "Keywords": "Consistency checking | Executable UML | State-event table",
      "Publication venue": "2010 International Conference on Future Information Technology and Management Engineering, FITME 2010",
      "Publication date": "2010-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Gu, Weijie;Wang, Jishui;Shi, Erying;Qian, Yuexia",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34547676502",
      "Primary study DOI": "10.1109/CSCWD.2006.253005",
      "Title": "Ontology Definition Metamodel based Consistency Checking of UML Models",
      "Abstract": "Ontology Definition Metamodel (ODM) is the currently undergoing standardization through the Object Management Group (OMG). It is a metamodel defined using Meta-Object Facility (MOF), and enables using Model Driven Architecture (MDA) standards and Semantic Web together. In this Modeling Language (UML) models, we first derive a mapping for MOF to World Wide Web Consortium (W3C)'s Web Ontology Language (OWL) from ODM, and then provide a representation of UML metamodel in OWL based on this mapping- After transforming UML models to OWL instances, we can check consistency of these models by using logical reasoning and query techniques. An example of such a checking process is also given in this paper. © 2006 IEEE.",
      "Keywords": "Consistency checking | Ontology | UML",
      "Publication venue": "Proceedings - 2006 10th International Conference on Computer Supported Cooperative Work in Design, CSCWD 2006",
      "Publication date": "2006-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Wang, Shengjun;Jin, Longfei;Jin, Chengzhi",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84943191409",
      "Primary study DOI": "10.1109/ASE.2001.989829",
      "Title": "Knowledge base approach to consistency management of UML specifications",
      "Abstract": "© 2001 IEEE.The use of the Unified Modelling Language (UML) during systems development has been growing in scale and complexity, often resulting in inconsistent specifications. In this paper we present a knowledge base goal-driven approach for consistency management of UML specifications represented as axioms, which define goals. We propose an inference procedure as a flexible pattern-based abduction used to build and morph paths based on the specifications. The approach involves a two-step interaction process between the specifications: observation and comparison. Prototypes of the knowledge base engine and of a tool to map UML specifications in XM1 format to the knowledge base have been developed to demonstrate and evaluate the approach.",
      "Keywords": "",
      "Publication venue": "Proceedings - 16th Annual International Conference on Automated Software Engineering, ASE 2001",
      "Publication date": "2001-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Zisman, Andrea;Kozlenkov, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85026648129",
      "Primary study DOI": "10.1109/SERA.2017.7965740",
      "Title": "Identifying and localizing the inter-consistency errors among UML use cases and activity diagrams: An approach based on functional and structural size measurements",
      "Abstract": "© 2017 IEEE.Because of their structural and semantic inter-dependency, UML diagrams describing a software product must be consistent to ensure the success of the development process. This inter-diagram consistency is often not easy to ensure considering the multi-views the diagrams cover, the different levels of abstraction they encode, and the different development phases during which they are produced. In this paper, we tackle the consistency problem between the functional and dynamic views in behavioral diagrams of software. We propose an approach to detect and localize inter-consistency errors among UML use cases and activity diagrams. This approach is composed of two phases: measurement phase (1) and controlling phase (2). This approach is illustrated and validated through a 'Restaurant management system' case study. The proposed approach will help both software designers/developers and quality assurance/testing engineers identifying and localizing the causes of software errors at early phases (specification and design).",
      "Keywords": "Functional Size | Inter-Consistency errors | Structural Size | UML activity diagram | UML use case diagram",
      "Publication venue": "Proceedings - 2017 15th IEEE/ACIS International Conference on Software Engineering Research, Management and Applications, SERA 2017",
      "Publication date": "2017-06-30",
      "Publication type": "Conference Paper",
      "Authors": "Hakim, Hela;Sellami, Asma;Ben-Abdallah, Hanene",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-36049022159",
      "Primary study DOI": "10.1109/DEPCOS-RELCOMEX.2007.11",
      "Title": "Assurance of System Consistency During Independent Creation of UML Diagrams",
      "Abstract": "Graph transformations are a very intuitive formalism used in visualization, modelling of distributed systems or in support its allocation. The formal description the modelling process (both UML diagram and the trace of designer decisions) complicate its structure; we should be able support both parallel activity of local graph transformation systems and their cooperation for the assurance of the systems consistency. In the paper, the concept of conjugated graphs is introduced for this purpose. Next, the implementation of this concept with the help of aedNLC graph grammar is presented. © 2007 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Dependability of Computer Systems, DepCoS - RELCOMEX 2007",
      "Publication date": "2007-11-16",
      "Publication type": "Conference Paper",
      "Authors": "Fryz, Łukasz;Kotulski, Leszek",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33947136807",
      "Primary study DOI": "10.1109/TSE.2006.48",
      "Title": "Support for managing design-time decisions",
      "Abstract": "The desirability of maintaining multiple stakeholders' interests during the software design process argues for leaving choices undecided as long as possible. Yet, any form of underspecification, either missing information or undecided choices, must be resolved before automated analysis tools can be used. This paper demonstrates how Constraint Satisfaction Problem Solution Techniques (CSTs) can be used to automatically reduce the space of choices for ambiguities by incorporating the local effects of constraints, ultimately with more global consequences. As constraints typical of those encountered during the software design process, we use UML consistency and well-formedness rules. It is somewhat surprising that CSTs are suitable for the software modeling domain since the constraints may relate many ambiguities during their evaluation, encountering a well-known problem with CSTs called the k-consistency problem. This paper demonstrates that our CST-based approach is computationally scalable and effective - as evidenced by empirical experiments based on dozens of industrial models. © 2006 IEEE.",
      "Keywords": "Choice elimination | Consistency checking | Design alternatives | Design choices | UML",
      "Publication venue": "IEEE Transactions on Software Engineering",
      "Publication date": "2006-05-01",
      "Publication type": "Article",
      "Authors": "Egyed, Alexander;Wile, David S.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84949042579",
      "Primary study DOI": "10.1109/ASE.2001.989797",
      "Title": "Static consistency checking for distributed specifications",
      "Abstract": "© 2001 IEEE.Software engineers building a complex system make use of a number of informal and semi-formal notations. We describe a framework, xlinkit, for managing the consistency of development artifacts expressed in such notations. xlinkit supports distributed software engineering by providing a distribution-transparent language for expressing constraints between specifications. It specifies a semantics for those constraints that permits the generation of hyperlinks between inconsistent elements. We give a formal semantics for link generation, and show how we expressed the rules of the UML Foundation/Core modules in our language. We outline how we implemented xlinkit as a light-weight web service using open standard technology and present the results of an evaluation against several sizeable UML models provided by industrial partners.",
      "Keywords": "",
      "Publication venue": "Proceedings - 16th Annual International Conference on Automated Software Engineering, ASE 2001",
      "Publication date": "2001-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Nentwich, Christian;Emmerich, Wolfgang;Finkelstein, Anthony",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-71049134489",
      "Primary study DOI": "10.1109/ICGSE.2009.16",
      "Title": "CAMEL: A Tool for Collaborative Distributed Software Design",
      "Abstract": "Software design activities require rich communication channels where developers can exchange information in multiple ways. It is well established that geographic distribution impacts negatively on the effectiveness of design meetings. In this paper, we present a tool for supporting virtual software design meetings. The features of the tool address four fundamental challenges identified from the literature: (1) information sharing, conflict resolution and development of consensus among geographically distributed designers, (2) availability of sufficient and organizable drawing surfaces for graphical representations, (3) developing shared understanding and managing focus during the discussion and (4) appropriate capturing and storing of all design-relevant information. © 2009 IEEE.",
      "Keywords": "Collaboration tools | Collaborative software engineering | Distributed software design meetings",
      "Publication venue": "Proceedings - 2009 4th IEEE International Conference on Global Software Engineering, ICGSE 2009",
      "Publication date": "2009-11-16",
      "Publication type": "Conference Paper",
      "Authors": "Cataldo, Marcelo;Shelton, Charles;Choi, Yongjoon;Huang, Yun Yin;Ramesh, Vytesh;Saini, Darpan;Wang, Liang Yun",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85024489635",
      "Primary study DOI": "10.1109/PIC.2016.7949539",
      "Title": "An abstract scene model for version control towards cooperative product design",
      "Abstract": "© 2016 IEEE.Aiming to manage 3D models with high efficiency in distributed web environment, an abstract scene model is proposed for version control in the disposing process of cooperative design. The abstract scene model is consisted of multi-layer models which combined with operation history graph, cooperative scene and X3D models. Based on this unified multilayer scene model, some independent private branch of a cooperative scene could be constructed for different designers in a cooperative team, then conflict detection and resolution could be carried out to merge branches into a united scene. For the reason that data transmission of 3D models is decreased, an effective working manner for asynchronous non-liner design could be realized. The approach provides a dynamic version management for asynchronous cooperation, which brings out a great efficiency in web-based product design.",
      "Keywords": "3D models management | Asynchronous collaboration | Cooperative design | Multi-layer model | Version control mechanism | Web3D-based application",
      "Publication venue": "PIC 2016 - Proceedings of the 2016 IEEE International Conference on Progress in Informatics and Computing",
      "Publication date": "2017-06-15",
      "Publication type": "Conference Paper",
      "Authors": "Zhang, Yan;Cai, Hongming",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84885207635",
      "Primary study DOI": "10.1109/ASWEC.2013.32",
      "Title": "Unifying Configuration Management with Merge Conflict Detection and Awareness Systems",
      "Abstract": "As software development becomes an increasingly collaborative effort, traditional development tools have to be extended to support seamless collaboration while minimizing the chances of conflicts. This paper describes Cloud Studio, a collaboration framework that integrates a fine-grained software configuration management model and a real-time awareness system. Cloud Studio's configuration management operates transparently by automatically sharing the changes of developers working on the same project, the real-time awareness system allows for dynamic views on the project selectively including or excluding other developers' changes. With this tight integration, conflicts are prevented in many cases, while leaving individual developers free to experiment without blocking others. The paper also describes a freely available prototype web-based implementation of Cloud Studio and a case study that demonstrates the usability of the approach for collaborative software development. © 2013 IEEE.",
      "Keywords": "collaborative development | Distributed software engineering | software configuration management",
      "Publication venue": "Proceedings of the Australian Software Engineering Conference, ASWEC",
      "Publication date": "2013-10-15",
      "Publication type": "Conference Paper",
      "Authors": "Estler, H. Christian;Nordio, Martin;Furia, Carlo A.;Meyer, Bertrand",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84873197072",
      "Primary study DOI": "10.1109/ICSM.2012.6405274",
      "Title": "Search-based detection of high-level model changes",
      "Abstract": "Software models are iteratively refined, restructured and evolved. The detection and analysis of changes applied between two versions of a model are one of the most important tasks during evolution and maintenance activities. In this paper, we propose an approach to detect high-level model changes in terms of refactorings. Our approach takes as input an exhaustive list of possible refactorings, the initial model and revised model, and generates as output a list of detected changes representing a sequence of refactorings. A solution is defined as a combination of refactorings that should maximize as much as possible the similarity between the expected revised model and the generated model after applying the refactoring sequence on the initial model. Due to the huge number of possible refactoring combinations, a heuristic method is used to explore the space of possible solutions. To this end, we used and adapted genetic algorithm as global heuristic search. The validation results on various versions of real-world models taken from an open source project confirm the effectiveness of our approach. © 2012 IEEE.",
      "Keywords": "model evolution | refactoring detection | search-based model-driven software engineering",
      "Publication venue": "IEEE International Conference on Software Maintenance, ICSM",
      "Publication date": "2012-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Ben Fadhel, Ameni;Kessentini, Marouane;Langer, Philip;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77949475159",
      "Primary study DOI": "10.1109/ICIEEM.2009.5344328",
      "Title": "A conflict resolution algorithm considering design objective optimization in collaborative design",
      "Abstract": "Conflict is inevitable to take place in collaborative design, and conflict resolution plays an important part in complex product collaborative design systems. Firstly, a mathematic description model in collaborative design considering resource conflict, process conflict and design conflict is given, and the mathematic model expresses the origin of conflict and shows that conflict resolution is a Multi-Objective Planning Problem. Next, a conflict resolution algorithm considering design objective optimization is presented, and fuzzy value and fuzzy grade are applied in the algorithm. Depending on both considering design variables having fundamental influences on its design objectives and the cost of conflict resolution, the algorithm can improve the quality and efficiency of conflict resolution. Finally, an example of single cylindrical gear reducer is used to show the validity of the algorithm. ©2009 IEEE.",
      "Keywords": "Collaborative design | Conflict resolution | Design objective optimization | The cost of conflict resolution",
      "Publication venue": "IE and EM 2009 - Proceedings 2009 IEEE 16th International Conference on Industrial Engineering and Engineering Management",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Jin, Guilin;Ying, Baosheng;Rong, Zhijun",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84885209308",
      "Primary study DOI": "10.1109/ICECCS.2013.32",
      "Title": "Merging Test Models",
      "Abstract": "Over the last decade several model merging approaches have been proposed. Most of these approaches focused on version control systems. We are interested in merging test models. We present a merging approach to reconcile unit test models and generate integration test models using the UML Testing Profile. © 2013 IEEE.",
      "Keywords": "Components | Integration | Interactions | Merging | Model Based Testing | Testing",
      "Publication venue": "Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems, ICECCS",
      "Publication date": "2013-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Mussa, Mohamed;Khendek, Ferhat",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-36949039374",
      "Primary study DOI": "10.1109/MISE.2007.4",
      "Title": "A Relationship-Driven Framework for Model Merging",
      "Abstract": "A key problem in model-based development is merging a set of distributed models into a single seamless model. To merge a set of models, we need to know how they are related. In this position paper, we discuss the methodological aspects of describing the relationships between models. We argue that relationships between models should be treated as first-class artifacts in the merge problem and propose a general framework for model merging based on this argument. We illustrate the usefulness of our framework by instantiating it to the state-machine modelling domain and developing a flexible tool for merging state-machines. © 2007 IEEE.",
      "Keywords": "Distributed modelling | Model merging | Model-based development",
      "Publication venue": "Proceedings - ICSE 2007 Workshops: International Workshop on Modeling in Software Engineering, MISE'07",
      "Publication date": "2007-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Sabetzadeh, Mehrdad;Nejati, Shiva;Easterbrook, Steve;Chechik, Marsha",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85075826264",
      "Primary study DOI": "10.1049/iet-sen.2018.5104",
      "Title": "UML2Merge: a UML extension for model merging",
      "Abstract": "© The Institution of Engineering and Technology 2019Model merging plays a chief role in many software engineering activities, e.g. evolving Unified Modelling Language (UML) models for adding new features. Software developers may evolve UML models using merge relationships. However, given the growing heterogeneity of merge strategies and the UML limitations for expressing merge relationship, it is particularly challenging for them to specify merge relationships. Consequently, developers, end up expressing improperly merge relationships. Today, the UML can neither specify the semantics nor the order in which merge relationships must be performed. Developers are unable to specify the semantics and order in which merge relationships must be performed. This study, therefore, proposes UML2Merge, which is a UML extension for expressing merge relationship. The UML2Merge was evaluated through an empirical study with 10 participants for investigating its effects on the merge effort, the correctness of merge relationships, and the participant's acceptance. The collected data suggest that the UML2Merge is proper to express merge relationships by requiring a low merge effort, producing elevated correctness of merge relationships, and having a high acceptance of the participants. The results are encouraging and show the potential for using UML2Merge to express the evolution of UML models through merge relationships.",
      "Keywords": "",
      "Publication venue": "IET Software",
      "Publication date": "2019-12-01",
      "Publication type": "Article",
      "Authors": "Farias, Kleinner;De Oliveira, Toacy Cavalcante;Gonçales, Lucian José;Bischoff, Vinicius",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84884128321",
      "Primary study DOI": "10.1109/CSCWD.2013.6580932",
      "Title": "Solving two special dependency conflicts in real-time collaborative design systems",
      "Abstract": "Dependency Graph (DG) is widely used in 3D design systems to represent the relationships among inner objects of the document. In order to transform the single-user application, which uses DG as the document model, into groupware system, OT is usually adapted to the new environment and five types of dependency conflicts are proposed and resolved in the literature. However, in some scenarios where loops are not allowed in the DG model, there are also two other conflicts named as cross-dependency conflict and transitive -dependency conflict, which may generate inconsistency document status or intention violation. This paper describes the definitions and detection rules of these two special conflicts and contributes a multi-version strategy to solve them. Conflict resolution strategies are detailed and examples are illustrated for their understanding. © 2013 IEEE.",
      "Keywords": "Conflict Resolution | Dependency Graph | Multi-version Strategy | Real-time Collaborative Design",
      "Publication venue": "Proceedings of the 2013 IEEE 17th International Conference on Computer Supported Cooperative Work in Design, CSCWD 2013",
      "Publication date": "2013-09-19",
      "Publication type": "Conference Paper",
      "Authors": "Gao, Liping;Guo, Shuxian;Zhang, Yuben;Wang, Shanshan;Chen, Qingkui;Lu, Tun",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84906910346",
      "Primary study DOI": "10.5220/0004702100410054",
      "Title": "A graph-based algorithm for three-way merging of ordered collections in EMF models",
      "Abstract": "Version control for models is not yet supported in an adequate way. In this paper, we address three-way merging of model versions. Based on a common base version b, two alternative versions a1 and a2 were developed by copying and modifying the base version. To reconcile these changes, a merged version m is to be created as a common successor of a1 and a2. We present a graph algorithm to solve an important subproblem which occurs in three-way model merging: merging of (linearly) ordered collections. To create the merged version, a generalized topological sort is performed. Conflicts occur if the order of elements cannot be deduced automatically; these conflicts are resolved either interactively or by default rules. We have implemented the merge algorithm in our tool BTMerge, which performs a consistency-preserving merge of versions of EMF models being instances of arbitrary Ecore models. By taking arbitrary move operations into account, the algorithm considerably goes beyond the functionality of contemporary merge tools which are based on common subsequences and thus cannot adequately handle move operations. Copyright © 2014 SCITEPRESS - Science and Technology Publications. All rights reserved.",
      "Keywords": "EMF models | Graph algorithms | Model merging",
      "Publication venue": "MODELSWARD 2014 - Proceedings of the 2nd International Conference on Model-Driven Engineering and Software Development",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Schwägerl, Felix;Uhrig, Sabrina;Westfechtel, Bernhard",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85021393633",
      "Primary study DOI": "10.1109/ICSA.2017.45",
      "Title": "Continuous Analysis of Collaborative Design",
      "Abstract": "© 2017 IEEE.In collaborative design, architects' individual design decisions may conflict and, when joined, may violate system consistency rules or non-functional requirements. These design conflicts can hinder collaboration and result in wasted effort. Proactive detection of code-level conflicts has been shown to improve collaborative productivity, however, the computational resource requirements for proactively computing design conflicts have hindered its applicability in practice. Our survey and interviews of 50 architects from six large software companies find that 60% of their projects involve collaborative design, that architects consider integration costly, and that design conflicts are frequent and lead to lost work. To aid collaborative design, we re-engineer FLAME, our prior design conflict detection technique, to use cloud resources and a novel prioritization algorithm that, together, achieve efficient and nonintrusive conflict detection, and guarantee a bound on the time before a conflict is discovered. Two controlled experiments with 90 students trained in software architecture in a professional graduate program, demonstrate that architects using FLAME design more efficiently, produce higher-quality designs, repair conflicts faster, and prefer using FLAME. An empirical performance evaluation demonstrates FLAME's scalability and verifies its time-bound guarantees.",
      "Keywords": "collaborative design | conflict detection | proactive conflict detection | speculative analysis",
      "Publication venue": "Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017",
      "Publication date": "2017-05-16",
      "Publication type": "Conference Paper",
      "Authors": "Bang, Jae Young;Brun, Yuriy;Medvidovic, Nenad",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85075926587",
      "Primary study DOI": "10.1109/MODELS-C.2019.00044",
      "Title": "Multifaceted Consistency Checking of Collaborative Engineering Artifacts",
      "Abstract": "© 2019 IEEE.In modern day engineering projects, different engineers collaborate on creating a vast multitude of different artifacts such as requirements, design specifications and code. While these artifacts are strongly interdependent, they are often treated in isolation and with little regard to their semantical overlappings. Automatic consistency checking approaches between these artifacts are rare and often not feasible. Therefore, artifacts become inconsistent and the consequences are costly errors. This work proposes a multifaceted consistency checking approach for different kinds of engineering artifacts, with the help of a collaborative engineering platform. The proposed approach enables engineers to automatically check the consistency of their individual artifacts against the work results of other engineers, without using different tools than the established ones of their fields and without merging their artifacts with those of others.",
      "Keywords": "Collaborative engineering | Consistency checking | Engineering artifacts",
      "Publication venue": "Proceedings - 2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems Companion, MODELS-C 2019",
      "Publication date": "2019-09-01",
      "Publication type": "Conference Paper",
      "Authors": "Trols, Michael Alexander;Mashkoor, Atif;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-50249157404",
      "Primary study DOI": "10.1109/COLCOM.2006.361897",
      "Title": "Real-Time Collaborative Software Modeling Using UML with Rational Software Architect",
      "Abstract": "Modeling is commonly used in the process of software development. UML (Unified Modeling Language) is a standard software modeling language and has been widely adopted for software analysis and design. As software systems are getting lager and more complex nowadays, software modeling using UML often requires collective and collaborative efforts from multiple software designers. In contrast, most of today's software modeling applications are still single-user-oriented and do not offer much help to coordinate interaction and collaboration among team members. In this paper, we will present the technical challenges and solutions in providing advanced collaboration capabilities and transparently integrating them into mainstream software modeling applications to effectively facilitate collaboration among geographically dispersed software designers. The work has been tested and demonstrated by the design of CoRSA (Collaborative Rational Software Architect) - an experimental collaborative software modeling prototype based on RSA, one of the most widely used commercial software modeling applications in the market. ©2006 IEEE.",
      "Keywords": "",
      "Publication venue": "2006 International Conference on Collaborative Computing: Networking, Applications and Worksharing, CollaborateCom",
      "Publication date": "2006-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Liu, Siyuan;Zheng, Yang;Shen, Haifeng;Xia, Steven;Sun, Chengzheng",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70350432513",
      "Primary study DOI": "10.1109/WETICE.2009.48",
      "Title": "Towards a Framework for Distributed and Collaborative Modeling",
      "Abstract": "Increasingly, models are becoming first class core assets, and model-driven engineering requires novel techniques, tools, and practices to face the globalization of software development in the (always more) pervasive IT world. This paper proposes a framework for synchronous and asynchronous concurrent and collaborative modeling. Synchronous collaborative modeling offers services for sharing the modeling space, models, documentation, and configuration, while asynchronous collaborative modeling offers services for supporting merging of models modified and edited separately by different software engineers. Our approach is based on the observation that it is in general more convenient to store differences between subsequent versions of a system than the whole models of each stage. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, WETICE",
      "Publication date": "2009-11-02",
      "Publication type": "Conference Paper",
      "Authors": "Cicchetti, Antonio;Muccini, Henry;Pelliccione, Patrizio;Pierantonio, Alfonso",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-81255150894",
      "Primary study DOI": "10.1109/ICGSE.2011.18",
      "Title": "Distributed Collaborative Model Editing Framework for Domain Specific Modeling Tools",
      "Abstract": "Domain Specific Modeling (DSM) tools have matured and became powerful over the past few years and are now used more frequently to model complex systems. Consequently, the demand for model management and collaboration among DSM tools becomes more important. In collaborative modeling, domain specific models are mostly edited and elaborated concurrently by different semi-autonomous users. Hence, there is a need for reconciliating these parallely evolved models so as to seamlessly work together. CSCW community proposes tools or techniques to ensure collaboration among general purpose modeling languages, but they do not give functionalities to support reconciliation and merging for asynchronous modification. In addition, management of communications among members of collaborative group could also help to facilitate collaboration in the group. In this paper, we propose a communication framework to manage exchanges of concurrently edited DSM models among users. Besides, we present a reconciliation framework to merge concurrently evolved DSM models. © 2011 IEEE.",
      "Keywords": "collaboration | coordination | DSM | global software development",
      "Publication venue": "Proceedings - 2011 6th IEEE International Conference on Global Software Engineering, ICGSE 2011",
      "Publication date": "2011-11-21",
      "Publication type": "Conference Paper",
      "Authors": "Koshima, Amanuel;Englebert, Vincent;Thiran, Philippe",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85049801550",
      "Primary study DOI": "10.1109/MS.2018.290101728",
      "Title": "Secure Views for Collaborative Modeling",
      "Abstract": "© 2018 IEEE.Model-based systems engineering necessitates effective collaboration between different collaborators, teams, and stakeholders. Traditional approaches used for managing concurrent code-based development don't naturally extend to collaborative modeling, which implies novel challenges. This article presents a collaborative-modeling framework that provides secure views with precisely defined model access to each collaborator, using rule-based access control policies. This article is part of a theme issue on collaborative modeling.",
      "Keywords": "access controls | integration and modeling | inter-enterprise collaboration | intra-enterprise collaboration | MONDO | software development | software engineering | system architectures",
      "Publication venue": "IEEE Software",
      "Publication date": "2018-11-01",
      "Publication type": "Article",
      "Authors": "Debreceni, Csaba;Bergmann, Gábor;Ráth, István;Varró, Dániel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-63349091709",
      "Primary study DOI": "10.1109/HICSS.2009.23",
      "Title": "A Model Repository for Collaborative Modeling with the Jazz Development Platform",
      "Abstract": "Today's software development projects have a huge demand for a comprehensive and integrated support in the team-based development of models. Since they typically rely on file-based version control systems such as CVS and assume that working with models does not differ from working with code, current solutions solve only one part of the problem. This paper addresses this gap between what is needed in practice and what is provided by existing tools. Based on the collaboration platform Jazz, a model repository prototype is developed that provides adequate versioning support and leverages the collaboration mechanisms provided by Jazz for concurrent model development. Especially the integration of concurrently developed models turned out to be a complex and collaborative task. The results of this investigation are integrated into the prototype yielding a model repository that supports team-based development to a considerable extent. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 42nd Annual Hawaii International Conference on System Sciences, HICSS",
      "Publication date": "2009-04-03",
      "Publication type": "Conference Paper",
      "Authors": "Bartelt, Christian;Molter, Georg;Schumann, Tim",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84951806086",
      "Primary study DOI": "10.1109/ICSE.2015.223",
      "Title": "FLEXISKETCH TEAM- Collaborative Sketching and Notation Creation on the Fly",
      "Abstract": "© 2015 IEEE.When software engineers collaborate, they frequently use whiteboards or paper for sketching diagrams. This is fast and flexible, but the resulting diagrams cannot be interpreted by software modeling tools. We present FLEXISKETCH TEAM, a tool solution consisting of a significantly extended version of our previous, single-user FLEXISKETCH tool for Android devices and a new desktop tool. Our solution for collaborative, model-based sketching of free-form diagrams allows users to define and re-use diagramming notations on the fly. Several users can work simultaneously on the same model sketch with multiple tablets. The desktop tool provides a shared view of the drawing canvas which can be projected onto an electronic whiteboard. Preliminary results from an exploratory study show that our tool motivates meeting participants to actively take part in sketching as well as defining ad-hoc notations. Demo video: http://youtu.be/0kHjNfHLViM.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2015-08-12",
      "Publication type": "Conference Paper",
      "Authors": "Wuest, Dustin;Seyff, Norbert;Glinz, Martin",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84898614086",
      "Primary study DOI": "10.1109/CBI.2013.62",
      "Title": "A case-study of wiki-supported collaborative drafting of business processes models",
      "Abstract": "Redesign of business processes is an activity frequently performed in modern organizations as a response to intrinsic and extrinsic change requirements. The way (methods, techniques, tools) a process is redesigned varies greatly with the process context. In contrast, involving stakeholders of a process in process redesign can be considered a common practice throughout organizations of all kinds. Hence, research and industry have only recently investigated the characteristics of collaboration in process redesign and the challenges that arise for software-support respectively. In this paper we will systematically describe findings from a case-study where we adapted a particular type of collaboration technology - a wiki engine - towards collaborative process modeling support and exposed it to a real-world setting. The case-study shows how a small team of domain experts within a large office supply manufacturing company redesigned a recruiting process by using a wiki as their primary process modeling environment. © 2013 IEEE.",
      "Keywords": "Business process design | Business process modeling | Collaborative modeling | Information systems design",
      "Publication venue": "Proceedings - 2013 IEEE International Conference on Business Informatics, IEEE CBI 2013",
      "Publication date": "2013-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Erol, Selim;Neumann, Gustaf",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-38649114365",
      "Primary study DOI": "10.1109/ICGSE.2006.261227",
      "Title": "Sysiphus: Enabling informal collaboration in global software development",
      "Abstract": "In global software projects, informal communication across sites is severely hampered, making it difficult to disseminate implicit knowledge. Participants have a partial view of the overall organization, do not have access to the complete rationale behind decisions, and when changes arise, participants from other sites are surprised. Consequently, issues that could be clarified almost immediately require days until the relevant stakeholders are identified, the issues are understood, and a resolution is agreed upon. We focus on the specific problem of externalizing issues with their context, stakeholders, and organizational roles in distributed settings. The challenge is to capture sufficient knowledge as a side effect of development, while structuring it for long-term use. We describe SYSIPHUS, a distributed environment providing a uniform framework for system models, collaboration artifacts, and organizational models. SYSIPHUS encourages participants to make communication and issues explicit in the context of system models and become aware of relevant stakeholders. © 2006 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings - 2006 IEEE International Conference on Global Software Engineering, ICGSE 2006",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Bruegge, Bernd;Dutoit, Allen H.;Wolf, Timo",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-63349087748",
      "Primary study DOI": "10.1109/HICSS.2009.112",
      "Title": "Collaborative Modeling - A Design Science Approach",
      "Abstract": "We have used a design science approach to study the collaborative creation of conceptual models. We have designed a collaborative modeling architecture based on business needs and applicable knowledge from theory and empirical findings from a modeling study using conventional modeling. A tool for this architecture was then developed and used as an instrument to confirm the practical relevance of the approach and the validity of the employed theory. © 2009 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the 42nd Annual Hawaii International Conference on System Sciences, HICSS",
      "Publication date": "2009-04-03",
      "Publication type": "Conference Paper",
      "Authors": "Rittgen, Peter",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84865037686",
      "Primary study DOI": "10.1109/MISE.2012.6226017",
      "Title": "A categorical model of model merging and weaving",
      "Abstract": "Model driven engineering advocates the separation of concerns during the design time of a system, which leads to the creation of several different models, using several different syntaxes. However, to reason on the overall system, we need to compose these models. Unfortunately, composition of models is done in an ad hoc way, preventing comparison, capitalisation and reuse of the composition operators. In order to improve comprehension and allow comparison of merging and weaving operators, we use category theory to propose a unified framework to formally define merging and weaving of models. We successfully use this framework to compare them, both through the way they are transformed in the formalism, and through several properties, such as completeness or non-redundancy. Finally, we validate this framework by checking that it correctly identifies three tools as performing merging or weaving of models. © 2012 IEEE.",
      "Keywords": "",
      "Publication venue": "2012 4th International Workshop on Modeling in Software Engineering, MiSE 2012 - Proceedings",
      "Publication date": "2012-08-20",
      "Publication type": "Conference Paper",
      "Authors": "Marchand, Jonathan Y.;Combemale, Benoit;Baudry, Benoit",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85075954862",
      "Primary study DOI": "10.1109/MODELS-C.2019.00043",
      "Title": "Consistency Control for Model Versions in Evolving Model-Driven Software Product Lines",
      "Abstract": "© 2019 IEEE.Model-driven software product lines evolve in both time and space. Consistency control for model versions constitutes a key challenge. We propose a novel approach to consistency control called well-formedness analysis and repair: Instead of attempting to guarantee consistency of each configurable version a priori (which is hard and restrictive), consistency is controlled only when a product version is actually configured. Conflicts, i.e., violation of well-formedness constraints, are detected and repaired, driven by configurable strategies. This approach is generic; it is instantiated for feature models (for the variability model) and EMF models (as domain artifacts).",
      "Keywords": "Consistency control | Evolution | Model | Software product line | Version",
      "Publication venue": "Proceedings - 2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems Companion, MODELS-C 2019",
      "Publication date": "2019-09-01",
      "Publication type": "Conference Paper",
      "Authors": "Schropfer, Johannes;Schwagerl, Felix;Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79953196410",
      "Primary study DOI": "10.1109/TSE.2010.38",
      "Title": "Automatically Detecting and Tracking Inconsistencies in Software Design Models",
      "Abstract": "Software models typically contain many inconsistencies and consistency checkers help engineers find them. Even if engineers are willing to tolerate inconsistencies, they are better off knowing about their existence to avoid follow-on errors and unnecessary rework. However, current approaches do not detect or track inconsistencies fast enough. This paper presents an automated approach for detecting and tracking inconsistencies in real time (while the model changes). Engineers only need to define consistency rules - in any language - and our approach automatically identifies how model changes affect these consistency rules. It does this by observing the behavior of consistency rules to understand how they affect the model. The approach is quick, correct, scalable, fully automated, and easy to use as it does not require any special skills from the engineers using it. We evaluated the approach on 34 models with model sizes of up to 162,237 model elements and 24 types of consistency rules. Our empirical evaluation shows that our approach requires only 1.4 ms to reevaluate the consistency of the model after a change (on average); its performance is not noticeably affected by the model size and common consistency rules but only by the number of consistency rules, at the expense of a quite acceptable, linearly increasing memory consumption. © 2006 IEEE.",
      "Keywords": "design | Design tools and techniques",
      "Publication venue": "IEEE Transactions on Software Engineering",
      "Publication date": "2011-02-25",
      "Publication type": "Article",
      "Authors": "Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84968866515",
      "Primary study DOI": "10.1109/WISE.2000.882418",
      "Title": "Conflict control locking in distributed cooperative graphics editors",
      "Abstract": "© 2000 IEEE.Communication latency presents a major challenge to achieving high responsiveness for Internet based cooperative editing systems. The authors propose conflict control locking (post-locking) schemes for conflict resolution in real time object based cooperative graphics editors. With these schemes, no locking request is needed before applying an editing operation to an object, instead, a lock will automatically be generated by the system if a conflict occurs. Lock ownership assigning rules are devised for the schemes. With a specific post-locking approach, algorithms and implementation techniques such as lock synchronisation detection, voting, and group intention realisation, are discussed in detail.",
      "Keywords": "Concurrency control | cooperative graphics editors | CSCW | distributed computing | multi-versioning",
      "Publication venue": "Proceedings of the 1st International Conference on Web Information Systems Engineering, WISE 2000",
      "Publication date": "2000-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Xue, L.;Zhang, K.;Sun, C.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84969964141",
      "Primary study DOI": "10.5220/0005776903390346",
      "Title": "Evaluating the Cloud Architecture of AToMPM",
      "Abstract": "© Copyright 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.In model-driven engineering, stakeholders work on models in order to design, transform, simulate, and analyze systems. Complex systems typically involve many stakeholder groups working in a coordinated manner on different aspects of a system. Therefore, there is a need for collaborative platforms to allow modelers to work together. Previously, we introduced the cloud-based multi-user tool AToMPM, designed to address the challenges for building a collaborative platform for modeling. This paper presents on the multi-user, multiview architecture of AToMPM and an initial evaluation of its performance and scalability.",
      "Keywords": "Architecture | Collaboration | Multi-user | Multi-view | Stress Testing | Volume Testing",
      "Publication venue": "MODELSWARD 2016 - Proceedings of the 4th International Conference on Model-Driven Engineering and Software Development",
      "Publication date": "2016-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Corley, Jonathan;Syriani, Eugene;Ergin, Huseyin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84883061307",
      "Primary study DOI": "10.1145/2463372.2463553",
      "Title": "Search-based model merging",
      "Abstract": "In Model-Driven Engineering (MDE) adequate means for collaborative modeling among multiple team members is crucial for large projects. To this end, several approaches exist to identify the operations applied in parallel, to detect conflicts among them, as well as to construct a merged model by incorporating all non-conflicting operations. Conflicts often denote situations where the application of one operation disables the applicability of another operation. Whether one operation disables the other, however, often depends on their application order. To obtain a merged model that maximizes the combined effect of all parallel operations, we propose an automated approach for finding the optimal merging sequence that maximizes the number of successfully applied operations. Therefore, we adapted and used a heuristic search algorithm to explore the huge search space of all possible operation sequences. The validation results on merging various versions of real-world models confirm that our approach finds operation sequences that successfully incorporate a high number of conflicting operations, which are otherwise not reflected in the merge by current approaches. Copyright © 2013 ACM.",
      "Keywords": "Genetic algorithm | Model evolution | Model-driven software engineering | Search-based software engineering",
      "Publication venue": "GECCO 2013 - Proceedings of the 2013 Genetic and Evolutionary Computation Conference",
      "Publication date": "2013-09-02",
      "Publication type": "Conference Paper",
      "Authors": "Kessentini, Marouane;Werda, Wafa;Langer, Philip;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84863603553",
      "Primary study DOI": "10.1145/2245276.2232046",
      "Title": "The role of editor in collaborative modeling",
      "Abstract": "In business processes, modeling is usually a collaborative activity. In it stakeholders analyze or design business processes. One of the challenges is that group members have diverse backgrounds and conflicting interests which make it difficult to arrive at a model that represents a consensus. It is therefore important to study the way in which modeling teams are organized to overcome these problems. To approach this issue we investigated the modeling behavior of such groups with the help of a tool that supports collaborative modeling while at the same time allowing for the effective collection of data on modeling activities. Besides confirming known roles we also discovered a new one, editor, that only emerges in tool-supported sessions and that functions as a mediator between modeling experts and domain experts. © 2012 ACM.",
      "Keywords": "business process management | e-collaboration | group modeling | roles in modeling | tool-supported modeling",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2012-07-12",
      "Publication type": "Conference Paper",
      "Authors": "Rittgen, Peter",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85030774393",
      "Primary study DOI": "10.1109/MODELS.2017.33",
      "Title": "Property-based locking in collaborative modeling",
      "Abstract": "© 2017 IEEE.Large-scale model-driven engineering projects are carried out collaboratively. Enabling a high degree of concurrency is required to make the traditionally rigid development processes more agile. The increasing number of collaborators increases the probability of introducing conflicts which need to be resolved manually by the collaborators. In case of highly interdependent models, avoiding conflicts by the use of locks can save valuable time. However, traditional locking techniques such as fragment-based and object-based strategies may impose unnecessary restrictions on editing, which can decrease the efficiency of collaboration.In this paper, we propose a property-based locking approach that generalizes traditional locking techniques, and further allows more fine-grained locks in order to restrict modifications only when necessary. A lock is considered to be violated if a match appears or disappears for its associated graph pattern (formula), which captures the property of the model that the upcoming edit transaction can be freely executed. An initial evaluation has been carried out using a case study of the MONDO EU project.",
      "Keywords": "collaboration | locking",
      "Publication venue": "Proceedings - ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems, MODELS 2017",
      "Publication date": "2017-11-07",
      "Publication type": "Conference Paper",
      "Authors": "Debreceni, Csaba;Bergmann, Gabor;Rath, Istvan;Daniel, Varro",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85071944703",
      "Primary study DOI": "10.1145/3330204.3330239",
      "Title": "UMLCollab: A Hybrid Approach for Collaborative Modeling of UML Models",
      "Abstract": "© 2019 Association for Computing Machinery.In collaborative software modeling the two main types of collaboration still present problems, such as the constant interruptions thathinder the cognitive process in synchronous collaboration, and thecomplicated and costly stages of conflict resolution in asynchronous collaboration. For this, this paper proposes a technique called\"UMLCollab\". This technique combines aspects from synchronousand asynchronous collaboration. Through experiments, developersapplied the proposed solution and they achieved to an intermediateproductivity in relation to traditional collaboration methods. Theresults showed that the \"UMLCollab\" improved the correctness ofthe changed models, the notion of developer regarding to the resolution of conflicts, and enabled the parallel changes occurring whileother collaborators are working on without degrade the softwarediagrams being modelled locally.",
      "Keywords": "Collaborative Software Engineering | Collaborative Software Modeling | Software Engineering Oriented by Collaborative Models",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2019-05-20",
      "Publication type": "Conference Paper",
      "Authors": "McLyndon, McLyndon S.;Farias, Kleinner;Barbosa, Jorge;Gonçales, Lucian;Bishoff, Vinicius",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77955159281",
      "Primary study DOI": "10.1145/1826147.1826156",
      "Title": "Colex: a web-based collaborative conflict lexicon",
      "Abstract": "While graphical modeling languages gained recognition as being a promising successor of third-generation programming languages, their widespread employment is still decelerated by the absence of adequate version control management for modeling artifacts. Even worse, the expected behavior and quality requirements for upcoming model versioning systems are only vaguely stated and understood. When it comes to defining, detecting, and resolving conflicts, no consolidated categorization and no common benchmark exist which impedes a uniform comparison of current approaches. With this paper, we invite the model versioning community to conjointly accomplish a consolidated body of knowledge which documents various types of conflicts, their detectability, as well as applicable resolution strategies. Therefore, we present Colex, an open, web-based, collaborative conflict lexicon. As a starting point, we provide a causal categorization of conflicts and - according to these categories - a set of versioning examples. © 2010 ACM.",
      "Keywords": "Model management | Model versioning",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-08-06",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Langer, Philip;Seidl, Martina;Wieland, Konrad;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79959442390",
      "Primary study DOI": "10.1145/1370152.1370157",
      "Title": "Consistence preserving model merge in collaborative development processes",
      "Abstract": "Specification by models plays a decisive role, during the development process of complex systems. The division and concurrency of labor in teams is a further characteristic of such development. Therefore an efficient configuration and variant management of resulting documents is essential. In practice, a lot of established configuration management systems like CVS and Subversion are available which provide a text based merge. Unfortunately these systems are inappropriate for the management of models because they ignore the syntactic and semantic structure which is specified by the associated metamodels. Especially during the merge of model versions the mentioned systems fails at the generation of a meta-model consistent model. In this paper a proposal is presented which is enabled to merge model versions in a model based, collaborative development process. Furthermore meta-model independent methods for consistent-receiving model merging are explained. Copyright © 2008 ACM.",
      "Keywords": "Collaborative development | Inconsistency management | Model driven engineering | Model merge | Model versioning | Software configuration management",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2008-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Bartelt, Christian",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77955148759",
      "Primary study DOI": "10.1145/1826147.1826155",
      "Title": "A formal approach to three-way merging of EMF models",
      "Abstract": "Inadequate version control for models significantly impedes the application of model-driven software development. In particular, sophisticated support for merging model versions is urgently needed. In this paper, we present a formal approach to three-way merging of models in the EMF framework which may be applied to instances of arbitrary Ecore models. We specify context-free and context-sensitive rules for model merging which both detect and resolve merge conflicts. Furthermore, we present a merge algorithm which produces a valid model provided it is supplied with valid input models. © 2010 ACM.",
      "Keywords": "EMF models | Merging",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-08-06",
      "Publication type": "Conference Paper",
      "Authors": "Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77955129811",
      "Primary study DOI": "10.1145/1826147.1826151",
      "Title": "Mirador: a synthesis of model matching strategies",
      "Abstract": "Mirador is a model merging tool that supports multiple model comparison strategies for the purpose of matching model elements. Capable of running either standalone, or as a Fujaba plug-in, Mirador leverages the CoObRA software versioning package to obtain model change information. The bringing together of various comparison strategies allows Mirador to solicit measures of element similarity from one or more strategies, as appropriate for a given matching context. As an addition to this strategy mix we suggest one based on model evolution, and illustrate its potential for use with some simple examples. Mirador performs operation-based merging, premised on the notion of a plane of change operations, which we have extended into the third dimension to enable the detection of cross-matching strategy conflicts. We also propose breaking this monolithic change plane up into a series of local change planes to facilitate effective, conflict free merging. © 2010 ACM.",
      "Keywords": "Change plane | Element matching strategy | Local merging | MDE | Mirador | Model merging | Operation-based merging",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-08-06",
      "Publication type": "Conference Paper",
      "Authors": "Barrett, Stephen C.;Butler, Greg;Chalin, Patrice",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-57349190141",
      "Primary study DOI": "10.1145/1368088.1368158",
      "Title": "Detecting model inconsistency through operation-based model construction",
      "Abstract": "Nowadays, large-scale industrial software systems may involve hundreds of developers working on hundreds of different but related models representing parts of the same system specification. Detecting and resolving structural inconsistencies between these models is then critical. In this article we propose to represent models by sequences of elementary construction operations, rather than by the set of model elements they contain. Structural and methodological consistency rules can then be expressed uniformly as logical constraints on such sequences. Our approach is meta-model independent, allowing us to deal with consistency between different models whatever their kind. We have validated our approach by building a Prolog engine that detects violations of structural and methodological constraints specified on UML 2.1 models and requirement models. This engine has been integrated into two contemporary UML-based modelling environments, Eclipse EMF and Rational Software Architect (RSA).",
      "Keywords": "Consistency | Logic | Meta-model | Model",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2008-12-15",
      "Publication type": "Conference Paper",
      "Authors": "Blanc, Xavier;Mounier, Isabelle;Mougenot, Alix;Mens, Tom",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85123042774",
      "Primary study DOI": "10.1145/3336294.3336308",
      "Title": "Foundations of Collaborative, Real-Time Feature Modeling",
      "Abstract": "© 2019 Copyright held by the owner/author(s).Feature models are core artifacts in software-product-line engineering to manage, maintain, and configure variability. Feature modeling can be a cross-cutting concern that integrates technical and business aspects of a software system. Consequently, for large systems, a team of developers and other stakeholders may be involved in the modeling process. In such scenarios, it can be useful to utilize collaborative, real-time feature modeling, analogous to collaborative text editing in Google Docs or Overleaf. However, current techniques and tools only support a single developer to work on a model at a time. Collaborative and simultaneous editing of the same model is often achieved by using version control systems, which can cause merge conflicts and do not allow immediate verification of a model, hampering real-time collaboration outside of face-to-face meetings. In this paper, we describe the formal foundations of collaborative, real-time feature modeling, focusing on concurrency control by synchronizing multiple actions of collaborators in a distributed network. We further report on preliminary results, including an initial prototype. Our contribution provides the basis for extending feature-modeling tools to enable advanced collaborative feature modeling and integrate it with related tasks.",
      "Keywords": "Collaboration | Consistency maintenance | Feature modeling | Groupware | Software product line",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2019-09-09",
      "Publication type": "Conference Paper",
      "Authors": "Kuiter, Elias;Krieter, Sebastian;Krüger, Jacob;Leich, Thomas;Saake, Gunter",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84864573005",
      "Primary study DOI": "",
      "Title": "Towards accurate conflict detection in a VCS for model artifacts: a comparison of two semantically enhanced approaches",
      "Abstract": "In collaborative software development the utilization of Version Control Systems (VCSs) is a must. For this important task some graph-based VCSs for model artifacts already emerged. Optimistic approaches, which are nowadays the designated ones, allow parallel editing of one resource and therefore changes can result in conflicts and inconsistencies. To be exible for the ever increasing variety of modeling environments and languages VCSs should be independent of the modeling environment and applicable on any modeling language. Those VCS characteristics implicate a lack of information for the conflict detection method by virtue of firstly receiving solely the state of an artifact without concrete editing operations and secondly due to unavailable knowledge about the semantics of a modeling language. In such VCSs inconsistencies would even arise more often. Hence, accurate conflict detection methods are indispensable for the realization of optimistic, environment and language independent VCSs. This can be achieved by providing some understanding about the models's semantics which is possible by specifying machine interpretable formal semantics. Therefore, in this work, a comparison of two semantically enhanced conflict detection approaches is presented with respect to their suitability for the integration in an optimistic, environment and language independent VCS for model artifacts to achieve more accurate conflict reports. Copyright © 2009, Australian Computer Society, Inc.",
      "Keywords": "Conflict detection | Model comparison | Model consistency | Model evolution | Model-driven engineering | Parallel model development | Version Control System",
      "Publication venue": "Conferences in Research and Practice in Information Technology Series",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Altmanninger, Kerstin;Kotsis, Gabriele",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77955156817",
      "Primary study DOI": "10.1145/1826147.1826154",
      "Title": "Operation-based conflict detection",
      "Abstract": "In recent years, models are increasingly used throughout the entire lifecycle in software engineering projects. In effect, the need for collaboration and for management of change on these models emerged. Traditionally, Software Configuration Management (SCM) systems are employed to facilitate collaboration on software engineering artifacts and to control change to these artifacts. For scalability and to support offline operation, most of these systems employ optimistic concurrency control and therefore require methods to detect concurrent change - also known as conflict detection. However, many researchers have shown that existing approaches for SCM systems do not work well on graph-like models, since they are geared towards textual artifacts and do not take the graph structure of models into account. The approaches for conflict detection in these systems show many false positives, since they require a merge every time the same configuration item - in this case the same file - is changed. In this paper, we propose operation-based conflict detection, which detects conflicts directly on the operations that change the model. We compare operation-based conflict detection to file-based conflict detection in a multi-case study and show that operation-based conflict detection results in less conflicts and therefore requires fewer merges. © 2010 ACM.",
      "Keywords": "Conflict detection | Model merging | Operation-based | Software Configuration Management | Version control",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-08-06",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Herrmannsdoerfer, Markus;Von Wesendonk, Otto;Helming, Jonas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84862108901",
      "Primary study DOI": "10.1109/date.2012.6176655",
      "Title": "Debugging of inconsistent UML/OCL models",
      "Abstract": "While being a de-facto standard for the modeling of software systems, the Unified Modeling Language (UML) is also increasingly used in the domain of hardware design and hardware/software co-design. To ensure the correctness of the specified systems, approaches have been presented which automatically verify whether a UML model is consistent, i.e. free of conflicts. However, if the model is inconsistent, these approaches do not provide further information to assist the designer in finding the error. In this work, we present an automatic debugging approach which determines contradiction candidates, i.e. a small subset of the original model explaining the conflict. These contradiction candidates aid the designer in finding the error faster and therefore accelerate the whole design process. The approach employs different satisfiability solvers as well as different debugging strategies. Experimental results demonstrate that, even for large UML models with up to 2500 classes and constraints, the approach determines a very small number of contradiction candidates to be inspected. © 2012 EDAA.",
      "Keywords": "",
      "Publication venue": "Proceedings -Design, Automation and Test in Europe, DATE",
      "Publication date": "2012-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Wille, Robert;Soeken, Mathias;Drechsler, Rolf",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84883717249",
      "Primary study DOI": "10.1145/2491279.2491281",
      "Title": "Model-based tool support for consistent three-way merging of EMF models",
      "Abstract": "Inadequate version control has been identified as a major obstacle to the application of model-driven software engineering. In particular, sophisticated support for merging model versions is urgently needed. We present a tool for merging of EMF models which may be applied to instances of arbitrary Ecore models. The tool advances the state of the art by guaranteeing a consistent merge result. Furthermore, it detects and resolves not only context-free, but also context-sensitive conflicts. Our merge tool is model-based; it relies on EMF for its implementation. Initial experiences gained from its application confirm that the merge tool operates both accurately and efficiently. © 2013 ACM.",
      "Keywords": "EMF models | merging",
      "Publication venue": "ACadeMics Tooling with Eclipse, ACME 2013 - A Joint ECMFA/ECSA/ECOOP Workshop",
      "Publication date": "2013-09-16",
      "Publication type": "Conference Paper",
      "Authors": "Schwägerl, Felix;Uhrig, Sabrina;Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77949375456",
      "Primary study DOI": "10.1145/1595696.1595757",
      "Title": "Supporting automatic model inconsistency fixing",
      "Abstract": "Modern development environments often involve models with complex consistency relations. Some of the relations can be automatically established through \"fixing procedures\". When users update some parts of the model and cause inconsistency, a fixing procedure dynamically propagates the update to other parts to fix the inconsistency. Existing fixing procedures are manually implemented, which requires a lot of efforts and the correctness of a fixing procedure is not guaranteed. In this paper we propose a new language, Beanbag, to support the development of fixing procedures. A Beanbag program defines and checks a consistency relation similarly to OCL, but the program can also be executed in a fixing mode, taking user updates on the model and producing new updates to make the model satisfy the consistency relation. In this way Beanbag significantly eases the development of fixing procedures. In addition, a Beanbag program is also guaranteed to be correct with respect to the three correctness properties we define. We evaluate Beanbag over a set of MOF and UML consistency relations and the result shows that Beanbag is useful in practice. Copyright 2009 ACM.",
      "Keywords": "Beanbag | Inconsistency fixing | Model consistency | OCL",
      "Publication venue": "ESEC-FSE'09 - Proceedings of the Joint 12th European Software Engineering Conference and 17th ACM SIGSOFT Symposium on the Foundations of Software Engineering",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Xiong, Yingfei;Hu, Zhenjiang;Zhao, Haiyan;Song, Hui;Takeichi, Masato;Mei, Hong",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85079900618",
      "Primary study DOI": "10.1145/3377024.3377047",
      "Title": "Causes of merge conflicts: a case study of ElasticSearch",
      "Abstract": "© 2020 Association for Computing Machinery.Software branching and merging allows collaborative development and creating software variants, commonly referred to as clone & own. While simple and cheap, a trade-off is the need to merge code and to resolve merge conflicts, which frequently occur in practice. When resolving conflicts, a key challenge for developer is to understand the changes that led to the conflict. While merge conflicts and their characteristics are reasonably well understood, that is not the case for the actual changes that cause them. We present a case study of the changes-on the code and on the project-level (e.g., feature addition, refactoring, feature improvement)-that lead to conflicts. We analyzed the development history of ElasticSearch, a large open-source project that heavily relies on branching (forking) and merging. We inspected 40 merge conflicts in detail, sampled from 534 conflicts not resolvable by a semi-structured merge tool. On a code (structural) level, we classified the semantics of changes made. On a project-level, we categorized the decisions that motivated these changes. We contribute a categorization of code- and project-level changes and a detailed dataset of 40 conflict resolutions with a description of both levels of changes. Similar to prior studies, most of our conflicts are also small; while our categorization of code-level changes surprisingly differs from that of prior work. Refactoring, feature additions and feature enhancements are the most common causes of merge conflicts, most of which could potentially be avoided with better development tooling.",
      "Keywords": "Case study | Conflict resolution | Software merging",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2020-02-05",
      "Publication type": "Conference Paper",
      "Authors": "Mahmood, Wardah;Chagama, Moses;Berger, Thorsten;Hebig, Regina",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79959878645",
      "Primary study DOI": "10.1145/1985793.1985927",
      "Title": "Positive effects of utilizing relationships between inconsistencies for more effective inconsistency resolution (NIER track)",
      "Abstract": "State-of-the-art modeling tools can help detect inconsistencies in software models. Some can even generate fixing actions for these inconsistencies. However such approaches handle inconsistencies individually, assuming that each single inconsistency is a manifestation of an individual defect. We believe that inconsistencies are merely expressions of defects. That is, inconsistencies highlight situations under which defects are observable. However, a single defect in a software model may result in many inconsistencies and a single inconsistency may be the result of multiple defects. Inconsistencies may thus be related to other inconsistencies and we believe that during fixing, one should consider clusters of such related inconsistencies. This paper provides first evidence and emerging results that several inconsistencies can be linked to a single defect and show that with such knowledge only a subset of fixes need to be considered during inconsistency resolution. © 2011 ACM.",
      "Keywords": "clustering | inconsistencies | user guidance",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2011-07-07",
      "Publication type": "Conference Paper",
      "Authors": "Nöhrer, Alexander;Reder, Alexander;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84885235979",
      "Primary study DOI": "10.1145/2523599.2523608",
      "Title": "Towards migration-aware filtering in model differences application",
      "Abstract": "The management of consistency among modelling artefacts is of crucial importance in model-driven engineering. Especially in distributed development, refinements of both metamodels and models are usually performed in a concurrent and misaligned manner, thus breaking consistency among model versions. Inconsistency situations become harmful when propagating changes from a local workspace to the shared repository or vice versa. The changes propagation can be achieved through model differences detection and application, exploiting filtering mechanisms when migration is not permitted. Nevertheless, loss of information due to metamodel evolutions may occur when filtering differences between models conforming to different versions of the modelling language. In this work we propose to minimise this loss of information by enhancing the filtering mechanism to take into account metamodel evolution information. Copyright 2012 ACM.",
      "Keywords": "Model coevolution | Model differencing | Model versioning",
      "Publication venue": "Proceedings of the 6th International Workshop on Models and Evolution, ME 2012",
      "Publication date": "2012-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Ciccozzi, Federico;Cicchetti, Antonio",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84857551120",
      "Primary study DOI": "10.1145/2110147.2110158",
      "Title": "Towards fixing inconsistencies in models with variability",
      "Abstract": "Recent years have witnessed a convergence between research in SPL and Model-Driven Engineering (MDE) that leverages the complementary capabilities that both paradigms can offer. A crucial factor for the success of MDE is the availability of effective support for detecting and fixing inconsistencies among model elements. The importance of such support is attested by the extensive literature devoted to the topic. However, when coupled with variability, the research focus has been devoted to inconsistency detection, while leaving the important issue of fixing the inconsistency largely unaddressed. In this research-in-progress paper, we explore one of the issues that variability raises for inconsistency fixing. Namely, in which features to locate the fixes. We compute what is the minimal number of fixes and use it as a baseline to compare fixes obtained with a heuristic based on feature model analysis and random approaches. Our work highlights the pros and cons of both approaches and suggests how they could be addressed. Copyright 2012 ACM.",
      "Keywords": "Consistency checking | Feature oriented software development | Safe composition | Variability",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2012-03-05",
      "Publication type": "Conference Paper",
      "Authors": "Lopez-Herrejon, Roberto E.;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84857590734",
      "Primary study DOI": "10.1145/2110147.2110157",
      "Title": "Managing SAT inconsistencies with HUMUS",
      "Abstract": "In Product Line Engineering, as in any other modeling domain, designers and end users are prone to making inconsistent assumptions (errors) because of complexity and lack of system knowledge. We previously envisioned a way of allowing inconsistencies during product configuration and in this paper we present a solution on how to realize this vision. We introduce HUMUS (High-level Union of Minimal Unsatisfiable Sets), which enables correct reasoning in product line engineering (encoded in SAT) despite the presence of errors. We focus mainly on tolerating inconsistencies during product configuration, to make it possible to resolve inconsistencies later without misguiding the human user along the way. We also provide a discussion of other applications in product line engineering and beyond. The main advantage of using HUMUS is, that it is possible to isolate erroneous parts of a product line model such that existing automations continue to be useful. The applications of HUMUS are thus likely beyond product line engineering. Copyright 2012 ACM.",
      "Keywords": "Formal reasoning | Product line engineering | User guidance",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2012-03-05",
      "Publication type": "Conference Paper",
      "Authors": "Nöhrer, Alexander;Biere, Armin;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85056901001",
      "Primary study DOI": "10.1145/3270112.3275339",
      "Title": "Tolerant consistency management in model-driven engineering",
      "Abstract": "© 2018 Association for Computing Machinery.Model-driven engineering (MDE) enables domain experts to specify, validate and maintain software systems without requiring advanced programming skills. An important challenge when treating models as primary artifacts in the software development process is maintaining consistency between them. Consistency management subsumes tasks such as consistency checking, model transformation and update propagation. However, strict consistency is almost impossible to achieve in practical applications and is often not even a desirable goal. For instance, small updates in a source model can lead to substantial changes in the respective target model, making automated steps incomprehensible for the user and therefore decreasing the trustworthiness of the software system. Ongoing research explores how to deal with inconsistency while still guaranteeing formal properties. However, conceptual and practical work on systems that tolerate inconsistencies to a certain extent is rather sparse. To the best of our knowledge, there is no MDE tool which supports all consistency management tasks mentioned before in a tolerant manner. This short paper provides a roadmap for possible approaches to address the problem of handling inconsistencies with help of bidirectional transformation (bx) tools. The bx tool eMoflon will be taken as a concrete example to demonstrate the theoretical concepts. It uses Triple Graph Grammars (TGGs) as an underlying formalism to express the consistency relation between source and target models.",
      "Keywords": "Bidirectional transformation | Consistency | Eclipse plug-in development | Model-driven engineering | Tolerance",
      "Publication venue": "21st ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings, MODELS-Companion 2018",
      "Publication date": "2018-10-14",
      "Publication type": "Conference Paper",
      "Authors": "Weidmann, Nils",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-74949117936",
      "Primary study DOI": "10.1145/1656485.1656494",
      "Title": "Supporting inconsistency resolution through predictive change impact analysis",
      "Abstract": "Today, model-driven software processes rely on consistency management approaches to deal with the multitude of inconsistencies that occur in large systems. To resolve a detected inconsistency, the software designer applies one resolution out of a set of resolution options to each inconsistency. To do so, the designer needs to understand the extent of changes posed by each resolution. In this paper we propose change impact analysis to support the designer in this task. We present a simple algorithm for predicting the impact of inconsistency resolutions by checking the instantiation of different meta-model relationships. Based on one small case study, we demonstrate that our algorithm provides a reasonable estimate for the number of changes that actually will be applied. We demonstrate the usage of impact analysis for inconsistency resolution and make a first step towards a decision support tool to help a software designer resolve inconsistencies. Copyright © 2009 ACM.",
      "Keywords": "",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Keller, Anne;Schippers, Hans;Demeyer, Serge",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85044399284",
      "Primary study DOI": "10.1145/3168365.3168377",
      "Title": "Variants and Versions Management for Models with Integrated Consistency Preservation",
      "Abstract": "© 2018 Association for Computing Machinery.Modern software systems are often developed and maintained by describing them in several modeling and programming languages. To reduce complexity and improve understandability of such systems, models represent specific views on the system. These views have semantic interrelations (e.g., by sharing common or dependent information) that need to be kept consistent during evolution of the system. Apart from that, modern systems need to run in many different contexts and be highly configurable to satisfy the demand for fully customizable products. Such variable systems often comprise various dependencies from which inconsistencies may arise. Combining solutions for consistency management with variants and versions management, however, comes with many challenges. In this research-in-progress paper, we introduce the VaVe approach which makes variants and versions management aware of automated consistency preservation in the context of multi-view modeling. We explain core features of the approach and reason about its benefits and limitations.",
      "Keywords": "Delta-based consistency preservation | Software product lines | Variability management",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2018-02-07",
      "Publication type": "Conference Paper",
      "Authors": "Ananieva, Sofia;Klare, Heiko;Burger, Erik;Reussner, Ralf",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78649797908",
      "Primary study DOI": "10.1145/1866272.1866279",
      "Title": "Specifying overlaps of heterogeneous models for global consistency checking",
      "Abstract": "Software development often involves a set of models defined in different metamodels, each model capturing a specific view of the system. We call this set a mutlimodel, and its elements partial or local models. Since partial models overlap, they may be consistent or inconsistent wrt. a set of global constraints. We present a framework for specifying overlaps between partial models and defining their global consistency. An advantage of the framework is that heterogeneous consistency checking is reduced to the homogeneous case yet merging partial metamodels into one global metamodel is not needed. We illustrate the framework with examples and sketch a formal semantics for it based on category theory.",
      "Keywords": "Design | Languages | Theory | Verification",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-12-10",
      "Publication type": "Conference Paper",
      "Authors": "Diskin, Zinovy;Xiong, Yingfei;Czarnecki, Krzysztof",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85081970437",
      "Primary study DOI": "10.1145/3344948.3344980",
      "Title": "Detection of conflicts and inconsistencies between architecture solutions",
      "Abstract": "© 2019 ACM.This paper presents a semi-automated approach for detecting conflicts and inconsistencies between architecture solutions. Inconsistencies occur when two or more architecture solutions rely on each other but cannot be satisfied, and conflicts when there are contradictions within one single decision specification, such as contradictory variable range and value. The proposed approach comprises a set of checks followed by transformations of architecture solutions specified according to a domain-specific-language, also created in the context of this work, into state machines. The semi-automated approach is implemented as a plugin for the MagicDraw modeling tool, and was evaluated in a project from the automotive domain.",
      "Keywords": "",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2019-09-09",
      "Publication type": "Conference Paper",
      "Authors": "Kallweit, Benno;Antonino, Pablo Oliveira;Jahic, Jasmin;Kuhn, Thomas;Liggesmeyer, Peter",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77954702270",
      "Primary study DOI": "10.1145/1810295.1810341",
      "Title": "CoDesign: a highly extensible collaborative software modeling framework",
      "Abstract": "Large, multinational software development organizations face a number of issues in supporting software design and modeling by geographically distributed architects. To address these issues, we present CoDesign, an extensible, collaborative, event-based software modeling framework developed in a distributed, collaborative setting by our two organizations. CoDesign's core capabilities include real-time model synchronization between geographically distributed architects, as well as detection and resolution of a range of modeling conflicts via several off-the-shelf conflict detection engines. © 2010 ACM.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2010-07-23",
      "Publication type": "Conference Paper",
      "Authors": "Bang, Jae Young;Popescu, Daniel;Edwards, George;Medvidovic, Nenad;Kulkarni, Naveen;Rama, Girish M.;Padmanabhuni, Srinivas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84905451678",
      "Primary study DOI": "10.1145/2601248.2601292",
      "Title": "UML consistency rules: a systematic mapping study",
      "Abstract": "Context: The Unified Modeling Language (UML), with its 14 different diagram types, is the de-facto standard modeling language for object-oriented modeling and documentation. Since the various UML diagrams describe different aspects of one, and only one, software under development, they are not independent but strongly depend on each other in many ways. In other words, the UML diagrams describing a software product must be consistent. Inconsistencies between these diagrams may be a source of faults in software systems. It is therefore paramount that these inconsistencies be detected, analyzed and hopefully fixed. Objective: The aim of this article is to deliver a comprehensive summary of UML consistency rules as they are described in the literature to date to obtain an extensive and detailed overview of the current research in this area. Method: We performed a Systematic Mapping Study by following well-known guidelines. We selected 95 primary studies from a search with seven search engines performed in December 2012. Results: Different results are worth mentioning. First it appears that researchers tend to discuss very similar consistency rules, over and over again. Most rules are horizontal (98.10%) and syntactic (88.21%). The most used diagrams are the class diagram (71.58%), the sequence diagram (47.37%) and the state machine diagram (42.11%). Conclusion: The fact that many rules are duplicated in primary studies confirms the need for a well-accepted list of consistency rules. This paper is a first step in this direction. Results indicate that much more work is needed to develop consistency rules for all 14 UML diagrams, in all dimensions of consistency (e.g., semantic and syntactic on the one hand, horizontal, vertical and evolution on the other hand). Copyright 2014 ACM.",
      "Keywords": "Systematic mapping study | UML consistency rules | Unified Modeling Language (UML)",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Torre, Damiano;Labiche, Yvan;Genero, Marcela",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85050549845",
      "Primary study DOI": "10.1145/3167132.3167425",
      "Title": "Heterogeneous design models alignment: from matching to consistency management",
      "Abstract": "© 2018 Authors.Complex systems involve several business expertises that are designed as models in different modeling languages. These partial models are manipulated by different designers, and are thus generally heterogeneous (i.e conform to different metamodels). To create a complete view of the system, we proposed a process to organize partial models as a network of models through a virtual global model. As models evolve, changing elements involved in a correspondence, may cause the inconsistency of the global model. So, we have defined a process that automatically identify changes, classify them and treat their impacts on elements of other partial models in order to maintain the global model consistency.",
      "Keywords": "Consistency | Correspondences | Heterogeneous models | Impacts | Matching | Metamodel | Process",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2018-04-09",
      "Publication type": "Conference Paper",
      "Authors": "Hamlaoui, Mahmoud El;Bennani, Saloua;Nassar, Mahmoud;Ebersold, Sophie;Coulette, Bernard",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79959313464",
      "Primary study DOI": "10.1145/1982185.1982500",
      "Title": "A semantically rich approach for collaborative model edition",
      "Abstract": "We propose a novel approach and tool for collaborative software engineering and development. In model-based software engineering, the underlying data structure is a complex, directed and labeled graph. Collaborative engineering requires that developers be able to copy the graph, make independent changes, compare them, detect conflicts, and merge non-conflicting graphs. To support different collaboration and development styles requires a very flexible toolset. Worldwide, loosely-coupled development teams require the support of large-scale networks of users, possibly disconnected, in a decentralised fashion. No matter how the graph replicas evolve, they must eventually converge. We describe and evaluate C-Praxis, a tool that satisfies these requirements. © 2011 ACM.",
      "Keywords": "asynchrony | collaboration | consistency | replication",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2011-06-23",
      "Publication type": "Conference Paper",
      "Authors": "Michaux, Jonathan;Blanc, Xavier;Shapiro, Marc;Sutra, Pierre",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84985990081",
      "Primary study DOI": "10.1145/2684200.2684302",
      "Title": "A New Approach for Meaningful XML Schema Merging",
      "Abstract": "Copyright 2014 ACM.XML Schema standards often undergo several revisions to fit application requirements and business demands. In order to be successful, the development process of such standards must be collaborative allowing multiple users to work on the same schema. In this editing environment, the ability to merge branched versions of the schema is significant in certain situations. Using conventional three-way XML merging tools is not suitable for the purpose of merging XML Schema because the tree model of XML Schema is different from that of XML document. This paper deals with an essential activity enabling automatic XML Schema merging and conflict resolution based on the model of XML Schemas. We present rules for XSD merging and conflict handling, and describe how this can be achieved by combining three-way and operational-transformation approaches. Developing a prototype of our approach, we test it against a set of XSDs. Experimental results (compared to other three-way merge tools, including, 3DM and DeltaXML) show that our approach produces merged versions of high quality and reports more meaningful conflicts with respect to schema changes.",
      "Keywords": "Automatic XML schema merging | Conflict resolution | Schema merging | XML schema",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2014-12-04",
      "Publication type": "Conference Paper",
      "Authors": "Baqasah, Abdullah;Pardede, Eric;Rahayu, Wenny",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77954724460",
      "Primary study DOI": "10.1145/1810295.1810364",
      "Title": "EMFStore: a model repository for EMF models",
      "Abstract": "Models need to be put under version control to facilitate collaboration and to control change. EMFStore is a Software Configuration Management system tailored to the specific requirements for versioning models. It employs operation-based change tracking, conflict detection and merging. © 2010 ACM.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2010-07-23",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Helming, Jonas",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-80052681513",
      "Primary study DOI": "10.1145/2019136.2019163",
      "Title": "An analysis of change operations to achieve consistency in model-driven software product lines",
      "Abstract": "Model-Driven Software Product Line (MD-SPL) is the combination of Model-Driven Software Development and Software Product Line. In this paradigm, there are complex dependency relationships between different software development artefacts. These artefacts have to be changed during development and maintenance activities. However, the quantity of elements involved and the complex dependencies may imply that not all artefacts are updated appropriately, making these artefacts inconsistent with each other and with variability rules. This article discusses the change impact on interrelated MD-SPL artefacts and what has to be done do keep consistency. Copyright © 2011 ACM.",
      "Keywords": "Consistency | Model-driven software product line",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2011-09-16",
      "Publication type": "Conference Paper",
      "Authors": "Corrêa, Chessman K.F.;Oliveira, Toacy C.;Werner, Claudia M.L.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84891307205",
      "Primary study DOI": "10.1109/MiSE.2013.6595293",
      "Title": "Enhancing version control with domain-specific semantics",
      "Abstract": "As Domain-Specific Modeling Languages (DSML) become more widespread, it is now possible for non-computer scientists to design complex systems. Not only do DSMLs make modeling more accessible to domain experts, they also improve their efficiency. Using such models, the problem of their maintenance and evolution arises, with common software engineering issues, such as reversibility and traceability of developments. In this article we present the integration of a collaborative edition process into a model-driven engineering (MDE) simulation platform defining its own DSML, which includes a serialization procedure. Our novel approach defines a collaborative work and version control process. This process uses the concrete textual syntax defined by this DSML, which allows us to use the features of existing Version Control Systems (VCS) to work with serialized models, and helps calculate the differences between two versions of a model, merge versions of these models, and detect merge conflicts. © 2013 IEEE.",
      "Keywords": "",
      "Publication venue": "ICSE Workshop on Software Engineering for Adaptive and Self-Managing Systems",
      "Publication date": "2013-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Foucault, Matthieu;Barbier, Sebastien;Lugato, David",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85065672908",
      "Primary study DOI": "10.1145/3297280.3297454",
      "Title": "Live and global consistency checking in a collaborative engineering environment",
      "Abstract": "© 2019 Association for Computing Machinery.During software and systems engineering, engineers have to rely on different engineering tools in order to capture different kinds of artifacts, such as requirement specifications, design models or code. Even though the artifacts that engineers capture with these tools are interdependent, the tools have limited abilities to detect inconsistencies among them. Today no approach exists that is able to provide live inconsistency feedback of engineering artifacts - captured and maintained in different engineering tools - without disrupting the engineers' workflow. The work presented in this paper introduces a novel approach for live, multi-tool, consistency checking where engineers continue to use their respective tools and receive inconsistency feedback across their tools' artifacts in a live manner. The approach uses a cloud-based engineering platform to replicate the tool's artifacts and to detect inconsistencies there. Within the cloud, engineers may link these artifacts and define cross-tool consistency rules. The approach was validated through an empirical study and two industrial case studies to demonstrate usefulness, correctness and scalability.",
      "Keywords": "",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2019-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Tröls, Michael Alexander;Mashkoor, Atif;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85033451293",
      "Primary study DOI": "10.1145/3127404.3127462",
      "Title": "Research on Consistency Maintenance of Flowchart Design",
      "Abstract": "© 2017 Association for Computing Machinery.Flowchart1 brings the advantage of efficiency into the program design. Designers can achieve clearer structure refer to flowchart. It's a powerful method in the process of program design. However, the traditional flowchart is only designed on single site. It leads to the low efficiency and less diversity. Based on these problems, this paper aims at using collaborative algorithm to complete the distributed flowchart design. The paper mainly solves the problems of the operation conflicts which come from different sites, and analyzes the typical consistency maintenance algorithm, constructs the flowchart model, analyzes the flowchart operations, devises the conflict resolution strategy and describes the consistency maintenance work flow. At last, a correctness proof is also given to validate the whole strategy.",
      "Keywords": "ALGORITHM design | Consistency maintenance | Flowchart design | Real-time collaboration",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2017-09-22",
      "Publication type": "Conference Paper",
      "Authors": "Zhu, Sizheng;Wang, Shanshan;Wang, Dan;Gao, Liping",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78650078191",
      "Primary study DOI": "10.1145/1869542.1869594",
      "Title": "Guiding modelers through conflict resolution: a recommender for model versioning",
      "Abstract": "Like traditional code, software models are usually developed in teams requiring collaboration support in terms of version control systems (VCS). One use case of such a system is integrating concurrently evolved versions of one model into one consistent version. When the modifications are contradicting, then the VCS reports the conflict, but the cumbersome resolution process is left to the user. We present a rec-ommender system which suggests automatically executable conflict resolution patterns.",
      "Keywords": "Design | Languages",
      "Publication venue": "Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion, SPLASH '10",
      "Publication date": "2010-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Seidl, Martina;Wieland, Konrad",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-72249109894",
      "Primary study DOI": "10.1145/1639950.1639991",
      "Title": "By-example adaptation of the generic model versioning system AMOR: how to include language-specific features for improving the check-in process",
      "Abstract": "We present configuration mechanisms based on by-example approaches for the adaptable model versioning system AMOR improving the complete versioning workflow. The Operation Recorder allows the specification of composite operations. Those operation definitions are used by the Conflict Manager supporting the specification of potential merge conflicts and suitable resolution strategies.",
      "Keywords": "By-example configuration | Model versioning",
      "Publication venue": "Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA",
      "Publication date": "2009-12-24",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Seidl, Martina;Wieland, Konrad;Wimmer, Manuel;Langer, Philip",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-80053218147",
      "Primary study DOI": "10.1145/2025113.2025139",
      "Title": "Proactive detection of collaboration conflicts",
      "Abstract": "Collaborative development can be hampered when conflicts arise because developers have inconsistent copies of a shared project. We present an approach to help developers identify and resolve conflicts early, before those conflicts become severe and before relevant changes fade away in the developers'memories. This paper presents three results. First, a study of open-source systems establishes that conflicts are frequent, persistent, and appear not only as overlapping textual edits but also as subsequent build and test failures. The study spans nine open-source systems totaling 3.4 million lines of code; our conflict data is derived from 550,000 development versions of the systems. Second, using previously-unexploited information, we precisely diagnose important classes of conflicts using the novel technique of speculative analysis over version control operations. Third, we describe the design of Crystal, a publicly-available tool that uses speculative analysis to make concrete advice unobtrusively available to developers, helping them identify, manage, and prevent conflicts. © 2011 ACM.",
      "Keywords": "Collaboration conflicts | Collaborative development | Crystal | Developer awareness | Speculative analysis | Version control",
      "Publication venue": "SIGSOFT/FSE 2011 - Proceedings of the 19th ACM SIGSOFT Symposium on Foundations of Software Engineering",
      "Publication date": "2011-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Brun, Yuriy;Holmes, Reid;Ernst, Michael D.;Notkin, David",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85072941929",
      "Primary study DOI": "10.1109/BotSE.2019.00016",
      "Title": "A chatbot for conflict detection and resolution",
      "Abstract": "© 2019 IEEE.We present Sayme, a chatbot that we are developing to address the detection and resolution of potential code conflicts that may arise in parallel software development. Sayme is designed to operate both proactively, informing developers when they engage in activities that create conflicting changes, and reactively, responding to user inquiries regarding the state of different developers' work and how it may overlap. We introduce our motivation for developing Sayme, present its design and features, and offer an outlook at our future work.",
      "Keywords": "Awareness | Chatbots | Code conflicts | Collaborative development | Configuration management",
      "Publication venue": "Proceedings - 2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering, BotSE 2019",
      "Publication date": "2019-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Paikari, Elahe;Choi, Jaeeun;Kim, Seonkyu;Baek, Sooyoung;Kim, Myeongsoo;Lee, Seungeon;Han, Chaeyeon;Kim, Youngjae;Ahn, Kahye;Cheong, Chan;Van Der Hoek, Andre",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-72949112212",
      "Primary study DOI": "10.1145/1529282.1529563",
      "Title": "Applying semantic web technology to feature modeling",
      "Abstract": "Feature models are models used to capture differences and commonalities between software features, enabling the representation of variability within software. There are many variations of feature models and different notations are often used to represent the same information. Currently support for validating or integrating feature models is missing. In this paper, we provide an ontology framework for feature modeling which consists of an ontology that formally provides a specification for feature models. In addition, we provide means to integrate segmented feature models and provide a rule based model consistency check and conflict detection. We use SWRL rules to implement the rules and a DL reasoner to evaluate the rules and infer extra interesting information regarding the variability of the software. Copyright 2009 ACM.",
      "Keywords": "Feature models | Ontologies | OWL | Software variability | SWRL",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Zaid, Lamia Abo;Kleinermann, Frederic;De Troyer, Olga",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85078892774",
      "Primary study DOI": "10.1109/ASE.2019.00097",
      "Title": "The Impact of Structure on Software Merging: Semistructured versus Structured Merge",
      "Abstract": "© 2019 IEEE.Merge conflicts often occur when developers concurrently change the same code artifacts. While state of practice unstructured merge tools (e.g Git merge) try to automatically resolve merge conflicts based on textual similarity, semistructured and structured merge tools try to go further by exploiting the syntactic structure and semantics of the artifacts involved. Although there is evidence that semistructured merge has significant advantages over unstructured merge, and that structured merge reports significantly fewer conflicts than unstructured merge, it is unknown how semistructured merge compares with structured merge. To help developers decide which kind of tool to use, we compare semistructured and structured merge in an empirical study by reproducing more than 40,000 merge scenarios from more than 500 projects. In particular, we assess how often the two merge strategies report different results, we identify conflicts incorrectly reported by one but not by the other (false positives), and conflicts correctly reported by one but missed by the other (false negatives). Our results show that semistructured and structured merge differ in 24% of the scenarios with conflicts. Semistructured merge reports more false positives, whereas structured merge has more false negatives. Finally, we found that adapting a semistructured merge tool to resolve a particular kind of conflict makes semistructured and structured merge even closer.",
      "Keywords": "Code integration | Collaborative development | Software merging | Version control systems",
      "Publication venue": "Proceedings - 2019 34th IEEE/ACM International Conference on Automated Software Engineering, ASE 2019",
      "Publication date": "2019-11-01",
      "Publication type": "Conference Paper",
      "Authors": "Cavalcanti, Guilherme;Borba, Paulo;Seibt, Georg;Apel, Sven",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84963606481",
      "Primary study DOI": "10.1145/2818048.2819950",
      "Title": "Effectiveness of Conflict Management Strategies in Peer Review Process of Online Collaboration Projects",
      "Abstract": "© 2016 ACM.In online collaboration projects, conflicts often arise in the peer review process, due to the disagreement over whether one's contribution should be accepted. These conflicts generally have detrimental effects on contributors' continuing participation in the community. Few studies have investigated how to manage these conflicts effectively. This paper aims to examine the effectiveness of three strategies - rational explanation, constructive suggestion, and social encouragement - in managing conflicts. In an analysis of 170 online software development projects, we investigated how different conflict management strategies aimed at handling contributors' arguments during the peer review process influenced their subsequent participation in the projects. The results show that (i) conflicts significantly increase contributors' likelihood of leaving the communities; (ii) neither rational explanations nor social encouragement could reduce the negative consequences of conflicts; (iii) only constructive suggestions have a positive effect in retaining the contributors.",
      "Keywords": "Conflict management | Online collaboration | Peer review | Survival analysis",
      "Publication venue": "Proceedings of the ACM Conference on Computer Supported Cooperative Work, CSCW",
      "Publication date": "2016-02-27",
      "Publication type": "Conference Paper",
      "Authors": "Huang, Wenjian;Lu, Tun;Zhu, Haiyi;Li, Guo;Gu, Ning",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84958687024",
      "Primary study DOI": "10.1145/2723147.2723150",
      "Title": "Understanding Changes in n-way Merge: Use-cases and User Interface Demonstrations",
      "Abstract": "Copyright © 2014 ACM.Several components are required to make a useful n-way merge system for documents. These include an engine to align the information in the documents and possible auto-mated or rule based processing of the result. Another impor-tant aspect of the system is the user interface. Users need to be able to both understand the changes (which could in-clude simple non-conicting change) and also deal with any conicts. This paper discusses some prototype user-interfaces that have been developed in conjunction with an n-way merge product1. The intention is to support the merging of XML based technical documentation formats such as DocBook[7], DITA[8] and JATS/NLM[3]. Users of merge systems could include software engineers who understand XML and its concepts of wellformedness and validity. However, these users are probably the excep-tion to the norm and the majority of people involved in technical documentation may not understand XML. Exist-ing merge interfaces do not suit these users and there is a need to create new interfaces that suit both n-way al-gorithms and also different user expectations and capabili-ties [6]. Prior to discussing the user interfaces it is necessary to un-derstand the users and their backgrounds. They may have a different level of skill and user-interface expectation than users of merge systems designed for programming language code or data more generally. It is also useful to understand the existing user-interfaces used to describe change for two way comparison of documents and merge interfaces in gen-eral.",
      "Keywords": "",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2014-09-16",
      "Publication type": "Conference Paper",
      "Authors": "Whitaker, Nigel",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85026783524",
      "Primary study DOI": "10.1109/ICSE-C.2017.103",
      "Title": "Should we replace our merge tools?",
      "Abstract": "© 2017 IEEE.While unstructured merge tools try to automatically resolve merge conflicts via textual similarity, semistructured merge tools try to go further by partially exploiting the syntactic structure and semantics of the involved artefacts. Previous studies compare these merge approaches with respect to the number of reported conflicts, showing, for most projects and merge situations, a reduction in favor of semistructured merge. However, these studies do not investigate whether this reduction actually leads to integration effort reduction (Productivity) without negative impact on the correctness of the merging process (Quality). To analyze this, and to better understand how these tools could be improved, we propose empirical studies to identify spurious conflicts reported by one approach but not by the other, and interference reported as conflict by one approach but missed by the other.",
      "Keywords": "Collaborative development | Empirical studies | Software merging | Version control systems",
      "Publication venue": "Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017",
      "Publication date": "2017-06-30",
      "Publication type": "Conference Paper",
      "Authors": "Cavalcanti, Guilherme;Borba, Paulo;Accioly, Paola",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85030786965",
      "Primary study DOI": "10.1145/3106237.3122829",
      "Title": "The MONDO collaboration framework: secure collaborative modeling over existing version control systems",
      "Abstract": "© 2017 Association for Computing Machinery.Model-based systems engineering of critical cyber-physical systems necessitates effective collaboration between different stakeholders while still providing secure protection of intellectual properties of all involved parties. While engineering artifacts are frequently stored in version control repositories, secure access control is limited to file-level strategies in most existing frameworks where models are split into multiple fragments with all-or-nothing permissions, which becomes a scalability and usability bottleneck in case of complex industrial models. In this paper, we introduce the MONDO Collaboration Framework, which provides rule-based fine-grained model-level secure access control, property-based locking and automated model merge integrated over existing version control systems such as Subversion (SVN) for storage and version control. Our framework simultaneously supports offline collaboration (asynchronous checkoutmodify- commit) on top of off-the-shelf modeling tools and online scenarios (GoogleDocs-style short transactions) scenarios by offering a web-based modeling frontend. Screencast Demo: https://youtu.be/Ix3CgmsYIU0",
      "Keywords": "Automated model merge | Collaborative modeling | Locking | Rule-based access control | Version control systems",
      "Publication venue": "Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering",
      "Publication date": "2017-08-21",
      "Publication type": "Conference Paper",
      "Authors": "Debreceni, Csaba;Bergmann, Gábor;Búr, Márton;Ráth, István;Varró, Dániel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85085956673",
      "Primary study DOI": "10.1145/3380625.3380643",
      "Title": "A Model-driven Collaborative Modeling Method for Software",
      "Abstract": "© 2020 ACM.In this paper, a model-driven software collaborative modeling method is proposed, and a software collaborative modeling framework on model assembly and model updating is established. The composability of models, the integrity of model assembly and the consistency of model updating are studied from two aspects: model assembly mechanism and model updating mechanism. The collaborative modeling protocol is defined, and six collaborative relationship stereotypes are introduced to add collaborative semantics to the model based on the extensible mechanism of UML. The algorithm of model assembly and integrity checking is proposed and the collaborative modeling of multiple clients is implemented. The algorithm of model updating and consistency checking is proposed to solve the problem of model updating in collaborative modeling.",
      "Keywords": "Collaborative modeling | Consistency | Integrity | Model-driven | UML",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2020-01-17",
      "Publication type": "Conference Paper",
      "Authors": "Sun, Zhihong;Ye, Tong;Kong, Xiangying;Zhuang, Yi",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78650102029",
      "Primary study DOI": "10.1145/1869542.1869547",
      "Title": "Collaborative model merging",
      "Abstract": "Models are important artifacts in the software development life-cycle and are often the result of a collaborative activity of multiple developers. When multiple developers modify the same model, conflicts can occur and need to be resolved by merging. Existing approaches for model merging require developers to solve all conflicts before committing. The later a developer commits the higher the probability for even more conflicts. This forces the developers to solve every conflict as soon as possible and without consulting the other developer. However, we claim that developers often need to discuss their choice of conflict resolution with another developer in case of a complex conflict, since a conflict also expresses differences in opinion about the model. In this paper we propose to allow developers to postpone a decision of a modeling conflict. We present an approach to make conflicts part of the model and represent them as first-level entities based on issue modeling from the field of Rationale Management. This facilitates the possibility for collaborative conflict resolution and merging. Furthermore, it allows for a complete batch merge instead of interactive merging, where all conflicts are added to the model and then resolved later. To substantiate our claim that developers favor to discuss complex conflicts we conducted a case study. © 2010 ACM.",
      "Keywords": "Collaboration | Issue | Merging | Model | Operation-based | Rationale management",
      "Publication venue": "Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion, SPLASH '10",
      "Publication date": "2010-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Koegel, Maximilian;Naughton, Helmut;Helming, Jonas;Herrmannsdoerfer, Markus",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84976540916",
      "Primary study DOI": "10.1145/2881631.2881633",
      "Title": "Collaborative Modeling Empowered By Modeling Deltas",
      "Abstract": "© 2015 ACM.Evolution and maintenance of the large-scaled software models require collaboration of several designers on the shared modeling artefacts. Since collaborators manipulate shared models in real-time, synchronization of the model changes is the main challenging aspect for collaborative modeling application. In order to achieve efficient real-time synchronization of changes, these changes have to be properly identified, represented by appropriate notations and exchanged by modeling deltas. This paper presents a real-time collaborative modeling application based on exchanging model differences between collaborators. Modeling deltas are represented by an operational delta notation. The approach is validated by presenting a collaborative class diagram editor.",
      "Keywords": "Model changes | Modeling deltas | Real-time collaborative modeling",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2015-09-08",
      "Publication type": "Conference Paper",
      "Authors": "Kuryazov, Dilshodbek;Winter, Andreas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79957637858",
      "Primary study DOI": "10.1007/978-3-642-21210-9_18",
      "Title": "Conflicts as first-class entities: a UML profile for model versioning",
      "Abstract": "The urgent demand for optimistic version control support for software models induced active research within the modeling community. Recently, several approaches have been proposed addressing the task of detecting conflicts when merging two concurrently changed versions of a model. In this context, the holistic representation and supportive visualization of detected merge conflicts pose a challenge. In this paper, we present a modeling language independent conflict model comprising all necessary information to profoundly represent merge conflicts. From this conflict model, we leverage the dynamic extension power of UML profiles by introducing a dedicated conflict profile to visually assist modelers in resolving merge conflicts of UML models. As a result, modelers may resolve conflicts in the concrete graphical syntax conducting their familiar UML editors without tool extensions. © 2011 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "conflict visualization | model versioning | UML profile",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2011-06-02",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Kargl, Horst;Langer, Philip;Seidl, Martina;Wieland, Konrad;Wimmer, Manuel;Kappel, Gerti",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85012191651",
      "Primary study DOI": "10.1016/b978-012722442-8/50081-1",
      "Title": "Merging models based on given correspondences",
      "Abstract": "A model is a formal description of a complex application artifact, such as a database schema, an application interface, a UML model, an ontology, or a message format. The problem of merging such models lies at the core of many meta data applications, such as view integration, mediated schema creation for data integration, and ontology merging. This paper examines the problem of merging two models given correspondences between them. It presents requirements for conducting a merge and a specific algorithm that subsumes previous work.",
      "Keywords": "",
      "Publication venue": "Proceedings - 29th International Conference on Very Large Data Bases, VLDB 2003",
      "Publication date": "2003-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Pottinger, Rachel A.;Bernstein, Philip A.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-50149095716",
      "Primary study DOI": "",
      "Title": "Conflict management in PDEVS: an experience in modelling and simulation of time petri nets",
      "Abstract": "PDEVS (Parallel DEVS) is a well-known formalism for the specification of complex concurrent systems organized as an interconnection of atomic and coupled interacting components. The abstract simulator of a PDEVS model is normally founded on the assumption of maximal parallelism: multiple components are allowed to undertake at the same time an independent state transition. This paper argues that the hypothesis of maximal parallelism does not allow PDEVS to adequately model and simulate systems where simultaneous state transitions are conflicting to one another. As an example, an original PDEVS model of Merlin and Farber Time Petri Nets is proposed. The realization owes to ActorDEVS, a lean and efficient PDEVS M&S framework in Java, which enables the simulation control structure to be customized. The accomplished experience suggests that some points in theformal definition of PDEVS should possibly be adapted in order to widen the applicability of the language.",
      "Keywords": "Conflict management | Java | Modelling and simulation | PDEVS | Time Petri nets",
      "Publication venue": "Summer Computer Simulation Conference 2007, SCSC'07, Part of the 2007 Summer Simulation Multiconference, SummerSim'07",
      "Publication date": "2007-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Cicirelli, Franco;Furfaro, Angelo;Nigro, Libero",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84919714267",
      "Primary study DOI": "",
      "Title": "Conflict resolution for on-the-fly change propagation in business processes",
      "Abstract": "© 2014, Australian Computer Society, Inc.Process models are widely used in organisations and can easily become large and complex. In the context of business process management, views are a useful technique to reduce complexity by providing only those process fragments that are relevant for a particular stakeholder. A key challenge in view management is the handling of changes that are performed concurrently by different stakeholders. Since the views may refer to the same process, the performed changes may affect the same region of a business process and cause a conflict. Many approaches have been proposed for resolving conflicts in a post-analysis phase after all changes have been applied. They can be become costly when dealing with multiple changes that lead to multiple conflicts which cannot be resolved automatically and require an additional negotiation phase between stakeholders. In this paper we propose a framework for the on-the-fly conflict resolution of changes that have been performed on views their underlying reference process. Different to existing approaches this framework applies behaviour consistency rules for business processes which consider the execution semantics and can be checked efficiently on the structure of processes without generating all possible execution traces or keeping track of change operations.",
      "Keywords": "",
      "Publication venue": "Conferences in Research and Practice in Information Technology Series",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Mafazi, Shamila;Mayer, Wolfgang;Stumptner, Markus",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-11244267573",
      "Primary study DOI": "10.1145/1012807.1012866",
      "Title": "Managing conflict in multi-model adaptive hypertext",
      "Abstract": "Adaptive hypermedia has the goal of contextualizing the display of a hypertext to suit the user and their situation. A variety of aspects of the context can influence the appropriate adaptation. For knowledge engineering and privacy reasons, systems are moving towards having multiple independent models influencing adaptation. But these multiple models may disagree, resulting in a need for systems to manage the resulting conflicts. This paper presents an approach that combines conflict avoidance, conflict detection, and conflict resolution. This approach is presented within the context of multi-model adaptive spatial hypertext.",
      "Keywords": "Adaptive | Dynamic | Multiple models | Spatial Hypertext",
      "Publication venue": "Proceedings of the ACM Conference on Hypertext",
      "Publication date": "2004-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Francisco-Revilla, Luis;Shipman, Frank M.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78349294609",
      "Primary study DOI": "10.1007/978-3-642-16145-2_27",
      "Title": "Consistent modeling using multiple UML profiles",
      "Abstract": "The design of complex technical system invariably involves multiple domain-specific languages to cover the many different facets of such systems. However, unless the languages are designed to be used in combination, this typically leads to conflicting specifications that are difficult to reconcile due to the ontological and other differences between the languages used. In this paper, we describe a pragmatic but systematic approach to resolving this problem for the special but common case in which the domain-specific languages are all defined as UML profiles. © 2010 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-11-22",
      "Publication type": "Conference Paper",
      "Authors": "Noyrit, Florian;Gérard, Sébastien;Terrier, François;Selic, Bran",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84880777218",
      "Primary study DOI": "10.1145/2461912.2461942",
      "Title": "MeshGit: diffing and merging meshes for polygonal modeling",
      "Abstract": "This paper presents MeshGit, a practical algorithm for diffing and merging polygonal meshes typically used in subdivision modeling workflows. Inspired by version control for text editing, we introduce the mesh edit distance as a measure of the dissimilarity between meshes. This distance is defined as the minimum cost of matching the vertices and faces of one mesh to those of another. We propose an iterative greedy algorithm to approximate the mesh edit distance, which scales well with model complexity, providing a practical solution to our problem. We translate the mesh correspondence into a set of mesh editing operations that transforms the first mesh into the second. The editing operations can be displayed directly to provide a meaningful visual difference between meshes. For merging, we compute the difference between two versions and their common ancestor, as sets of editing operations. We robustly detect conflicting operations, automatically apply non-conflicting edits, and allow the user to choose how to merge the conflicting edits. We evaluate MeshGit by diffing and merging a variety of meshes and find it to work well for all. Copyright © ACM 2013.",
      "Keywords": "Diff and merge | Geometry | Polygonal modeling | Visualization",
      "Publication venue": "ACM Transactions on Graphics",
      "Publication date": "2013-07-01",
      "Publication type": "Article",
      "Authors": "Denning, Jonathan D.;Pellacini, Fabio",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-35248845499",
      "Primary study DOI": "10.1145/1244002.1244227",
      "Title": "Weaving models in conflict detection specifications",
      "Abstract": "Increasingly, model driven development is being accepted as the new vision for designing software. In fact, shifting the focus from a code-centric standpoint to a model-centric one enables a better specification and understanding of domain specific concerns. Since a software system undergoes to several refinement steps during its life cycle, last years have witnessed a growing demand for model versioning support. In this respect, the operation of merging different modifications and the related conflict management are of crucial relevance. Usually, diverging modifications are detected by assuming a predefined set of situations; however, not always it is possible to predict all the problems since they cannot be detected only syntactically. Hence, in this position paper it is proposed to leverage conflict detection and resolution by adopting design-oriented descriptions endowed with custom conflict specifications. Copyright 2007 ACM.",
      "Keywords": "Conflict detection | Conflict specification | Model driven development | Model weaving",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2007-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Cicchetti, Antonio;Rossini, Alessandro",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33751059514",
      "Primary study DOI": "10.1145/1141277.1141703",
      "Title": "A UML model consistency verification approach based on meta-modeling formalization",
      "Abstract": "UML language provides a promising way to overcome software system complexity. In particular, UML is a unified language that handles different aspects of software modeling. However, its features are not independent which is the source of numerous inconsistencies. Present consistency checking techniques are limited either to certain UML features or to certain kinds of inconsistencies. Our study aims at developing a unified checker which is able to handle all inconsistencies on all UML features. This paper develops the translation from UML models to CLP (Constraint Logic Programming) clauses taking advantage of meta-modeling techniques. CLP is also used to express consistency rules. Then CLP solver can automatically detect inconsistencies. Copyright 2006 ACM.",
      "Keywords": "Consistency rules | Constraint logic programming | Meta-modeling | UML verification",
      "Publication venue": "Proceedings of the ACM Symposium on Applied Computing",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Malgouyres, H.;Motet, G.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78650104229",
      "Primary study DOI": "10.1145/1869542.1869549",
      "Title": "A recommender for conflict resolution support in optimistic model versioning",
      "Abstract": "The usage of optimistic version control systems comes along with cumbersome and time-consuming conflict resolution in the case that the modifications of two developers are contradicting. For code as well as for any other artifact the resolution support moves hardly beyond the choices \"keep mine\", \"keep theirs\", \"take all changes\", or \"abandon all changes\". To ease the conflict resolution in the context of model versioning, we propose a recommender system which suggests automatically executable resolution patterns to the developer responsible for the conflict resolution. The lookup algorithm is based on a similarity-aware graph matching approach incorporating information from the metamodel of the used modeling language. This allows not only the retrieval of recommendations exactly matching the given conflict situation, but also the identification of similar conflict situations whose resolution patterns are adaptable to the current conflict. © 2010 ACM.",
      "Keywords": "Design | Languages",
      "Publication venue": "Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion, SPLASH '10",
      "Publication date": "2010-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Seidl, Martina;Kappel, Gerti",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85080320821",
      "Primary study DOI": "10.1145/3276536",
      "Title": "Conflict resolution for structured merge via version space algebra",
      "Abstract": "© 2018 Copyright held by the owner/author(s).Resolving conflicts is the main challenge for software merging. The existing merge tools usually rely on the developer to manually resolve conflicts. This is of course inefficient. We propose an interactive approach for resolving merge conflicts. To the best of our knowledge, this is the first attempt for conflict resolution of structured merge. To represent the possibly very large set of candidate programs, we propose an expressive and efficient representation by version space algebra. We also design a simple mechanism for ranking resolutions in the program space, such that the top-ranked resolution is very likely to meet the developer's expectation. We prototype our approach as a merge tool AutoMerge, and evaluate it on 244 real-world conflicts arising from 10 open-source projects. Results show great practicality of our approach.",
      "Keywords": "Conflict resolution | Revision control systems | Software merge | Version space algebra",
      "Publication venue": "Proceedings of the ACM on Programming Languages",
      "Publication date": "2018-11-01",
      "Publication type": "Article",
      "Authors": "Zhu, Fengmin;He, Fei",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84858216370",
      "Primary study DOI": "10.1145/2145204.2145413",
      "Title": "Creative conflict resolution in realtime collaborative editing systems",
      "Abstract": "Conflict is common in collaboration, and may have both negative and positive effects on collaborative work. Past research has focused on controlling negative aspects of conflict by preventing, eliminating or isolating conflicts, but done little on exploring positive aspects of conflict. In this paper, we contribute a novel creative conflict resolution (CCR) approach to address these issues in real-time collaborative editing systems. In addition to maintaining consistency, the CCR approach is able to create new results from conflicts, generate alternative solutions based on collective effects of conflict operations, and support users to choose suitable conflict solutions and conflict resolution policies according to their needs. The CCR approach provides not only a new way of resolving conflicts in real-time collaborative editing systems, but also a framework for supporting a range of existing conflict resolution strategies. Techniques and user interface issues related to the CCR approach and a prototype implementation are discussed in this paper. © 2012 ACM.",
      "Keywords": "conflict resolution | operational transformation | real-time collaborative editing",
      "Publication venue": "Proceedings of the ACM Conference on Computer Supported Cooperative Work, CSCW",
      "Publication date": "2012-03-19",
      "Publication type": "Conference Paper",
      "Authors": "Sun, David;Sun, Chengzheng;Xia, Steven;Shen, Haifeng",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84887290343",
      "Primary study DOI": "10.1145/2507065.2507067",
      "Title": "Simplifying the Development of Cross-Platform Web User Interfaces by Collaborative Model-based Design",
      "Abstract": "Ensuring responsive design of web applications requires their user interfaces to be able to adapt according to different contexts of use, which subsume the end users, the devices and platforms used to carry out the interactive tasks, and also the environment in which they occur. To address the challenges posed by responsive design, aiming to simplify their development by factoring out the common parts from the specific ones, this paper presents Quill, a web-based development environment that enables various stakeholders of a web application to collaboratively adopt a model-based design of the user interface for cross-platform deployment. The paper establishes a series of requirements for collaborative model-based design of cross-platform web user interfaces motivated by the literature, observational and situational design. It then elaborates on potential solutions that satisfy these requirements and explains the solution selected for Quill. A user survey has been conducted to determine how stakeholders appreciate model-based design user interface and how they estimate the importance of the requirements that lead to Quill. © 2013 ACM.",
      "Keywords": "collaborative development | cross-platform design | model-based design of user interfaces | user interface description language",
      "Publication venue": "SIGDOC 2013 - Proceedings of the 31st ACM International Conference on Design of Communication",
      "Publication date": "2013-11-14",
      "Publication type": "Conference Paper",
      "Authors": "Genaro Motti, Vivian;Raggett, Dave;Van Cauwelaert, Sascha;Vanderdonckt, Jean",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85096987263",
      "Primary study DOI": "10.1145/3419804.3421447",
      "Title": "A Formalism for Specifying Model Merging Conflicts",
      "Abstract": "© 2020 Association for Computing Machinery.Verifying the consistency of model merging is an important step towards the support for team collaboration in software modeling and evolution. Since merging conflicts are inevitable, this has triggered intensive research on conflict management in different domains. Despite these efforts, techniques for high-level conflict representation have hardly been investigated yet. In this paper, we propose an approach to specify model merging conflicts. This approach includes the Conflict Pattern Language (CPL), a formalism for specifying conflicts in different modeling languages. CPL is based on the OCL grammar and is tooled by an editor and a parser. CPL facilitates the slow and error-prone task of specifying model merging conflicts and can be used to specify conflicts in any EMF-based model. We evaluated our approach with a case study, including five different conflict cases. The results are promising about how CPL can be used for specifying syntactic and semantic conflicts.",
      "Keywords": "Collaborative Modeling | Conflict Representation | Conflict Specification Formalism | Model Driven Engineering | Model Merging Conflict",
      "Publication venue": "Proceedings of the 12th System Analysis and Modelling Conference, SAM 2020",
      "Publication date": "2020-10-19",
      "Publication type": "Conference Paper",
      "Authors": "Sharbaf, Mohammadreza;Zamani, Bahman;Sunyé, Gerson",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85096812677",
      "Primary study DOI": "10.1145/3417990.3419490",
      "Title": "Enhancing collaborative modeling",
      "Abstract": "© 2020 ACM.Various studies conducted in the context of model-driven engineering (MDE) identified insufficient collaboration support of modeling tools. In the course of this paper, we present a research agenda to improve collaborative graphical modeling with a focus on users and change history. In contrast to other approaches, user level edit operations should be persisted instead of calculating differences of model versions a posteriori. We expect a detailed series of edit operations to be more self-descriptive than the differences between two versions of a model, which likely represents only the result of multiple edit operations. The expected advantages based on the more detailed history include a more understandable change history of an evolving model and new possibilities in collaboration, such as micro cherry picking of a set of specific edit operations instead of a whole commit. In addition, branching of only sub elements of a model as a way to explore alternatives during concurrent modeling is target of our research. Compared to existing approaches which mostly support either synchronous or asynchronous collaboration, the proposed research aims to support both through the use of Event Sourcing.",
      "Keywords": "Collaboration | Graphical modeling | Model-driven engineering",
      "Publication venue": "Proceedings - 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS-C 2020 - Companion Proceedings",
      "Publication date": "2020-10-16",
      "Publication type": "Conference Paper",
      "Authors": "Pietron, Jakob",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33750347355",
      "Primary study DOI": "10.1145/1134285.1134339",
      "Title": "Instant Consistency Checking for the UML",
      "Abstract": "Inconsistencies in design models should be detected immediately to save the engineer from unnecessary rework. Yet, tools are not capable of keeping up with the engineers' rate of model changes. This paper presents an approach for quickly, correctly, and automatically deciding what consistency rules to evaluate when a model changes. The approach does not require consistency rules with special annotations. Instead, it treats consistency rules as black-box entities and observes their behavior during their evaluation to identify what model elements they access. The UML/Analyzer tool, integrated with IBM Rational Rose™, fully implements this approach. It was used to evaluate 29 models with tens-of-thousands of model elements, evaluated on 24 types of consistency rules over 140,000 times. We found that the approach provided design feedback correctly and required, in average, less than 9ms evaluation time per model change with a worst case of less than 2 seconds at the expense of a linearly increasing memory need. This is a significant improvement over the state-of-the-art. Copyright 2006 ACM.",
      "Keywords": "Consistency | Design feedback | Incremental analysis",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85048887082",
      "Primary study DOI": "10.1145/3180155.3180258",
      "Title": "Multi-granular conflict and dependency analysis in software engineering based on graph transformation",
      "Abstract": "© 2018 ACM.Conflict and dependency analysis (CDA) of graph transformation has been shown to be a versatile foundation for understanding interactions in many software engineering domains, including software analysis and design, model-driven engineering, and testing. In this paper, we propose a novel static CDA technique that is multi-granular in the sense that it can detect all conflicts and dependencies on multiple granularity levels. Specifically, we provide an efficient algorithm suite for computing binary, coarse-grained, and fine-grained conflicts and dependencies: Binary granularity indicates the presence or absence of conflicts and dependencies, coarse granularity focuses on root causes for conflicts and dependencies, and fine granularity shows each conflict and dependency in full detail. Doing so, we can address specific performance and usability requirements that we identified in a literature survey of CDA usage scenarios. In an experimental evaluation, our algorithm suite computes conflicts and dependencies rapidly. Finally, we present a user study, in which the participants found our coarse-grained results more understandable than the fine-grained ones reported in a state-of-the-art tool. Our overall contribution is twofold: (i) we significantly speed up the computation of fine-grained and binary CDA results and, (ii) complement them with coarse-grained ones, which offer usability benefits for numerous use cases.",
      "Keywords": "",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2018-05-27",
      "Publication type": "Conference Paper",
      "Authors": "Lambers, Leen;Strüber, Daniel;Taentzer, Gabriele;Born, Kristopher;Huebert, Jevgenij",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84883688183",
      "Primary study DOI": "10.1145/505151.505152",
      "Title": "Consistency maintenance in real-time collaborative graphics editing systems",
      "Abstract": "Real-time collaborative graphics editing systems allow a group of users to view and edit the same graphics document at the same time from geographically dispersed sites connected by communication networks. Consistency maintenance in the face of concurrent accesses to shared objects is one of the core issues in the design of these types of systems. In this article, we propose an object-level multiversioning approach to consistency maintenance in real-time collaborative graphic editors. This approach is novel in achieving intention preservation and convergence, in preserving the work concurrently produced by multiple users in the face of conflict, and in minimizing the number of object versions for conflict resolution. Major technical contributions of this work include a formal specification of a unique combined effect for an arbitrary group of conflict and compatible operations, a distributed algorithm for incremental creation of multiple object versions, a consistent object identification scheme for multiple object versions, and a convergent layering scheme for overlapping objects. All algorithms and schemes presented in this article have been implemented in an Internet-based GRACE (graphics collaborative editing) system. © 2002, ACM. All rights reserved.",
      "Keywords": "Algorithms | Collaborative graphics editors | computer-supported cooperative work | consistence maintenance | convergence | Design | GRACE | groupware | Human Factors | intention preservation | multiversioning",
      "Publication venue": "ACM Transactions on Computer-Human Interaction",
      "Publication date": "2002-03-01",
      "Publication type": "Article",
      "Authors": "Sun, Chengzheng;Chen, David",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85038098661",
      "Primary study DOI": "10.1016/j.amepre.2017.07.003",
      "Title": "Collaborative Modeling: Experience of the U.S. Preventive Services Task Force",
      "Abstract": "© 2017 American Journal of Preventive MedicineModels can be valuable tools to address uncertainty, trade-offs, and preferences when trying to understand the effects of interventions. Availability of results from two or more independently developed models that examine the same question (comparative modeling) allows systematic exploration of differences between models and the effect of these differences on model findings. Guideline groups sometimes commission comparative modeling to support their recommendation process. In this commissioned collaborative modeling, modelers work with the people who are developing a recommendation or policy not only to define the questions to be addressed but ideally, work side-by-side with each other and with systematic reviewers to standardize selected inputs and incorporate selected common assumptions. This paper describes the use of commissioned collaborative modeling by the U.S. Preventive Services Task Force (USPSTF), highlighting the general challenges and opportunities encountered and specific challenges for some topics. It delineates other approaches to use modeling to support evidence-based recommendations and the many strengths of collaborative modeling compared with other approaches. Unlike systematic reviews prepared for the USPSTF, the commissioned collaborative modeling reports used by the USPSTF in making recommendations about screening have not been required to follow a common format, sometimes making it challenging to understand key model features. This paper presents a checklist developed to critically appraise commissioned collaborative modeling reports about cancer screening topics prepared for the USPSTF.",
      "Keywords": "",
      "Publication venue": "American Journal of Preventive Medicine",
      "Publication date": "2018-01-01",
      "Publication type": "Article",
      "Authors": "Petitti, Diana B.;Lin, Jennifer S.;Owens, Douglas K.;Croswell, Jennifer M.;Feuer, Eric J.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84925011404",
      "Primary study DOI": "10.1016/j.jss.2014.11.043",
      "Title": "MOMM: Multi-objective model merging",
      "Abstract": "© 2014 Elsevier Inc. All rights reserved.Nowadays, software systems are complex and large. To cope with this situation, teams of developers have to cooperate and work in parallel on software models. Thus, techniques to support the collaborative development of models are a must. To this end, several approaches exist to identify the change operations applied in parallel, to detect conflicts among them, as well as to construct a merged model by incorporating all non-conflicting operations. Conflicts often denote situations where the application of one operation disables the applicability of another one. Consequently, one operation has to be omitted to construct a valid merged model in such scenarios. When having to decide which operation to omit, the importance of its application has to be taken into account depending on the operation type and the application context. However, existing works treat the operations to merge with equal importance. We introduce in this paper, for the first time, a multi-objective formulation of the problem of model merging, based on NSGA-II, that aims to find the best trade-off between minimizing the number of omitted operations and maximizing the number of successfully applied important operations. We evaluated our approach using seven open source systems and compared it with different existing model merging approaches. The merging solutions obtained with our approach were found in all of the scenarios of our experiments to be comparable in terms of minimizing the number of conflicts to those suggested by existing approaches and to carry a high importance score of merged operations. Our results also revealed an interesting feature concerning the trade-off between the two conflicting objectives that demonstrates the practical value of taking the importance of operations into account in model merging tasks. In fact, the shape of the Pareto front represents an interesting guidance for developers to select best solutions based on their preferences.",
      "Keywords": "Merging | Multi-objective optimization | Search-based software engineering",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2015-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Mansoor, Usman;Kessentini, Marouane;Langer, Philip;Wimmer, Manuel;Bechikh, Slim;Deb, Kalyanmoy",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84947870192",
      "Primary study DOI": "10.1016/j.scico.2015.07.004",
      "Title": "Collaborative editing of EMF/Ecore meta-models and models: Conflict detection, reconciliation, and merging in DiCoMEF",
      "Abstract": "© 2015 Elsevier B.V. All rights reserved.Despite the fact that Domain Specific Modeling tools are becoming very powerful and more frequently used, the support for their cooperation has not reached its full strength, and demand for model management is growing. In cooperative work, the decision agents are semi-autonomous and therefore a solution for reconciliating DSM after a concurrent evolution is needed. Conflict detection and reconciliation are important steps for merging of concurrently evolved (meta)models in order to ensure collaboration. In this work, we present a conflict detection, reconciliation and merging framework for concurrently evolved meta-models and models. Additionally, we formally specify the EMF Ecore meta-model into set constructs that help to analyze the (meta)model and operations performed on it.",
      "Keywords": "Collaborative modeling | Conflict detection | DSML | EMF | Merging",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2015-12-01",
      "Publication type": "Article",
      "Authors": "Koshima, Amanuel Alemayehu;Englebert, Vincent",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84936976513",
      "Primary study DOI": "10.1016/j.jss.2015.06.044",
      "Title": "Consistent merging of model versions",
      "Abstract": "© 2015 Elsevier Inc. All rights reserved.While many engineering tasks can, and should be, manageable independently, it does place a great burden on explicit collaboration needs - including the need for frequent and incremental merging of artifacts that software engineers manipulate using these tools. State-of-the-art merging techniques are often limited to textual artifacts (e.g., source code) and they are unable to discover and resolve complex merging issues beyond simple conflicts. This work focuses on the merging of models where we consider not only conflicts but also arbitrary syntactic and semantic consistency issues. Consistent artifacts are merged fully automatically and only inconsistent/conflicting artifacts are brought to the users' attention, together with a systematic proposal of how to resolve them. Our approach is neutral with regard to who made the changes and hence reduces the bias caused by any individual engineer's limited point of view. Our approach also applies to arbitrary design or models, provided that they follow a well-defined metamodel with explicit constraints - the norm nowadays. The extensive empirical evaluation suggests that our approach scales to practical settings.",
      "Keywords": "Inconsistency management | Model merging | Model versioning",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2016-02-01",
      "Publication type": "Conference Paper",
      "Authors": "Dam, Hoa Khanh;Egyed, Alexander;Winikoff, Michael;Reder, Alexander;Lopez-Herrejon, Roberto E.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85063760990",
      "Primary study DOI": "10.1016/j.jss.2019.03.060",
      "Title": "Managing inter-model inconsistencies in model-based systems engineering: Application in automated production systems engineering",
      "Abstract": "© 2019 Elsevier Inc.To cope with the challenge of managing the complexity of automated production systems, model-based approaches are applied increasingly. However, due to the multitude of different disciplines involved in automated production systems engineering, e.g., mechanical, electrical, and software engineering, several modeling languages are used within a project to describe the system from different perspectives. To ensure that the resulting system models are not contradictory, the necessity to continuously diagnose and handle inconsistencies within and in between models arises. This article proposes a comprehensive approach that allows stakeholders to specify, diagnose, and handle inconsistencies in model-based systems engineering. In particular, to explicitly capture the dependencies and consistency rules that must hold between the disparate engineering models, a dedicated graphical modeling language is proposed. By means of this language, stakeholders can specify, diagnose, and handle inconsistencies in the accompanying inconsistency management framework. The approach is implemented based on the Eclipse Modeling Framework (EMF) and evaluated based on a demonstrator project as well as a small user experiment. First findings indicate that the approach is expressive enough to capture typical dependencies and consistency rules in the automated production system domain and that it requires less effort compared to manually developing inter-model inconsistency management solutions.",
      "Keywords": "Automated production systems | Inconsistency management | Model-based systems engineering",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2019-07-01",
      "Publication type": "Article",
      "Authors": "Feldmann, S.;Kernschmidt, K.;Wimmer, M.;Vogel-Heuser, B.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-60949108997",
      "Primary study DOI": "10.1016/j.knosys.2008.12.001",
      "Title": "Clayworks: Toward user-oriented software for collaborative modeling and simulation",
      "Abstract": "We consider the development of software systems that integrate collaborative real-time modeling and distributed computing. Our main goal is user-orientation: we need a collaborative workspace for geographically dispersed users with a seamless access of every user to high-performance servers. This paper presents a particular prototype, Clayworks, that allows modeling of virtual clay objects and running computation-intensive deformation simulations for objects crashing into each other. In order to integrate heterogeneous computational resources, we adopt modern Grid middleware and provide the users with an intuitive graphical interface. Simulations are parallelized using a higher-order component (HOC) which abstracts over the web service resource framework (WSRF) used to interconnect our worksuite to the computation server. Clayworks is a representative of a large class of demanding systems which combine collaborative, user-oriented modeling with performance-critical computations, e.g., crash-tests or simulations of biological population evolution. © 2008 Elsevier B.V. All rights reserved.",
      "Keywords": "Collaborative environments | High-performance simulation | Real-time modeling | User-oriented software development",
      "Publication venue": "Knowledge-Based Systems",
      "Publication date": "2009-04-01",
      "Publication type": "Article",
      "Authors": "Gorlatch, Sergei;Müller-Iden, Jens;Alt, Martin;Dünnweber, Jan;Fujita, Hamido;Funyu, Yutaka",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85073508123",
      "Primary study DOI": "10.1016/j.scico.2019.102323",
      "Title": "Correct composition in the presence of behavioural conflicts and dephasing",
      "Abstract": "© 2019 Elsevier B.V.Scenarios of execution are commonly used to specify partial behaviour and interactions between different objects and components in a system. To avoid overall inconsistency in specifications, various automated methods have emerged in the literature to compose scenario-based models. In recent work, we have shown how the theorem prover Isabelle/HOL can be combined with an SMT solver to detect inconsistencies between sequence diagrams and, only in their absence, generate the behavioural composition. In this paper, we exploit this combination further and present an efficient approach that generates all valid composed traces giving us an equivalent representation of the conflict-free valid composed model. In addition, we show a novel way to prove the correctness of the computed results, and compare this method with the implementation and verification done within Isabelle alone. To reduce the complexity of our technique, we consider priority constraints and a notion of dephased models, i.e., models which start execution at different times. This work has been inspired by a problem from a medical domain where different clinical guidelines for chronic conditions may be applied to the same patient at different points in time. We illustrate the approach with a realistic example from this domain.",
      "Keywords": "Formal methods | Model composition | Optimisation | SMT solver | Theorem prover",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2019-11-01",
      "Publication type": "Article",
      "Authors": "Küster Filipe Bowles, Juliana;Caminati, Marco B.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-63049108292",
      "Primary study DOI": "10.1016/j.jss.2008.10.012",
      "Title": "A belief-theoretic framework for the collaborative development and integration of para-consistent conceptual models",
      "Abstract": "Merging and integrating different conceptual models which have been collaboratively developed by domain experts and analysts with dissimilar perspectives on the same issue has been the subject of tremendous amount of research. In this paper, we focus on the fact that human analysts' opinions possess a degree of uncertainty which can be exploited while integrating such information. We propose an underlying modeling construct which is the basis for transforming conceptual models into a manipulatable format. Based on this construct, methods for formally negotiating over and merging of conceptual models are proposed. The approach presented in this paper focuses on the formalization of uncertainty and expert reliability through the employment of belief theory. The proposed work has been evaluated for its effectiveness and usability. The evaluators (a group of Computer Science graduate students) believed that the proposed framework has the capability to fulfil its intended tasks. The obtained results from the performance perspective are also promising. © 2008 Elsevier Inc. All rights reserved.",
      "Keywords": "Belief theory | Collaborative modeling | Conceptualization | Inconsistency management | Viewpoint integration",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2009-04-01",
      "Publication type": "Article",
      "Authors": "Bagheri, Ebrahim;Ghorbani, Ali A.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-35649003769",
      "Primary study DOI": "10.1016/j.jvlc.2007.08.005",
      "Title": "Enhancing collaborative synchronous UML modelling with fine-grained versioning of software artefacts",
      "Abstract": "Software development teams are composed of people with different knowledge and skills, who contribute to a project from often widely dispersed locations. Software development in geographically distributed environments creates software engineering challenges due to the interaction among members of distributed teams and the management of consistency and concurrency among project artefacts. In this paper, we propose Synchronous collaborative modelling Tool Enhanced with VErsioning management (STEVE) a collaborative tool supporting distributed Unified Modelling Language (UML) modelling of software systems. The tool provides a communication infrastructure enabling the concurrent editing of the same UML diagram at the same time by distributed developers. Complex UML diagrams are decomposed and managed in a fine-grained hierarchy of sub-artefacts, thus providing change and configuration management functionalities for both the diagram and the graphical objects. Thus, software predefined diagram components can be consistently reused and shared across different diagrams of a given project. © 2007 Elsevier Ltd. All rights reserved.",
      "Keywords": "Collaborative synchronous visual modelling | Computer Supported Cooperative Work | Distributed Software Development | Fine-grained artefact management",
      "Publication venue": "Journal of Visual Languages and Computing",
      "Publication date": "2007-10-01",
      "Publication type": "Article",
      "Authors": "De Lucia, A.;Fasano, F.;Scanniello, G.;Tortora, G.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85069175455",
      "Primary study DOI": "10.1016/j.jlamp.2018.11.004",
      "Title": "Granularity of conflicts and dependencies in graph transformation systems: A two-dimensional approach",
      "Abstract": "© 2018 Elsevier Inc.Conflict and dependency analysis (CDA) is a static analysis for the detection of conflicting and dependent rule applications in a graph transformation system. The state-of-the-art CDA technique, critical pair analysis, provides all potential conflicts and dependencies in minimal context as critical pairs, for each pair of rules. Yet, critical pairs can be hard to understand; users are mainly interested in core information about conflicts and dependencies occurring in various combinations. In this paper, we present an approach to conflicts and dependencies in graph transformation systems based on two dimensions of granularity. The first dimension refers to the overlap considered between the rules of a given rule pair; the second one refers to the represented amount of context information about transformations in which the conflicts occur. We introduce a variety of new conflict notions, in particular, conflict atoms, conflict reasons, and minimal conflict reasons, relate them to the existing conflict notions of critical pairs and initial conflicts, and position all of these notions within our granularity approach. Finally, we introduce dual concepts for dependency analysis. As we discuss in a running example, our approach paves the way for an improved CDA technique.",
      "Keywords": "Critical pair analysis (CPA) | Graph transformation (double pushout approach) | Parallel independence",
      "Publication venue": "Journal of Logical and Algebraic Methods in Programming",
      "Publication date": "2019-02-01",
      "Publication type": "Article",
      "Authors": "Lambers, Leen;Born, Kristopher;Kosiol, Jens;Strüber, Daniel;Taentzer, Gabriele",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70349305099",
      "Primary study DOI": "10.1016/j.sysarc.2009.07.003",
      "Title": "Maintaining constraints of UML models in distributed collaborative environments",
      "Abstract": "Constraint maintenance plays an important role in keeping the integrity and validity of UML models in embedded software design. While constraint maintenance capabilities are reasonably adequate in existing UML modeling applications, little work has been done to address the distributed constraint maintenance issue in multi-user collaborative modeling environments. The nature of the issue is to maintain constraint consistently across distributed sites in a collaborative modeling environment in the face of concurrency. In this paper, we propose a novel solution to this issue, which can retain the effects of all concurrent modeling operations even though they may cause constraint violations. We further contribute a distributed constraint maintenance framework in which the solution is encapsulated as a generic engine that can be mounted in a variety of single-user UML modeling applications to support collaborative UML modeling and distributed constraint maintenance in embedded software design processes. This framework has been implemented in a prototype distributed collaborative UML modeling application CoRSA. © 2009 Elsevier B.V. All rights reserved.",
      "Keywords": "Collaborative UML modeling | Constraint maintenance | Constraint violation | Embedded software design | Model consistency",
      "Publication venue": "Journal of Systems Architecture",
      "Publication date": "2009-07-01",
      "Publication type": "Article",
      "Authors": "Shen, Haifeng",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77953160740",
      "Primary study DOI": "10.1016/j.jss.2010.02.018",
      "Title": "Structuring the modeling space and supporting evolution in software product line engineering",
      "Abstract": "The scale and complexity of product lines means that it is practically infeasible to develop a single model of the entire system, regardless of the languages or notations used. The dynamic nature of real-world systems means that product line models need to evolve continuously to meet new customer requirements and to reflect changes of product line artifacts. To address these challenges, product line engineers need to apply different strategies for structuring the modeling space to ease the creation and maintenance of models. This paper presents an approach that aims at reducing the maintenance effort by organizing product lines as a set of interrelated model fragments defining the variability of particular parts of the system. We provide support to semi-automatically merge fragments into complete product line models. We also provide support to automatically detect inconsistencies between product line artifacts and the models representing these artifacts after changes. Furthermore, our approach supports the co-evolution of models and their respective meta-models. We discuss strategies for structuring the modeling space and show the usefulness of our approach using real-world examples from our ongoing industry collaboration. © 2010 Elsevier Inc. All rights reserved.",
      "Keywords": "Model evolution | Product line engineering | Variability modeling",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2010-07-01",
      "Publication type": "Article",
      "Authors": "Dhungana, Deepak;Grünbacher, Paul;Rabiser, Rick;Neumayer, Thomas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85048937214",
      "Primary study DOI": "10.1016/j.rcim.2018.05.002",
      "Title": "A problem design and constraint modelling approach for collaborative assembly line planning",
      "Abstract": "© 2018 Elsevier LtdAssembly line planning is the interface between agents of different professions, competencies, skills and experiences. Each agent is characterized by specific objectives and constraints, that must be considered when different products and processes are merged across multiple levels of various decision making units. A systemic platform for the dependencies of goals, constraining relationships of elements to be assigned and the interdependencies to properties of the elements is designed. Hereby, the objectives and the constraints are evaluated and mapped within the assembly line planning (ALP) process, resulting in a comprehensive graph with the processes, structures, resources and their properties with its dependencies. The dependencies include time criteria but also technical, processual, ergonomic, qualitative, part-dependent along with resource-dependent, structural constraints. The dependency map is integrated within an existing ALP process to achieve a temporal precedence on the incoming and outgoing information resulting in a dynamic process oriented presentation of the objectives and constraints. The elements of the dependency map are categorized and analysed based on the evaluations and a problem model is created for the presented ALP problem. The problem model is solved using a genetic algorithm which is parameterized in accordance to the problem model complexity and characteristic.",
      "Keywords": "Assembly line design | Assembly line planning | Collaboration | Collaborative planning | Collaborative problem modelling",
      "Publication venue": "Robotics and Computer-Integrated Manufacturing",
      "Publication date": "2019-02-01",
      "Publication type": "Article",
      "Authors": "Neumann, Daniel;Keidel, Jan",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84947869083",
      "Primary study DOI": "10.1016/j.scico.2015.02.008",
      "Title": "A graph-based algorithm for three-way merging of ordered collections in EMF models",
      "Abstract": "© 2015 Elsevier B.V. All rights reserved.In EMF models, ordered collections appear as the values of multi-valued structural features. Traditional, text-based version control systems do not sufficiently support three-way merging of ordered collections inside EMF models since they cannot guarantee a consistent result. The operation three-way merging is defined as follows: based on a common base version b, two alternative versions a1 and a2 were developed by copying and modifying the base version. To reconcile these changes, a merged version m is to be created as a common successor of a1 and a2. In this paper, we present a graph algorithm to solve the problem of three-way merging of ordered collections in EMF models. Each version of a collection can be represented by means of a linearly ordered graph. To create the merged version, these graphs are combined to a merged collection graph using set formula. To create the merged collection, a generalized topological sort is performed on the merged collection graph. Conflicts occur in case the order of elements cannot be deduced automatically; these conflicts are resolved either interactively or by default rules. We have implemented the merge algorithm in our tool BTMerge, which performs a consistency-preserving three-way merge of versions of EMF models being instances of arbitrary Ecore models. Our implementation relies on an alternative form of representing multiple versions of a collection, namely a versioned collection graph which forms a superimposition of collection versions. The algorithm presented here is purely state-based. Matching and merging of collections are clearly separated sub-problems. Insertions and deletions performed on the elements of the collection are propagated into the merged version in a consistent way. Our algorithm makes only minimal assumptions with regard to the underlying product model and thus may be applied to ordered collections inside plain text or XML files. By taking arbitrary move operations into account, the algorithm considerably goes beyond the functionality of contemporary merge tools which cannot adequately handle move operations.",
      "Keywords": "EMF models | Graph algorithm | Model-driven software engineering | Three-way merging | Version control",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2015-12-01",
      "Publication type": "Article",
      "Authors": "Schwägerl, Felix;Uhrig, Sabrina;Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33845381485",
      "Primary study DOI": "10.1016/j.entcs.2006.06.013",
      "Title": "Formal Model Merging Applied to Class Diagram Integration",
      "Abstract": "The integration of software artifacts is present in many scenarios of the Software Engineering field: object-oriented modeling, relational databases, XML schemas, ontologies, aspect-oriented programming, etc. In Model Management, software artifacts are viewed as models that can be manipulated by means of generic operators, which are specified independently of the context in which they are used. One of these operators is Merge, which enables the automated integration of models. Solutions for merging models that are achieved by applying this operator are more abstract and reusable than the ad-hoc solutions that are pervasive in many contexts of the Software Engineering field. In this paper, we present our automated approach for generic model merging from a practical standpoint, providing support for conflict resolution and traceability between software artifacts by using the QVT Relations language. We focus on the definition of our operator Merge, applying it to Class Diagrams integration. © 2006 Elsevier B.V. All rights reserved.",
      "Keywords": "conflict resolution | Model Management | model merging | Model-Driven Engineering | QVT Relations",
      "Publication venue": "Electronic Notes in Theoretical Computer Science",
      "Publication date": "2007-01-03",
      "Publication type": "Article",
      "Authors": "Boronat, Artur;Carsí, José Á;Ramos, Isidro;Letelier, Patricio",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85043605737",
      "Primary study DOI": "10.1016/j.is.2017.07.008",
      "Title": "Near real-time collaborative modeling for view-based Web information systems engineering",
      "Abstract": "© 2017 Elsevier LtdConceptual modeling is a creative, social process driven by the views of stakeholders. In modern, agile development – especially for continuously evolving Web applications – contributions from a wide variety of geographically distributed stakeholders, their involvement in negotiation and impact analysis from different perspectives and the rapid prototype generation from specifications gain much importance. Moreover, people have come to expect easy near real-time system support with few restrictions. While conceptual modeling or CSCW environments exist for each of these individual aspects, their interplay has barely been studied. This paper presents a collaborative conceptual modeling approach called SyncMeta that aims to close this gap by supporting view-based modeling in the Web browser in a near real-time shared editing environment1. In addition to domain-specific graphical modeling languages, viewpoints can be collaboratively defined on the meta-modeling layer and instantiated as views within a model editor instance. Besides this formal structure, we also discuss the choice of algorithms for locking-free shared model editing and of highly scalable team size. In addition to this kind of technical evaluation, the paper also presents several medium-scale user studies that have accompanied the iterative SyncMeta development. These studies investigated both the requirements (quality advantages and user acceptance of the view-based approach, near real-time support) and important design options such as centralized vs. peer-to-peer viewpoint resolution. A fully functional SyncMeta software framework which incorporates most of these results, is available in the GitHub open source repository. We expect this line of work to pave the way for methodologies and tools for socially engineered Web information systems.",
      "Keywords": "Collaborative modeling | Metamodeling | Viewpoints | Views",
      "Publication venue": "Information Systems",
      "Publication date": "2018-05-01",
      "Publication type": "Article",
      "Authors": "Nicolaescu, Petru;Rosenstengel, Mario;Derntl, Michael;Klamma, Ralf;Jarke, Matthias",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85027918653",
      "Primary study DOI": "10.1016/j.aei.2014.07.005",
      "Title": "Synchronous collaborative tunnel design based on consistency-preserving multi-scale models",
      "Abstract": "© 2014 The Authors. Published by Elsevier Ltd.The planning of large infrastructure projects such as inner-city subway tracks is a highly collaborative process in which numerous experts from different domains are involved. While performing the planning task, widely differing scales have to be taken into consideration, ranging from the kilometer scale for the general routing of the track down to the centimeter scale for the detailed design of connection points. Currently there is no technology available which supports both the collaborative as well as the multi-scale aspect in an adequate manner. To fill this technological gap and better support the collaborative design and engineering activities involved with infrastructure planning, this paper introduces a new methodology which allows engineers to simultaneously manipulate a shared multi-scale tunnel model. This methodology comprises two main aspects. The first aspect is a multi-scale model for shield tunnels, which provides five different levels of detail (LoD) representing the different levels of abstraction required throughout the planning progress. The second aspect is a conceived collaboration platform, which enables simultaneous modifications of the multi-scale model by multiple users. In existing multi-scale approaches, where the individual representations are stored independently from each other, there is a high risk of creating inconsistencies, in particular in the highly dynamic collaborative planning context. To overcome this issue, the concept presented in this paper makes use of procedural modeling techniques for creating explicit dependencies between the geometric entities on the different LoDs. This results in a highly flexible, yet inherently consistent multi-scale model where the manipulation of elements on coarser LoDs results in an automated update of all dependent elements on finer LoDs. The proposed multi-scale model forms a well-suited basis for realizing the collaboration concept, which allows several experts to simultaneously manipulate a shared infrastructure model on various scales while using the different design tools they are accustomed to. The paper discusses in detail the principles and advantages of the proposed multi-scale modeling approach as well as its application in the context of collaborative tunnel design. The paper concludes with a case study of a large infrastructure project: a new inner-city subway tunnel in Munich, Germany.",
      "Keywords": "Collaborative design | Infrastructure | Level of detail | Multi-scale modeling | Product modeling | Shield tunnel",
      "Publication venue": "Advanced Engineering Informatics",
      "Publication date": "2014-10-01",
      "Publication type": "Conference Paper",
      "Authors": "Borrmann, André;Flurl, Matthias;Jubierre, Javier Ramos;Mundani, Ralf Peter;Rank, Ernst",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84936070508",
      "Primary study DOI": "10.1016/j.compeleceng.2015.06.021",
      "Title": "Consistency maintenance of compound operations in real-time collaborative environments",
      "Abstract": "© 2015 Elsevier LtdIn real-time collaborative environments, address space transformation strategy can be used to achieve consistency maintenance of shared documents. However, as for the execution of compound operations, they are firstly decomposed into primitive operations, the relationships between the referencing objects and referenced objects are lost during the decomposition process. Besides, the Undo operations in this environment are targeted at compound operations, but not decomposed basic ones. However, the traditional algorithms take primitive operation as the manipulation unit, thus leading to semantic inconsistencies of compound Undo operations. This paper appends two history buffers to maintain the relationships between the original operations and the decomposed ones and introduces “Retrace-Undo-VT-Redo-Retrace” strategy to realize the consistency maintenance of compound operations. Also, this paper introduces the version-decomposition strategy, describes the main algorithms of the compound Undo operations and analyses the validity of the strategy. Case analysis is given to show the effectiveness of the strategy.",
      "Keywords": "Address space transformation | Compound operation | Consistency maintenance | Real-time collaboration | Undo/Redo",
      "Publication venue": "Computers and Electrical Engineering",
      "Publication date": "2016-02-01",
      "Publication type": "Article",
      "Authors": "Gao, Liping;Yu, Fangyu;Gao, Lily;Xiong, Naixue;Yang, Guisong",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84902779618",
      "Primary study DOI": "10.1016/j.procs.2014.05.227",
      "Title": "Online Collaborative Environment for Designing Complex Computational Systems",
      "Abstract": "Developers of information systems have always utilized various visual formalisms during the design process, albeit in an informal manner. Architecture diagrams, finite state machines, and signal flow graphs are just a few examples. Model Integrated Computing (MIC) is an approach that considers these design artifacts as first class models and uses them to generate the system or subsystems automatically. Moreover, the same models can be used to analyze the system and generate test cases and documentation. MIC advocates the formal definition of these formalisms, called domain-specific modeling languages (DSML), via metamodeling and the automatic configuration of modeling tools from the metamodels. However, current MIC infrastructures are based on desktop applications that support a limited number of platforms, discourage concurrent design collaboration and are not scalable. This paper presents WebGME, a cloud- And web-based cyberinfrastructure to support the collaborative modeling, analysis, and synthesis of complex, large-scale scientific and engineering information systems. It facilitates interfacing with existing external tools, such as simulators and analysis tools, it provides custom domain-specific visualization support and enables the creation of automatic code generators. © The Authors. Published by Elsevier B.V.",
      "Keywords": "Automatic code generation | Model-based software | Online collaboration | Web-based design environment",
      "Publication venue": "Procedia Computer Science",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Maróti, Miklós;Kereskényi, Róbert;Kecskés, Tamás;Völgyesi, Péter;Lédeczi, Ákos",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79954425750",
      "Primary study DOI": "10.1016/j.aei.2010.12.001",
      "Title": "An approach to distributed building modeling on the basis of versions and changes",
      "Abstract": "Actors involved in the computer-supported design process work together towards a common goal - the design of a building. Current collaboration approaches often focus on versioned and distributed building models, which describe virtual building states on the basis of the object-oriented method. State changes (for example moving a wall or modifying its material) remain unconsidered and lead to inconsistency problems when exchanging, comparing and merging versioned building models. This paper presents a new modeling approach that combines existing state-oriented descriptions of a virtual building with additional change-oriented information by means of design steps denoted as modeling operations. A new language is defined for the formal description of modeling operations. These operations establish a standardized processing interface for existing building models, can represent design intents, enhance current models with change semantics and add to the consistency of these models. Moreover, this paper presents new concepts for intra-domain collaboration and model management that overcome current limitations when exchanging, comparing and merging versioned building models. The pilot implementation and some project scenarios in industry verify that current design processes can benefit in principle from combined state-oriented and change-oriented building information. © 2010 Elsevier Ltd. All rights reserved.",
      "Keywords": "Building information modeling | Change management | Collaboration | Diff and merge | Object-oriented modeling | Versioning",
      "Publication venue": "Advanced Engineering Informatics",
      "Publication date": "2011-04-01",
      "Publication type": "Article",
      "Authors": "Koch, Christian;Firmenich, Berthold",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84869087395",
      "Primary study DOI": "10.1016/j.arcontrol.2012.09.016",
      "Title": "A meta-modelling framework for knowledge consistency in collaborative design",
      "Abstract": "The design of complex system requires a lot of interactions between experts and then between numerous Computer Aided X software (CAX) (where X can be Design (CAD), Engineering (CAE), Manufacturing (CAM), etc.). In order to improve the consistency of the whole system design and the related data and information, knowledge crossing the expertises must be tracked and formalized regarding a shared reference. That means that instead of defining a large reference models to which each expert refers to, a light collaborative model is defined enabling to connect data from each expert model to adhoc data from other expert models, following the least commitment principle. In this topic, a new meta-model is proposed in a Model-Driven Engineering approach to manage the integration of heterogeneous experts' knowledge models in a collaborative process. The structure of the proposed knowledge meta-model is defined taking into account the complexity of knowledge definition and the properties of its components. This meta-model is split in a meta-model of data on one hand and a Collaboration Meta-Model in the other hand, to represent the distinction between the core concepts of knowledge and additional elements serving to represent the relation between these concepts, and between concepts of heterogeneous experts' models. The proposed meta-model is illustrated on an industrial case study to highlight the way to put it in use, and its interests to enable collaboration between experts throughout the design process. © 2012 Elsevier Ltd. All rights reserved.",
      "Keywords": "",
      "Publication venue": "Annual Reviews in Control",
      "Publication date": "2012-12-01",
      "Publication type": "Article",
      "Authors": "Belkadi, Farouk;Dremont, Nicolas;Notin, Alban;Troussier, Nadege;Messadia, Mourad",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78049303497",
      "Primary study DOI": "10.1016/j.rcim.2010.05.005",
      "Title": "A distributed and interactive system to integrated design and simulation for collaborative product development",
      "Abstract": "The goal of applying collaborative product development in industry has raised the need to develop software tools supporting system integration and group collaboration. Current methods and tools mainly focus on the collaborative creation of design components and assemblies. However, few of them support the collaborative work in developing simulation models so that proposed design concepts and solutions can be evaluated by integrating expertise from several disciplines. The purpose of this research is to develop a distributed and interactive system on which designers and experts can work together to create, integrate and run simulations for engineering design. To develop such a system, a number of issues, e.g. effectiveness and efficiency of modeling work, the re-use of models, interaction and cooperation, accuracy of simulation, collaborative operation on models, etc., need to be addressed. This paper describes an open architecture to developing simulations for engineering design in a distributed and collaborative environment, identifies a set of key issues raised in this architecture, and presents the techniques employed in our solution. © 2010 Elsevier Ltd.",
      "Keywords": "Collaborative product development | Distributed simulation | Engineering design | Integrated design | Web Services",
      "Publication venue": "Robotics and Computer-Integrated Manufacturing",
      "Publication date": "2010-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Wang, Hongwei;Zhang, Heming",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84916918717",
      "Primary study DOI": "10.1016/j.jvlc.2014.11.006",
      "Title": "Consistency of UML class, object and statechart diagrams using ontology reasoners",
      "Abstract": "© 2014 The Authors.We propose an automatic approach to analyze the consistency and satisfiability of Unified Modeling Language UML models containing multiple class, object and statechart diagrams using logic reasoners for the Web Ontology Language OWL 2. We describe how to translate UML models in OWL 2 and we present a tool chain implementing this translation that can be used with any standard compliant UML modeling tool. The proposed approach is limited in scope, but is fully automatic and does not require any expertise about OWL 2 and its reasoners from the designer.",
      "Keywords": "Consistency | Ontology | Reasoning | UML",
      "Publication venue": "Journal of Visual Languages and Computing",
      "Publication date": "2015-02-01",
      "Publication type": "Article",
      "Authors": "Khan, Ali Hanzala;Porres, Ivan",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77957772098",
      "Primary study DOI": "10.1016/j.envsoft.2010.03.007",
      "Title": "Modelling with stakeholders",
      "Abstract": "Stakeholder engagement, collaboration, or participation, shared learning or fact-finding, have become buzz words and hardly any environmental assessment or modelling effort today can be presented without some kind of reference to stakeholders and their involvement in the process. This is clearly a positive development, but in far too many cases stakeholders have merely been paid lip service and their engagement has consequentially been quite nominal. Nevertheless, it is generally agreed that better decisions are implemented with less conflict and more success when they are driven by stakeholders, that is by those who will be bearing their consequences. Participatory modelling, with its various types and clones, has emerged as a powerful tool that can (a) enhance the stakeholders knowledge and understanding of a system and its dynamics under various conditions, as in collaborative learning, and (b) identify and clarify the impacts of solutions to a given problem, usually related to supporting decision making, policy, regulation or management. In this overview paper we first look at the different types of stakeholder modelling, and compare participatory modelling to other frameworks that involve stakeholder participation. Based on that and on the experience of the projects reported in this issue and elsewhere, we draw some lessons and generalisations. We conclude with an outline of some future directions. © 2010 Elsevier Ltd.",
      "Keywords": "Co-learning | Co-management | Collaborative decision making | Companion modelling | Participatory modelling | Shared learning",
      "Publication venue": "Environmental Modelling and Software",
      "Publication date": "2010-11-01",
      "Publication type": "Article",
      "Authors": "Voinov, Alexey;Bousquet, Francois",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-50149117724",
      "Primary study DOI": "10.1016/j.tcs.2008.03.010",
      "Title": "On model checking multiple hybrid views",
      "Abstract": "Many applications, for instance the MS .NET Global Assembly Cache (GAC), are naturally expressed as 3-valued models where an additional third truth value models uncertainty or under-specification. An example of under-specification is that a component in a GAC may or may not have a main method. Models described in this manner can then be analyzed to refute or verify properties about the concrete systems they intend to model. This approach to system validation traditionally considers only one model at a time, even though this model may evolve if subjected to analysis. Many applications, however, benefit from or require the simultaneous consideration of multiple models of systems. We mention here requirements from different stake holders, and data drawn from federated databases. This paper therefore builds the mathematical foundations for property verification and refutation as applied to finitely many 3-valued models, where each model is endowed with states - possibly named by nominals, also known as hybrid constraints - labelled transitions, and atomic propositions. Specifically, we show that deciding whether a finite set of models has a common concrete system (consistency) is typically in PTIME, and that deciding whether a common concrete system satisfies a formula of the hybrid mu-calculus (satisfiability), and its dual (validity), are EXPTIME-complete. We propose sound and efficient approximations of these EXPTIME-complete checks by synthesizing and checking \"summary\" models. These approximations are optimal if all models are deterministic. Finally, we point out that such optimality of summary models is unattainable whenever not all summarized models are deterministic. © 2008 Elsevier B.V. All rights reserved.",
      "Keywords": "Consistency checking | Hybrid logic | Model checking | Satisfiability",
      "Publication venue": "Theoretical Computer Science",
      "Publication date": "2008-09-28",
      "Publication type": "Article",
      "Authors": "Hussain, Altaf;Huth, Michael",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33947703110",
      "Primary study DOI": "10.1016/j.eswa.2006.07.004",
      "Title": "A model for capturing and representing the engineering design process",
      "Abstract": "This paper presents a Collaborative Model for capturing and representing the engineering Design process (CoMoDe). CoMoDe is a deductive object-oriented model that, in relation to an engineering design process, is able to capture the different elements that participate in a design process in an integrated fashion. In particular, it is able to represent (i) the activities, operations, and actors that have generated each design product, (ii) the imposed requirements, and (iii) the rationale behind each decision. Furthermore, it also offers an explicit mechanism to represent and trace the different model versions that have participated in the design process. On such a basis, this proposal introduces specific procedures to handle various situations appearing in cooperative environments. They are: (i) different design teams perform independent concurrent activities on \"a priori\" independent parts of the artefact being designed and afterwards their results need to be made consistent; (ii) distinct teams concurrently work on slightly coupled parts of the artefact being designed and conflict handling must be addressed along their \"parallel\" course of actions. © 2006 Elsevier Ltd. All rights reserved.",
      "Keywords": "Collaborative design | Deductive object base | Design process support | Situation calculus | Version management",
      "Publication venue": "Expert Systems with Applications",
      "Publication date": "2007-11-01",
      "Publication type": "Article",
      "Authors": "Gonnet, Silvio;Henning, Gabriela;Leone, Horacio",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84888015994",
      "Primary study DOI": "10.1016/j.jnca.2013.04.012",
      "Title": "A group Undo/Redo method in 3D collaborative modeling systems with performance evaluation",
      "Abstract": "Undo/Redo is an indispensable function in 3D collaborative modeling systems where a single mistake conducted by one user is propagated to all participants. Both intention preservation and consistency maintenance should be satisfied when applying group Undo/Redo. Besides, fast local responsiveness and timely group awareness are accepted performance metrics in interactive systems. In this paper, we contribute a novel group Undo/Redo mechanism for 3D collaborative modeling systems to support the \"any time, any where\" Undo/Redo. Response time will be shortened noticeably with a Model State Stream kept on each collaborative site. In the case of concurrent Undo/Redo, an Undo State Vector is proposed to ensure the Undo/Redo intention preservation and model consistency maintenance. Furthermore, the paper studies the performance of the algorithm including the worst, best and average cases with theoretical analyses. Our experiments show that responsive time is actually depending on a number of factors such as size of the history buffer, execution time for a single modeling operation. © 2013 Elsevier Ltd. All rights reserved.",
      "Keywords": "3D collaborative modeling | Concurrency control | Performance evaluation | Undo/Redo",
      "Publication venue": "Journal of Network and Computer Applications",
      "Publication date": "2013-11-01",
      "Publication type": "Article",
      "Authors": "Cheng, Yuan;He, Fazhi;Cai, Xiantao;Zhang, Dejun",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85073249376",
      "Primary study DOI": "10.1016/j.infsof.2019.106198",
      "Title": "Automatic extraction of product line architecture and feature models from UML class diagram variants",
      "Abstract": "© 2019 Elsevier B.V.Context: Software Product Lines (SPLs) are families of related products developed for specific domains. SPLs commonly emerge from existing variants when their individual maintenance and/or evolution become complex. Even though there exists a vast research literature on SPL extraction, the majority of the approaches have only focused on source code, are partially automated, or do not reflect domain constraints. Such limitations can make more difficult the extraction, management, documentation and generation of some important SPL artifacts such as the product line architecture, a fact that can impact negatively the evolution and maintenance of SPLs. Objective: To tackle these limitations, this work presents ModelVars2SPL (Model Variants to SPL Core Assets), an automated approach to aid the development of SPLs from existing system variants. Method: The input for ModelVars2SPL is a set of Unified Modeling Language (UML) class diagrams and the list of features they implement. The approach extracts two main assets: (i) Feature Model (FM), which represents the combinations of features, and (ii) a Product Line Architecture (PLA), which represents a global structure of the variants. ModelVars2SPL is composed of four automated steps. We conducted a thorough evaluation of ModelVars2SPL to analyze the artefacts it generates and its performance. Results: The results show that the FMs well-represent the features organization, providing useful information to define and manage commonalities and variabilities. The PLAs show a global structure of current variants, facilitating the understanding of existing implementations of all variants. Conclusions: An advantage of ModelVars2SPL is to exploit the use of UML design models, that is, it is independent of the programming language, and supports the re-engineering process in the design level, allowing practitioners to have a broader view of the SPL.",
      "Keywords": "Feature model | Model merging | Search-based techniques | SPL architecture",
      "Publication venue": "Information and Software Technology",
      "Publication date": "2020-01-01",
      "Publication type": "Article",
      "Authors": "Assunção, Wesley K.G.;Vergilio, Silvia R.;Lopez-Herrejon, Roberto E.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85053164602",
      "Primary study DOI": "10.1016/j.procs.2018.08.191",
      "Title": "Version Control System: A Review",
      "Abstract": "© 2018 The Authors. Published by Elsevier Ltd.Version Control Systems (VCS) have been used by many software developers during project developments as it helps them to manage the source codes and enables them to keep every version of the project they have worked on. It is the way towards managing, organizing, and coordinating the development of objects. In Software Engineering, software developers need to collaborate with each other to develop a better project. Thus, VCS is very useful because it also supports a collaborative framework that makes it easy for software developers to work together effectively. Without VCS, collaboration is very challenging. This paper discusses the background and the related works about VCS that have been studied by researchers. The purpose of this paper is to convey the knowledge and ideas that have been established on VCS.",
      "Keywords": "Centralized Version Control Systems | Collaborative Development | Distributed Version Control Systems | Software Development | Version Control Systems",
      "Publication venue": "Procedia Computer Science",
      "Publication date": "2018-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Zolkifli, Nazatul Nurlisa;Ngah, Amir;Deraman, Aziz",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84858075485",
      "Primary study DOI": "10.1016/j.jnca.2011.12.009",
      "Title": "A model-driven development method for collaborative modeling tools",
      "Abstract": "Collaborative modeling tools are useful for many tasks within design or learning processes. However, they are difficult to build and are usually domain-specific. In response to this situation, we propose a model-driven method for the development of domain-independent collaborative modeling tools. This method consists of a methodological framework, a conceptual framework and a technological framework. The methodological framework defines the phases to be carried out when applying the method, whilst the conceptual framework is made up of the meta-models used in the method and the transformation processes established between them. Finally, the technological framework consists of the integration of some plug-ins from the Eclipse Modeling Project with some add-ons which provide collaborative functionality. Some case studies that exemplify this development method for specific domains are explained in detail, together with comparisons with similar approaches. Thus, an initial evaluation of this approach is provided and some advantages over those other approaches are identified. A further evaluation process in the form of an empirical study of use has also been carried out. Hence, the method proves to be useful for any user who does not have advanced knowledge of groupware programming and who needs to use a collaborative modeling tool in his/her work. Moreover, each framework implies a contribution that can be used in different contexts. © 2011 Elsevier Ltd. All rights reserved.",
      "Keywords": "Collaborative modeling | Computer-supported collaborative work | Groupware | Model-driven development | Network modeling environments",
      "Publication venue": "Journal of Network and Computer Applications",
      "Publication date": "2012-05-01",
      "Publication type": "Article",
      "Authors": "Gallardo, Jesús;Bravo, Crescencio;Redondo, Miguel A.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33947099959",
      "Primary study DOI": "10.1016/j.scico.2006.05.011",
      "Title": "Odyssey-SCM: An integrated software configuration management infrastructure for UML models",
      "Abstract": "Model-driven development is becoming a reality. Different CASE tool vendors support this paradigm, allowing developers to define high-level models and helping to transform them into refined models or source code. However, current software configuration management tools use a file-based data model that is barely sufficient to manipulate source code. This file-based data model is not adequate to provide versioning capabilities for software modeling environments, which are strongly focused on analysis and architectural design artifacts. The existence of a versioned repository of high-level artifacts integrated with a customized change control process could help in the development and maintenance of such model-based systems. In this work, we introduce Odyssey-SCM, an integrated software configuration management infrastructure for UML models. This infrastructure is composed of a flexible version control system for fine-grained UML model elements, named Odyssey-VCS, and two complementary components: a customizable change control system tightly integrated with the version control system, and a traceability link detection tool that uses data mining to discover change traces among versioned UML model elements and provides the rationale of change traces, automatically collected from the integrated software configuration management infrastructure. © 2006 Elsevier B.V. All rights reserved.",
      "Keywords": "Change control system | Data mining | Model-driven development | Software configuration management | Version control system",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2007-04-01",
      "Publication type": "Article",
      "Authors": "Murta, Leonardo;Oliveira, Hamilton;Dantas, Cristine;Lopes, Luiz Gustavo;Werner, Cláudia",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34248636521",
      "Primary study DOI": "10.1016/j.aei.2006.05.006",
      "Title": "Conflicts classification and solving for collaborative feature modeling",
      "Abstract": "Based on the analysis of feature modeling activities in a collaborative environment, a definition and a classification of concurrency conflicts have been presented. A feature adjustment method is proposed to solve the conflicts, an enhanced naming mechanism for the collaborative feature modeling to preserve the design intentions, and a process for the non-locked multi-client collaborative design. The algorithms have been implemented in a prototype system integrating C++, Java3D and VRML, and CORBA technologies. Flexibility and efficiency in collaborative feature modeling environment have been achieved in our system. © 2006 Elsevier Ltd. All rights reserved.",
      "Keywords": "Concurrency conflicts | CORBA/IDL | Feature-based modeling | Naming mechanism",
      "Publication venue": "Advanced Engineering Informatics",
      "Publication date": "2007-04-01",
      "Publication type": "Article",
      "Authors": "Tang, Min;Chou, Shang Ching;Dong, Jin Xiang",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-54049099904",
      "Primary study DOI": "10.1016/j.compind.2008.07.010",
      "Title": "Supporting conflict management in collaborative design: An approach to assess engineering change impacts",
      "Abstract": "It is characteristic of collaborative engineering design that precedence relationships among design activities contain information flow conflicts. Due to multi-actors interaction, conflicts can emerge from disagreements between designers about proposed designs. Hence, a critical element of collaborative design is to manage the detected conflicts and particularly the impacts once they are resolved. Indeed, the conflict resolution comes up with a solution which often implies modifications on the product and the process organisation. This paper deals with the problem of conflict management process and particularly the impacts of changes once a conflict is resolved. First, a solution is proposed to assess the impact on the product data based on the concept of data dependencies network. Second, this paper quantifies key issues with regards to Concurrent Engineering that enables us to better manage the design process. Strategies to overlap coupled activities are proposed based on the dependencies between the handled data during the design process. Furthermore, prospects to effectively re-organise the execution of design activities are proposed. Key features for a better process re-organization are studied: overlapping rate and multifunctional interaction rate. The author examines, under varying uncertainty conditions, how these key parameters affect the process performance of product development time and effort. Findings and recommendations to optimise the process re-organisation are summarized. © 2008 Elsevier B.V. All rights reserved.",
      "Keywords": "Collaborative process | Conflict management | Design process traceability | Engineering change | Engineering data dependencies | Process coordination strategies",
      "Publication venue": "Computers in Industry",
      "Publication date": "2008-12-01",
      "Publication type": "Article",
      "Authors": "Ouertani, M. Z.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84859141715",
      "Primary study DOI": "10.1016/j.jlap.2009.10.003",
      "Title": "A formalisation of the copy-modify-merge approach to version control in MDE",
      "Abstract": "Models are the primary artefacts of the software development process in Model-Driven Engineering (MDE). Like other software artefacts, models undergo a complex evolution during their life cycles. Version control is one of the key techniques which enable developers to tackle this complexity. Traditional version control systems (VCS) are based on the copymodify-merge approach which is not fully exploited in MDE since current implementations lack model-orientation. In this paper we provide a formalisation of the copy-modify-merge approach in the context ofMDE. In particular,we analyse howthe identification of commonalities and the calculation of differences can be defined by means of category-theoretical constructions. Moreover, we demonstrate how the properties of these constructions can be used to synchronise models and detect conflicting modifications. © 2010 Elsevier Inc. All rights reserved.",
      "Keywords": "Category theory | Diagram predicate framework | Model-driven engineering | Version control system",
      "Publication venue": "Journal of Logic and Algebraic Programming",
      "Publication date": "2010-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Rossini, Alessandro;Rutle, Adrian;Lamo, Yngve;Wolter, Uwe",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84887015555",
      "Primary study DOI": "10.1016/j.jss.2013.05.045",
      "Title": "Detecting Web requirements conflicts and inconsistencies under a model-based perspective",
      "Abstract": "Web requirements engineering is an essential phase in the software project life cycle for the project results. This phase covers different activities and tasks that in many situations, depending on the analyst's experience or intuition, help getting accurate specifications. One of these tasks is the conciliation of requirements in projects with different groups of users. This article presents an approach for the systematic conciliation of requirements in big projects dealing with a model-based approach. The article presents a possible implementation of the approach in the context of the NDT (Navigational Development Techniques) Methodology and shows the empirical evaluation in a real project by analysing the improvements obtained with our approach. The paper presents interesting results that demonstrate that we can get a reduction in the time required to find conflicts between requirements, which implies a reduction in the global development costs. © 2013 Elsevier Inc. All rights reserved.",
      "Keywords": "Consistency | Contradiction | Web requirements",
      "Publication venue": "Journal of Systems and Software",
      "Publication date": "2013-12-01",
      "Publication type": "Article",
      "Authors": "Escalona, M. J.;Urbieta, M.;Rossi, G.;Garcia-Garcia, J. A.;Luna, E. Robles",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-15544375548",
      "Primary study DOI": "10.1016/j.entcs.2004.08.038",
      "Title": "Detecting structural refactoring conflicts using critical pair analysis",
      "Abstract": "Refactorings are program transformations that improve the software structure while preserving the external behaviour. In spite of this very useful property, refactorings can still give rise to structural conflicts when parallel evolutions to the same software are made by different developers. This paper explores this problem of structural evolution conflicts in a formal way by using graph transformation and critical pair analysis. Based on experiments carried out in the graph transformation tool AGG, we show how this formalism can be exploited to detect and resolve refactoring conflicts. © 2005 Elsevier B.V.",
      "Keywords": "Critical pair analysis | Evolution conflicts | Graph transformation | Parallel changes | Refactoring | Restructuring",
      "Publication venue": "Electronic Notes in Theoretical Computer Science",
      "Publication date": "2005-04-06",
      "Publication type": "Conference Paper",
      "Authors": "Mens, Tom;Taentzer, Gabriele;Runge, Olga",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85084516255",
      "Primary study DOI": "10.1002/spe.2835",
      "Title": "Configurable three‐way model merging",
      "Abstract": "© 2020 John Wiley & Sons, Ltd.Software development is a collaborative activity that requires teams of software engineers to cooperate and work in parallel on versions of models. However, model management techniques such as model differencing, merging, and versioning have turned out to be difficult challenges, due to the complexity of operations and graph-like nature of models. Therefore, a well-developed support for model merging process, as well as conflict management, is highly desired. This paper presents a novel process for model merging, called the Epsilon-based Three-way Merging Process (E3MP) process. Model merging is a significant problem where there are different versions of a system model amongst modeler teams. E3MP includes three components implemented into the Epsilon framework. First, modelers can define domain-specific rules that customize the merging process. Second, E3MP enables an automated method for syntactic and semantic conflict detection amongst different versions of the system model. Third, E3MP puts forward a pattern-based approach for conflict resolution. We applied two generic benchmarks to assess conflict detection and resolution capabilities of our approach and carried out an initial scalability evaluation for the model merge with large models and large change sets. The results of our experiments revealed that the proposed process allows generating consistent and semantically correct merged models.",
      "Keywords": "configurable model merging | epsilon framework | model versioning | model-driven software engineering | three-way model merging",
      "Publication venue": "Software - Practice and Experience",
      "Publication date": "2020-08-01",
      "Publication type": "Article",
      "Authors": "Sharbaf, Mohammadreza;Zamani, Bahman",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-12844251928",
      "Primary study DOI": "10.1002/spip.199",
      "Title": "Guided support for collaborative modeling, enactment and simulation of software development processes",
      "Abstract": "Recently, the awareness of the importance of distributed software development has been growing in the software engineering community. Economic constraints, more and more outsourcing of development activities, and the increasing geographical distribution of companies come along with challenges of how to organize distributed development. In this article, we reason that a common process understanding is mandatory for successful distributed development. Integrated process planning, guidance and enactment are seen as enabling technologies for achieving a unique process view. We present an overview of the software process modeling environment SPEARMINT and the XCHIPS system for web-based process support. SPEARMINT offers extensive capabilities for multi-view modeling and analysis of software development processes. XCHIPS provides capabilities for distributed modeling and offers enactment and simulation functionalities. This article describes the integration of both approaches. The resulting environment provides planners and developers with collaborative planning and enactment support and advanced process guidance via electronic process guides (EPGs). Additionally, experience with the integrated environment is described. We describe, in particular, the usage of this integrated environment in the context of a case study for the development of a learning system. Finally, an overview of related work is given and future research directions are sketched. Copyright © 2004 John Wiley & Sons, Ltd.",
      "Keywords": "Distributed development | Distributed software project management | Project enactment | Project planning | Software process modeling",
      "Publication venue": "Software Process Improvement and Practice",
      "Publication date": "2004-04-01",
      "Publication type": "Conference Paper",
      "Authors": "Fernández, Alejandro;Garzaldeen, Badie;Grützner, Ines;Münch, Jürgen",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85045620151",
      "Primary study DOI": "10.1002/smr.1916",
      "Title": "Model refactoring by example: A multi‐objective search based software engineering approach",
      "Abstract": "Copyright © 2017 John Wiley & Sons, Ltd.Declarative rules are frequently used in model refactoring in order to detect refactoring opportunities and to apply the appropriate ones. However, a large number of rules is required to obtain a complete specification of refactoring opportunities. Companies usually have accumulated examples of refactorings from past maintenance experiences. Based on these observations, we consider the model refactoring problem as a multi objective problem by suggesting refactoring sequences that aim to maximize both structural and textual similarity between a given model (the model to be refactored) and a set of poorly designed models in the base of examples (models that have undergone some refactorings) and minimize the structural similarity between a given model and a set of well-designed models in the base of examples (models that do not need any refactoring). To this end, we use the Non-dominated Sorting Genetic Algorithm (NSGA-II) to find a set of representative Pareto optimal solutions that present the best trade-off between structural and textual similarities of models. The validation results, based on 8 real world models taken from open-source projects, confirm the effectiveness of our approach, yielding refactoring recommendations with an average correctness of over 80%. In addition, our approach outperforms 5 of the state-of-the-art refactoring approaches.",
      "Keywords": "model evolution | NSGA-II | Pareto front | refactoring by example | software maintenance",
      "Publication venue": "Journal of Software: Evolution and Process",
      "Publication date": "2018-04-01",
      "Publication type": "Article",
      "Authors": "Ghannem, Adnane;Kessentini, Marouane;Hamdi, Mohammad Salah;El Boussaidi, Ghizlane",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85041685132",
      "Primary study DOI": "10.1002/smr.1938",
      "Title": "Reusing process patterns in software process models modification",
      "Abstract": "Copyright © 2018 John Wiley & Sons, Ltd.Process patterns offer proven solutions to reuse in process modeling. This reuse can take many forms; however, we are particularly interested in the form where patterns are merged with already existing process models to enrich or to correct them to satisfy certain constraints or to increase their efficiency. We aim through the present work to propose an approach that proceeds the merging automatically. The difficulty is that some conflicts may arise between the pattern being reused and the model being modified, resulting in an incoherent process model. We start this work by studying possible conflicts (especially that of first order), which can be encountered when merging, and then we propose an algorithm ensuring the automatic reuse and managing these conflicts. We highlight through a comparison the benefits of our proposal. The difficulty of patterns reuse to modify existing models gives rise to very few works in the literature. Our approach aims to offer a possible solution that ensures conflicts management. Automating such form of reuse will enhance patterns exploitation within the software community, as well as it will open many perspectives based on process models merging.",
      "Keywords": "first-order conflict | model merging | pattern reuse | process model | process pattern",
      "Publication venue": "Journal of Software: Evolution and Process",
      "Publication date": "2018-08-01",
      "Publication type": "Article",
      "Authors": "Hachemi, Asma;Ahmed-Nacer, Mohamed",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84878705846",
      "Primary study DOI": "10.1002/spe.1116",
      "Title": "UML design pattern metamodel‐level constraints for the maintenance of software evolution",
      "Abstract": "Software maintenance including design is difficult because it is usually performed on someone else's work over a period of time. Maintaining a pattern-based design is especially much more difficult when the information on specific patterns that have been used are not available in the corresponding design documents. Also, finding a maintainer who has a similar level of knowledge on specific patterns that the initial designer had is not easy. Pattern-based design, the use of design patterns during the software design process, has become widely used in the object-oriented community because of its many benefits such as its reuse. However, the defects in pattern-based design can be introduced during the design maintenance phase when the changes are made to the requirements and the initial design, but the conformance to the original patterns is neglected. This conformance process is laborious and time consuming; no systematic process exists to guide the defects discovery and maintenance. Also, deep and correct knowledge of design patterns and their characteristics are required because this process is conducted by human experts. Failure to follow this conformance process and to maintain correct designs during software design evolution may cause serious problems in later software development and maintenance stages by not providing the benefits of pattern-based design that would have been possible if followed correctly. There is a strong need of a systematic design and maintenance method for preventing defects in design patterns introduced during the evolution of pattern-based software design and its maintenance. Because conventional UML design methods do not provide such systematic ways of assessing pattern-based design conformance to the evolutionary changes, we have developed the pattern instance changes with UML profiles (PICUP) design method, which is an improved design method for perfective and corrective UML pattern-based design maintenance and assessment. Design pattern in UML profiles (DPUP) is developed for the use of instantiation, maintenance, and assessment of UML pattern-based designs to support the formal specification of a design pattern. DPUPs, as the main part of the PICUP design method, provide metamodel-level UML design constraints using UML stereotype notations and metamodel-level Object Constraint Language design constraints. Assessment of pattern-based designs in UML class diagram with the corresponding DPUPs enforces maintainers to make necessary and correct changes to keep the principles of the original designs. Pattern-related information is annotated using stereotype notations to help assess pattern-based designs when changes are made. Furthermore, the structural conformance checking of a given UML pattern-based design can be automated by using the assessment tool. The major contributions of this paper are: (i) specifying design patterns using extended UML profile; (ii) providing a means of how to instantiate pattern-based designs from DPUPs with naming conventions; and (iii) providing design constraints for maintaining pattern-based design to guide correct changes of a given design in PICUP method. Explanatory type case studies were performed to better understand and evaluate the effectiveness of the PICUP design method with DPUPs. Answers to the case study questionnaires and the pattern defects discovered from the case studies support the hypothesis that the PICUP method is an improved design method that ensures structural conformance of UML pattern-based designs to the corresponding design patterns during perfective and corrective design maintenance for software systems. Copyright © 2011 John Wiley & Sons, Ltd.",
      "Keywords": "design pattern | software maintenance | UML",
      "Publication venue": "Software - Practice and Experience",
      "Publication date": "2013-07-01",
      "Publication type": "Article",
      "Authors": "Park, Jaeyong;Lee, Seok Won;Rine, David C.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84898000143",
      "Primary study DOI": "10.1002/spe.2171",
      "Title": "Incremental inconsistency detection with low memory overhead",
      "Abstract": "Ensuring models' consistency is a key concern when using a model-based development approach. Therefore, model inconsistency detection has received significant attention over the last years. To be useful, inconsistency detection has to be sound, efficient, and scalable. Incremental detection is one way to achieve efficiency in the presence of large models. In most of the existing approaches, incrementalization is carried out at the expense of the memory consumption that becomes proportional to the model size and the number of consistency rules. In this paper, we propose a new incremental inconsistency detection approach that only consumes a small and model size-independent amount of memory. It will therefore scale better to projects using large models and many consistency rules. Copyright © 2012 John Wiley & Sons, Ltd.",
      "Keywords": "logic programming | model consistency | model driven engineering | program analysis | software engineering",
      "Publication venue": "Software - Practice and Experience",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Falleri, Jean Rémy;Blanc, Xavier;Bendraou, Reda;Da Silva, Marcos Aurélio Almeida;Teyton, Cédric",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77956486918",
      "Primary study DOI": "10.1002/stvr.410",
      "Title": "Improving the coverage criteria of UML state machines using data flow analysis",
      "Abstract": "A number of coverage criteria have been proposed for testing classes and class clusters modeled with state machines. Previous research has revealed their limitations in terms of their capability to detect faults. As these criteria can be considered to execute the control flow structure of the state machine, we are investigating how data flow information can be used to improve them in the context of UML state machines. More specifically, we investigate how such data flow analysis can be used to further refine the selection of a cost-effective test suite among alternative, adequate test suites for a given state machine criterion. This paper presents a comprehensive methodology to perform data flow analysis of UML state machines-with a specific focus on identifying the data flow from OCL guard conditions and operation contracts-and applies it to a widely referenced coverage criterion, the round-trip path (transition tree) criterion. It reports on two case studies whose results show that data flow information can be used to select the best transition tree, in terms of cost effectiveness, when more than one satisfies the transition tree criterion. The results also suggest that different trees are complementary in terms of the data flow that they exercise, thus, leading to the detection of intersecting but distinct subsets of faults. Copyright © 2009 John Wiley & Sons, Ltd.",
      "Keywords": "Data flow analysis | OCL | State-based testing | UML",
      "Publication venue": "Software Testing Verification and Reliability",
      "Publication date": "2010-09-01",
      "Publication type": "Article",
      "Authors": "Briand, Lionel;Labiche, Y.;Lin, Q.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-0036531671",
      "Primary study DOI": "10.1002/scj.10016",
      "Title": "A supporting system for verification among models of the UML",
      "Abstract": "We propose a method for verifying the consistency among UML (Unified Modeling Language) models and for modifying errors of the models. We have been developing a system based on the proposed method. In this paper, the outline of the method will be described. The system configuration and its examples will be illustrated with a simple news system. We also show the usefulness of our method and the system through the example. © 2002 Wiley Periodicals, Inc. Syst. Comp. Jpn.",
      "Keywords": "Object-oriented analysis | Object-oriented software development | UML | Verification of the consistency among UML models",
      "Publication venue": "Systems and Computers in Japan",
      "Publication date": "2002-04-01",
      "Publication type": "Article",
      "Authors": "Ohnishi, Atsushi",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84868615288",
      "Primary study DOI": "10.1002/sres.2106",
      "Title": "Using Visual Representations as Boundary Objects to Resolve Conflict in Collaborative Model‐Building Approaches",
      "Abstract": "In the context of facilitated, technology-supported efforts to resolve complex problems, we recognize the critical role that visual representations can play in both the content and process of collaboration. How these representations are wielded by facilitators and interpreted by participants determines whether they help resolve conflicts or close down conversations. We identify three key attributes of scripted problem-solving facilitation, as well as three key attributes of visual representations that function as boundary objects, to gain insights into pivotal experiences when group problem-solving efforts turned from collaboration to conflict and vice versa. We draw on three vignettes from facilitated group problem solving to illustrate how these attributes can be deployed to move conflict-mired conversations into collaborative discussions. This paper contributes to collaborative problem solving by using the formal sociological theory of boundary objects to offer a deeper, richer understanding of successes and shortcomings of visual representations as drivers of conflict resolution in model-building approaches. © 2012 John Wiley & Sons, Ltd.",
      "Keywords": "Boundary objects | Collaboration | Group model building | Problem solving | System dynamics",
      "Publication venue": "Systems Research and Behavioral Science",
      "Publication date": "2012-03-01",
      "Publication type": "Article",
      "Authors": "Black, Laura J.;Andersen, David F.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84936797946",
      "Primary study DOI": "10.1002/cav.1669",
      "Title": "Approximate resolution of asynchronous conflicts among sequential collaborations in dynamic virtual environments",
      "Abstract": "Copyright © 2015 John Wiley & Sons, Ltd.Asynchronous collaboration for a networked virtual environment (NVE) has emerged as a promising area in collaborative computer-aided design applications. The concept of asynchronous collaboration is a sequential collaboration of temporal processes in an NVE where the participants are not required to be present at the time of the collaboration. Conflicts in asynchronous collaboration occur because the preceding task of a participant can influence the output of the ensuing task of another participant. The conflicted tasks must be modified manually. However, it requires considerable time and effort to resolve conflicts in a sequential collaboration. In this paper, we present an asynchronous collaborative framework that converts the conflict states of the shared objects into approximately resolved states. We develop a novel approximate resolution algorithm using a task-based modeling mechanism to resolve the asynchronous conflicts with their corresponding tasks. Moreover, we propose a visual relation editor for convenient management. The participants can set flexible relations among shared objects using the proposed visual editor. The proposed approximate resolution approach can significantly reduce the average resolution time and the number of required manual task resolutions in a virtual environment compared to a manual resolution approach.",
      "Keywords": "asynchronous collaboration | computer-aided design | networked virtual environment",
      "Publication venue": "Computer Animation and Virtual Worlds",
      "Publication date": "2016-03-01",
      "Publication type": "Article",
      "Authors": "Lee, Jun;Lim, Mingyu;Park, Sung Jun;Kim, Hyung Seok;Ko, Heedong;Kim, Jee In",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84937073423",
      "Primary study DOI": "10.1002/cpe.3445",
      "Title": "Dependency‐based collaborative design: a comparison of modeling methods",
      "Abstract": "© 2015 John Wiley & Sons, Ltd.The ability to provide support to a group of designers, analysts and other users who are collaborating on an evolving design requires the dual capabilities of managing options for an individual designer while at the same time managing the dependencies between different sets of designer's options. For example, if designer A is creating a design for a helicopters hydraulics system and this is dependent on electrical power (EP) from a sub-system from designer B then how can the workflows, decisions and options of the two designers be managed so that each can understand the implications of their own design decisions and more importantly the implications and design decisions they force on others? The proposed CAPS system employs two dependency reasoning engines: one handles quantitative values and other qualitative ones. The quantitative engine can identify that a motor with an output of 3000 rpm allows a generator to output 100 V or that a hydraulic pump is dependent on the 240v output of the motor. Alternatively, the qualitative engine could rule out several motors options if the overall design state that the weight of a helicopter's transmission needs to be comparable to that of the engine or the positioning of a sensor makes it susceptible to an EM process that could affect its function. A mapping capability is provided allowing analysis to be passed between the two engines. Three different types of dependency-based quantitative engine designs have been developed and evaluated. The first quantitative engine design focuses on modeling components at their output level and propagating level values from component to component, component to sub-system, etc. The second quantitative engine design focuses on modeling components at the node level so as to identify key components, sub-systems, etc. in terms of their overall dependency to the design. The third engine employs a hybrid of the previous two approaches and was identified through feedback from designers. These engines are designed to be complimentary with the node-based and hybrid approaches being used to identify the key capabilities and dependencies of the design. The output-based approach is then used to explore in greater detail the outputs and dependencies of the components and sub-systems identified as key via the node/hybrid-based approach. The proposed CAPS architecture has been initially evaluated against a large collaborative design task involving the design of a helicopter's electrical, hydraulic, structural and mechanical systems.",
      "Keywords": "collaboration enabling technologies | impact analysis | modeling information flows",
      "Publication venue": "Concurrency and Computation: Practice and Experience",
      "Publication date": "2015-08-10",
      "Publication type": "Article",
      "Authors": "Drabble, Brian",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84907877132",
      "Primary study DOI": "10.1002/spe.2211",
      "Title": "A feedback technique for unsatisfiable UML/OCL class diagrams",
      "Abstract": "Copyright © 2013 John Wiley & Sons, Ltd.In Model-Driven Development (MDD), detection of model defects is necessary for correct model transformations. Formal verification tools and techniques can to some extent verify models. However, scalability is a serious issue in relation to verification of complex UML/OCL class diagrams. We have proposed a model slicing technique that slices the original model into submodels to address the scalability issue. A submodel can be detected as unsatisfiable if there are no valid values for one or more attributes of an object in the diagram or if the submodel provides inconsistent conditions on the number of objects of a given type. In this paper, we propose a novel feedback technique through model slicing that detects unsatisfiable submodels and their integrity constraints among the complex hierarchy of an entire UML/OCL class diagram. The software developers can therefore focus their revision efforts on the incorrect submodels while ignoring the rest of the model.",
      "Keywords": "Feedback technique and slicing UML/OCL models with feedback | Model slicing",
      "Publication venue": "Software - Practice and Experience",
      "Publication date": "2014-11-01",
      "Publication type": "Article",
      "Authors": "Shaikh, Asadullah;Wiil, Uffe Kock",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33746433537",
      "Primary study DOI": "10.1007/11787044_12",
      "Title": "Using a Model Merging Language for Reconciling Model Versions",
      "Abstract": "A difficult challenge in the industrialisation of Model-Driven Development is managing different versions of models. Different versions may arise at any time during the development process, due to different individuals or teams working on different parts of the overall model. To manage these versions it is necessary to be able to identify differences and reconcile these differences in a single, integrated model. We describe the use of model merging technology for managing different versions of a model in an industrial software development process. The use of automated model merging technology is contrasted with an alternative, semi-automated approach. The contributions of model merging to helping to solve this problem are outlined. © Springer-Verlag Berlin Heidelberg 2006.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Engel, Klaus D.;Paige, Richard F.;Kolovos, Dimitrios S.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84864373311",
      "Primary study DOI": "10.1007/978-3-642-30982-3_10",
      "Title": "An Introduction to Model Versioning",
      "Abstract": "With the emergence of model-driven engineering (MDE), software models are considered as central artifacts in the software engineering process, going beyond their traditional use as sketches. In MDE, models rather act as the single source of information for automatically generating executable software. This shift poses several new research challenges. One of these challenges constitutes model versioning, which targets at enabling efficient team-based development of models. This compelling challenge induced a very active research community, who yielded remarkable methods and techniques ranging from model differencing to merging of models. In this tutorial, we give an introduction to the foundations of model versioning, the underlying technologies for processing models and their evolution, as well as the state of the art in model versioning. Thereby, we aim at equipping students and researchers alike that are new to this domain with enough information for commencing to contribute to this challenging research area. © 2012 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2012-08-01",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Kappel, Gerti;Langer, Philip;Seidl, Martina;Wieland, Konrad;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79959212989",
      "Primary study DOI": "10.1007/978-3-642-21470-7_23",
      "Title": "Table-Driven Detection and Resolution of Operation-Based Merge Conflicts with Mirador",
      "Abstract": "Decision tables are a useful technique for implementing complex decision logic, and a concise communication device. Model merging is a process that can greatly benefit from the flexibility of control, rapidity of change, and understandability of purpose that tables engender. Heretofore, users have been cut off from the inner workings of merge tools. Among its many features, our model merging tool, Mirador, opens the process of merging to inspection and manipulation. The tool's support for user modification of the decision table rules that drive its conflict detection and resolution, as well as the possibility of adding customized table conditions and actions is the focus of this paper. © 2011 Springer-Verlag.",
      "Keywords": "conflict detection | conflict resolution | decision table | Mirador | model merging | operation-based merging | state-based merging",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2011-06-22",
      "Publication type": "Conference Paper",
      "Authors": "Barrett, Stephen C.;Chalin, Patrice;Butler, Greg",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84899937636",
      "Primary study DOI": "10.1007/s10270-012-0279-3",
      "Title": "Merging of EMF models - Formal foundations",
      "Abstract": "Inadequate version control for models significantly impedes the application of model-driven software development. In particular, sophisticated support for merging model versions is urgently needed. In this paper, we present a formal approach to both two- and three-way merging of models in the EMF framework. The approach may be applied to instances of arbitrary Ecore models. We specify context-free as well as context-sensitive rules for model merging which both detect and resolve merge conflicts. Based on these rules, a merge algorithm is developed which produces a consistent model from consistent input models. The merge algorithm does neither assume unique object identifiers, nor does it require change logs. In contrast, it relies on matchings among the input models which identify common elements (state-based approach). The requirements imposed on these matchings are reduced to a minimum, e.g., there are no restrictions on the relative positions of matched elements. Altogether, the merge algorithm is widely applicable, preserves consistency, and offers advanced features, such as merging of ordered collections in the presence of arbitrary moves and handling of context-sensitive conflicts which are hard to detect and to resolve. © 2012 Springer-Verlag.",
      "Keywords": "EMF models | Three-way merging | Version control",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2014-05-01",
      "Publication type": "Article",
      "Authors": "Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-57049174516",
      "Primary study DOI": "10.1007/978-3-540-88643-3_1",
      "Title": "Design Space of Heterogeneous Synchronization",
      "Abstract": "This tutorial explores the design space of heterogeneous synchronization, which is concerned with establishing consistency among artifacts that conform to different schemas or are expressed in different languages. Our main application scenario is synchronization of software artifacts, such as code, models, and configuration files. We classify heterogeneous synchronizers according to the cardinality of the relation that they enforce between artifacts, their directionality, their incrementality, and whether they support reconciliation of concurrent updates. We then provide a framework of artifact operators that describes different ways of building heterogeneous synchronizers, such as synchronizers based on artifact or update translation. The design decisions within the framework are described using feature models. We present 16 concrete instances of the framework, discuss tradeoffs among them, and identify sample implementations for some of them. We also explore additional design decisions such as representation of updates, establishing correspondence among model elements, and strategies for selecting a single synchronization result from a set of alternatives. Finally, we discuss related fields including data synchronization, inconsistency management in software engineering, model management, and model transformation. © 2008 Springer Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2008-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Antkiewicz, Michał;Czarnecki, Krzysztof",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77249091894",
      "Primary study DOI": "10.1007/978-3-642-04425-0_13",
      "Title": "Requirements for Practical Model Merge – An Industrial Perspective",
      "Abstract": "All the support tools that developers are used to must be in place, if the use of model-centric development in companies has to take off. Industry deals with big models and many people working on the same model. Collaboration in a team inevitably leads to parallel work creating different versions that eventually will have to be merged together. However, our experience is that at present the support for model merge is far from optimal. In this paper, we put forward a number of requirements for practical merge tools, based on our analysis of literature, merge tool evaluations, interviews with developers, and a number of use cases for concurrent development of models. We found future work to do for both tool vendors and academic research. Fortunately we also uncovered a few tips and tricks that companies using model-centric development can implement on the short term while waiting for better times. © 2009 Springer Berlin Heidelberg.",
      "Keywords": "Diff | Industrial experience | Model merge | Parallel work | Team co-ordination | Version control",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Bendix, Lars;Emanuelsson, Pär",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84879781364",
      "Primary study DOI": "10.1007/s10270-011-0226-8",
      "Title": "Detection and resolution of conflicting change operations in version management of process models",
      "Abstract": "Version management of process models requires that different versions of process models are integrated by applying change operations. Conflict detection between individually applied change operations and conflict resolution support are integral parts of version management. For conflict detection it is utterly important to compute a precise set of conflicts, since the minimization of the number of detected conflicts also reduces the overhead for merging different process model versions. As not every syntactic conflict leads to a conflict when taking into account model semantics, a computation of conflicts solely on the syntax leads to an unnecessary high number of conflicts. Moreover, even the set of precisely computed conflicts can be extensive and their resolution means a significant workload for a user. As a consequence, adequate support is required that guides a user through the resolution process and suggests possible resolution strategies for individual conflicts. In this paper, we introduce the notion of syntactic and semantic conflicts for change operations of process models. We provide a method how to efficiently compute conflicts precisely, using a term formalization of process models and consider the subsequent resolution of the detected conflicts based on different strategies. Using this approach, we can significantly reduce the number of overall conflicts and reduce the amount of work for the user when resolving conflicts. © 2011 Springer-Verlag.",
      "Keywords": "Business process model | Conflict detection | Conflict resolution | Version management",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2013-07-01",
      "Publication type": "Article",
      "Authors": "Gerth, Christian;Küster, Jochen M.;Luckey, Markus;Engels, Gregor",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84893746917",
      "Primary study DOI": "10.1007/s10270-012-0248-x",
      "Title": "A fundamental approach to model versioning based on graph modifications: from theory to implementation",
      "Abstract": "In model-driven engineering, models are primary artifacts that can evolve heavily during their life cycle. Therefore, versioning of models is a key technique to be offered by integrated development environments for model-driven engineering. In contrast to text-based versioning systems, we present an approach that takes model structures and their changes over time into account. Considering model structures as graphs, we define a fundamental approach where model revisions are considered as graph modifications consisting of delete and insert actions. Two different kinds of conflict detection are presented: (1) the check for operation-based conflicts between different graph modifications, and (2) the check for state-based conflicts on merged graph modifications. For the merging of graph modifications, a two-phase approach is proposed: First, operational conflicts are temporarily resolved by always giving insertion priority over deletion to keep as much information as possible. Thereafter, this tentative merge result is the basis for manual conflict resolution as well as for the application of repair actions that resolve state-based conflicts. If preferred by the user, giving deletion priority over insertion might be one solution. The fundamental concepts are illustrated by versioning scenarios for simplified statecharts. Furthermore, we show an implementation of this fundamental approach to model versioning based on the Eclipse Modeling Framework as technical space. © 2012 Springer-Verlag.",
      "Keywords": "Conflict detection | Conflict resolution | Graph modification | Model versioning",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2014-02-01",
      "Publication type": "Article",
      "Authors": "Taentzer, Gabriele;Ermel, Claudia;Langer, Philip;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33750362774",
      "Primary study DOI": "10.1007/11880240_16",
      "Title": "Merging Models with the Epsilon Merging Language (EML)",
      "Abstract": "In the context of Model Engineering, work has focused on operations such as model validation and model transformation. By contrast, other model management operations of significant importance remain underdeveloped. One of the least elaborated operations is model merging. In this paper we discuss the special requirements of model merging and introduce the Epsilon Merging Language (EML), a rule-based language, with tool support, for merging models of diverse metamodels and technologies. Moreover, we identify special cases of model merging that are of particular interest and provide a working example through which we demonstrate the practicality and usefulness of the proposed language. © Springer-Verlag Berlin Heidelberg 2006.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Kolovos, Dimitrios S.;Paige, Richard F.;Polack, Fiona A.C.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84883434558",
      "Primary study DOI": "10.1007/978-3-642-38209-3_1",
      "Title": "A Graphical Specification of Model Composition with Triple Graph Grammars",
      "Abstract": "The concept of model is widely used in the MDE approach in order to represent several software artifacts, which are handled by different development teams throughout the software life cycle. Management of these models requires the definition of a set of model management operators such as the composition operation. This is generally an operation, which is dedicated to merge a number of models in order to create one (or more) incorporated model and which depends on the application context. The current work focuses on the description of a formal approach for model composition where the composition is specified by a set of graph transformation rules over UML-compliant models. The semantics of our composition operator is defined using triple graph grammars (TGGs) formalism. Furthermore, we present a composition scheme interpreted by a three-steps composition process: matching, checking and merging. © 2013 Springer-Verlag.",
      "Keywords": "AGG | graph transformations | Model composition | model-driven development | triple graph grammars",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-09-09",
      "Publication type": "Conference Paper",
      "Authors": "Anwar, Adil;Benelallam, Amine;Nassar, Mahmoud;Coulette, Bernard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85078349386",
      "Primary study DOI": "10.1007/s10270-020-00776-8",
      "Title": "Scalable modeling technologies in the wild: an experience report on wind turbines control applications development",
      "Abstract": "© 2020, Springer-Verlag GmbH Germany, part of Springer Nature.Scalability in modeling has many facets, including the ability to build larger models and domain-specific languages (DSLs) efficiently. With the aim of tackling some of the most prominent scalability challenges in model-based engineering (MBE), the MONDO EU project developed the theoretical foundations and open-source implementation of a platform for scalable modeling and model management. The platform includes facilities for building large graphical DSLs, for splitting large models into sets of smaller interrelated fragments, to index large collections of models to speed-up their querying, and to enable the collaborative construction and refinement of complex models, among other features. This paper reports on the tools provided by MONDO that Ikerlan, a medium-sized technology center which in the last decade has embraced the MBE paradigm, adopted in order to improve their processes. This experience produced as a result a set of model editors and related technologies that fostered collaboration and scalability in the development of wind turbine control applications. In order to evaluate the benefits obtained, an on-site evaluation of the tools was performed. This evaluation shows that scalable MBE technologies give new growth opportunities to small- and medium-sized organizations.",
      "Keywords": "Collaborative modeling | Domain-specific graphical modeling languages | Experience report | Model indexing | Model-based engineering (MBE) | Scalability",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2020-09-01",
      "Publication type": "Article",
      "Authors": "Gómez, Abel;Mendialdua, Xabier;Barmpis, Konstantinos;Bergmann, Gábor;Cabot, Jordi;de Carlos, Xabier;Debreceni, Csaba;Garmendia, Antonio;Kolovos, Dimitrios S.;de Lara, Juan",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-56649103524",
      "Primary study DOI": "10.1007/978-3-540-87875-9_23",
      "Title": "Managing Model Conflicts in Distributed Development",
      "Abstract": "The growing complexity of current software systems naturally conveyed their development toward incremental and distributed approaches to speed up the process. Several developers update the same artefact operating concurrent manipulations which need to be coherently combined. The interaction among those changes inevitably involves conflicts which must be detected and reconciled. This paper proposes a domain specific language able to define and manage conflicts caused by cooperative updates over the same model elements. The approach relies on a model-based representation of model differences and enables the specification and the detection of both syntactical and semantic conflicts. © 2008 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2008-11-28",
      "Publication type": "Conference Paper",
      "Authors": "Cicchetti, Antonio;Di Ruscio, Davide;Pierantonio, Alfonso",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84874383365",
      "Primary study DOI": "10.1007/978-3-642-37057-1_2",
      "Title": "Towards a Distributed Modeling Process Based on Composite Models",
      "Abstract": "The rising impact of software development in globally distributed teams strengthens the need for strategies that establish a clear separation of concerns in software models. Dealing with large, weakly modularized models and conflicting changes on interrelated models are typical obstacles to be witnessed. This paper proposes a structured process for distributed modeling based on the modularization technique provided by composite models with explicit interfaces. It provides a splitting activity for decomposing large models, discusses asynchronous and synchronous editing steps in relation to consistency management and provides a merge activity allowing the reuse of code generators. All main concepts of composite modeling are precisely defined based on category theory. © 2013 Springer-Verlag.",
      "Keywords": "composite models | distributed modeling | EMF | model transformation",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-03-04",
      "Publication type": "Conference Paper",
      "Authors": "Strüber, Daniel;Taentzer, Gabriele;Jurack, Stefan;Schäfer, Tim",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85061201913",
      "Primary study DOI": "10.1007/s10270-019-00722-3",
      "Title": "Integrated revision and variation control for evolving model-driven software product lines",
      "Abstract": "© 2019, Springer-Verlag GmbH Germany, part of Springer Nature.Software engineering projects are faced with abstraction, which is achieved by software models, historical evolution, which is addressed by revision control, and variability, which is managed with the help of software product line engineering. Addressing these phenomena by separate tools ignores obvious overlaps and therefore fails at exploiting synergies between revision and variation control for models. In this article, we present a conceptual framework for integrated revision and variation control of model-driven software projects. The framework reuses the abstractions of revision graphs and feature models and follows an iterative, revision-control-like approach to software product line engineering called product-based product line development. A single version (i.e., a variant of a selected revision) is made available in a workspace, where the user may apply arbitrary modifications. Based on a user-provided specification of the affected variants, the changes are automatically written back to a transparent repository that relies on an internal multi-version storage. The uniform handling of revisions and variants of models is achieved by transparently mapping version concepts to a semantic base layer, which is defined upon propositional logic. At the heart of the conceptual framework is a dynamic filtered editing model, which allows that the versioned artifacts and the feature model co-evolve. We contribute algorithms for checkout and commit, which satisfy a set of consistency constraints referring to variant specifications in an evolving feature model. This article furthermore addresses the orchestration of collaborative development by distributed replication and the well formedness of text and model artifacts to be checked out into the workspace. The Eclipse-based tool SuperMod demonstrates the feasibility of the conceptual framework. It allows the user to reuse arbitrary editing tools for text-based programming and/or Ecore-based modeling languages. An evaluation based on three case studies investigates the properties of SuperMod with a specific focus on filtered editing. The evaluation demonstrates that the dynamic filtered editing model reduces the cognitive complexity and the amount of user interaction necessary for variation control when compared to unfiltered model-driven approaches to software product line engineering.",
      "Keywords": "Integrated historical and logical versioning | Model versioning | Model-driven product lines | Tool integration | Variation control systems",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2019-12-01",
      "Publication type": "Article",
      "Authors": "Schwägerl, Felix;Westfechtel, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84886833814",
      "Primary study DOI": "10.1007/978-3-642-41533-3_26",
      "Title": "A Graph-Pattern Based Approach for Meta-Model Specific Conflict Detection in a General-Purpose Model Versioning System",
      "Abstract": "Model driven engineering is the key paradigm in many large system development efforts today. A good versioning system for models is essential for change management and coordinated development of these systems. Support for conflict detection and reconciliation is one of the key functionalities of a versioning system. A large system uses a large number of different kinds of models, each specifying a different aspect of the system. The notion of conflict is relative to the semantics of a meta-model. Hence conflicts should be detected and reported in a meta-model specific way. In this paper we discuss a general purpose model versioning system that can work with models of any meta-model, and a graph-pattern based approach for specifying conflicts in a meta-model specific way. We also present an efficient algorithm that uses these graph-patterns to detect conflicts at the right level of abstraction. © 2013 Springer-Verlag.",
      "Keywords": "Meta-model | Model driven engineering | Model versioning",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-11-07",
      "Publication type": "Conference Paper",
      "Authors": "Rajbhoj, Asha;Reddy, Sreedhar",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77956904058",
      "Primary study DOI": "10.1007/s10257-008-0101-5",
      "Title": "An exploratory classification of applications in the realm of collaborative modeling and design",
      "Abstract": "The high complexity and diversity of today's design projects demands the participation of multiple experts. The participating experts can influence the design process by sharing their perspective, expertise and resources. The involvement of various experts is often known as collaborative modeling and design. A collaborative modeling environment can encompass various geographical or organizational boundaries. In this paper, we provide a classification to study various aspects of this important issue through the exploration of the existing models, methods and applications in this area. The paper further addresses both model-oriented and artifact-neutral collaboration approaches and enumerates their features. The paper introduces the features of and classifies several relevant applications. The classification can serve as a guideline for customizing a suitable setting for a collaborative modeling process based on given requirements, needs and demands. Several suggestions for future work are also provided. © 2008 Springer-Verlag.",
      "Keywords": "Collaborative modeling | Cooperation | Coordination | Distributed design",
      "Publication venue": "Information Systems and e-Business Management",
      "Publication date": "2010-01-01",
      "Publication type": "Article",
      "Authors": "Bagheri, Ebrahim;Ghorbani, Ali A.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85025163464",
      "Primary study DOI": "10.1007/978-3-319-58521-5_5",
      "Title": "Management of Inconsistencies in Domain-Spanning Models – An Interactive Visualization Approach",
      "Abstract": "© Springer International Publishing AG 2017.The complexity of automated production systems increases steadily – especially due to the rising customer demand to manufacture individualized goods. To stay competitive, companies in this domain need to adapt their engineering to deliver machines and plants with higher quality in shorter time. Hence, to reduce design errors and identify problems already in early engineering stages, it is essential to ensure that the disparate engineering models – e.g., from mechanical, electrical and software engineering – are free from inconsistencies. This paper presents a concept for inter-model inconsistency management. In particular, the proposed concept provides an interactive visualization approach that captures the dependencies between the different engineering models explicitly and visualizes them to the involved stakeholders. By that, the location of and cause for inconsistencies can be identified more easily; dependencies between the different engineering disciplines can be visualized in a comprehensive manner.",
      "Keywords": "Automated production systems | Inconsistency management | Model-based systems engineering | Semantic web technologies",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2017-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Feldmann, Stefan;Hauer, Florian;Pantförder, Dorothea;Pankratz, Frieder;Klinker, Gudrun;Vogel-Heuser, Birgit",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84961692435",
      "Primary study DOI": "10.1007/978-3-662-49665-7_7",
      "Title": "Automated Model Merge by Design Space Exploration",
      "Abstract": "© Springer-Verlag Berlin Heidelberg 2016.Industrial applications of model-driven engineering to develop large and complex systems resulted in an increasing demand for collaboration features. However, use cases such as model differencing and merging have turned out to be a difficult challenge, due to (i) the graph-like nature of models, and (ii) the complexity of certain operations (e.g. hierarchy refactoring) that are common today. In the paper, we present a novel search-based automated model merge approach where rule-based design space exploration is used to search the space of solution candidates that represent conflict-free merged models. Our method also allows engineers to easily incorporate domain-specific knowledge into the merge process to provide better solutions. The merge process automatically calculates multiple merge candidates to be presented to domain experts for final selection. Furthermore, we propose to adopt a generic synthetic benchmark to carry out an initial scalability assessment for model merge with large models and large change sets.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2016-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Debreceni, Csaba;Ráth, István;Varró, Dániel;De Carlos, Xabier;Mendialdua, Xabier;Trujillo, Salvador",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-37149024553",
      "Primary study DOI": "10.1007/978-3-540-72901-3_8",
      "Title": "An Algebraic View on the Semantics of Model Composition",
      "Abstract": "Due to the increased complexity of software development projects more and more systems are described by models. The sheer size makes it impractical to describe these systems by a single model. Instead many models are developed that provide several complementary views on the system to be developed. This however leads to a need for compositional models. This paper describes a foundational theory of model composition in form of an algebra to explicitly clarify different variants and uses of composition, their interplay with the semantics of the involved models and their composition operators. © Springer-Verlag Berlin Heidelberg 2007.",
      "Keywords": "Model composition | Model merging | Semantics",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2007-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Herrmann, Christoph;Krahn, Holger;Rumpe, Bernhard;Schindler, Martin;Völkel, Steven",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84874191891",
      "Primary study DOI": "10.1007/s10270-011-0192-1",
      "Title": "Inter-modelling with patterns",
      "Abstract": "Inter-modelling is the activity of modelling relations between two or more modelling languages. The result of this activity is a model that describes the way in which model instances of these languages can be related. Many tasks in model-driven development can be classified as inter-modelling, for example designing model-to-model transformations, defining model matching and traceability relations, specifying model merging and model weaving, as well as describing mechanisms for inter-model consistency management and model synchronization. This paper presents our approach to inter-modelling in a declarative, relational, visual, and formal style. The approach relies on declarative patterns describing allowed or forbidden relations between two modelling languages. Such specification is then compiled into different operational mechanisms that are tailor-made for concrete inter-modelling scenarios. Up to now, we have used the approach to generate forward and backward transformations from a pattern specification. In this paper we demonstrate that the same specification can be used to derive mechanisms for other inter-modelling tasks, such as model matching and model traceability. In these scenarios the goals are generating the traces between two existing models, checking whether two models are correctly traced, and modifying the traces between two models if they are incorrect. © 2011 Springer-Verlag.",
      "Keywords": "Graph constraints | Graph transformation | Inter-modelling | Model matching | Model-to-model transformation | Traceability",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2013-02-01",
      "Publication type": "Article",
      "Authors": "Guerra, Esther;de Lara, Juan;Orejas, Fernando",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84884622199",
      "Primary study DOI": "",
      "Title": "Models in Conflict – Towards a Semantically Enhanced Version Control System for Models",
      "Abstract": "For a widespread success of the model-driven paradigm, appropriate tools such as \"Version Control Systems\" (VCS) are required to adequately support a model-based development process. First attempts to model-based versioning, however, perform conflict detection mainly on basis of a syntactic representation of models without exploiting their semantics. Consequently, in this paper the approach towards a semantically enhanced VCS is presented which enables for semantic conflict detection allowing not only a more precise conflict detection but also the determination of a conflict's reason, which can simplify the merge process. This is achieved by introducing the concept of semantic views which explicate a certain aspect of a modeling language's semantics relevant for conflict detection.",
      "Keywords": "",
      "Publication venue": "CEUR Workshop Proceedings",
      "Publication date": "2007-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Altmanninger, Kerstin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78349272816",
      "Primary study DOI": "10.1007/978-3-642-16129-2_8",
      "Title": "Precise Detection of Conflicting Change Operations Using Process Model Terms",
      "Abstract": "Version management of process models requires that changes can be resolved by applying change operations. Conflict detection is an important part of version management and the minimization of the number of detected conflicts also reduces the overhead when resolving changes. As not every syntactic conflict leads to a conflict when taking into account model semantics, a computation of conflicts solely on the syntax leads to an unnecessary high number of conflicts. In this paper, we introduce the notion of syntactic and semantic conflicts for change operations of process models. We provide a method how to efficiently compute conflicts, using a term formalization of process models. Using this approach, we can significantly reduce the number of overall conflicts and thereby reduce the amount of work for the user when resolving conflicts. © 2010 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-11-22",
      "Publication type": "Conference Paper",
      "Authors": "Gerth, Christian;Küster, Jochen M.;Luckey, Markus;Engels, Gregor",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85050402186",
      "Primary study DOI": "10.1007/978-3-319-94764-8_9",
      "Title": "A Model Driven Engineering Approach for Heterogeneous Model Composition",
      "Abstract": "© Springer International Publishing AG, part of Springer Nature 2018.Diagrammatic modeling plays an important role in model driven software engineering as it can be used to define domain-specific modeling languages. During the modeling phase, software designers encode domain knowledge into models. Complex models of software systems often consist of heterogeneous models representing various aspects of a system such as structure, behavior, security, and resources. In this paper, we present a formal modeling approach for the composition of heterogeneous models. We apply the technique for modeling the optimization of distributed resources using game theory.",
      "Keywords": "Diagrammatic modeling | Distributed systems | Epistemic game theory | Model composition | Model transformation | Optimization",
      "Publication venue": "Communications in Computer and Information Science",
      "Publication date": "2018-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Rabbi, Fazle;Lamo, Yngve;Kristensen, Lars Michael",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78649900287",
      "Primary study DOI": "10.1007/978-3-642-15928-2_12",
      "Title": "Conflict Detection for Model Versioning Based on Graph Modifications",
      "Abstract": "In model-driven engineering, models are primary artifacts and can evolve heavily during their life cycle. Therefore, versioning of models is a key technique which has to be offered by an integrated development environment for model-driven engineering. In contrast to text-based versioning systems we present an approach which takes abstract syntax structures in model states and operational features into account. Considering the abstract syntax of models as graphs, we define model revisions as graph modifications which are not necessarily rule-based. Building up on the DPO approach to graph transformations, we define two different kinds of conflict detection: (1) the check for operation-based conflicts, and (2) the check for state-based conflicts on results of merged graph modifications. © 2010 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-12-13",
      "Publication type": "Conference Paper",
      "Authors": "Taentzer, Gabriele;Ermel, Claudia;Langer, Philip;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85072865613",
      "Primary study DOI": "10.1007/978-3-030-30690-8_11",
      "Title": "Goal Model Integration: Advanced Relationships and Rationales Documentation",
      "Abstract": "© 2019, Springer Nature Switzerland AG.Integrating new technology in a business environment raises many challenges such as ensuring that this technology meets stakeholder requirements and contributes to organizational goals. However, before analyzing the impact of technology on requirements and goals, goal models of the current context and of the proposed technology should be merged to reflect the whole context. Existing merging approaches mainly focus on merging partial views of a goal model, which belong to one context. However, merging different goal models to reflect one holistic context, such as in technology integration, is not addressed. This paper presents a Goal Integration Method targeting different initial contexts, enabling completeness and consistency analysis of the integrated goal model, and providing traceability to rationales and decisions made at integration time. The method introduces advanced relationships and procedures to capture newly added elements or raised conflicts that may occur during the integration. The method is presented with the help of a conceptual model and an algorithm. It also exploits the User Requirements Notation with tool support (jUCMNav) for building and integrating goal models. The feasibility of the method is illustrated through a case study. The method formalizes the integration of multiple goal models belonging to different contexts, and the accommodation of new requirements, while providing comprehensive traceability and rationales.",
      "Keywords": "Goal-oriented modeling | GRL | Model merging | Technology integration | User requirements notation",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2019-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Baslyman, Malak;Amyot, Daniel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84870347333",
      "Primary study DOI": "10.1007/978-3-642-32775-9_27",
      "Title": "Supporting Collaborative Work by Preserving Model Meaning When Merging Graphical Models",
      "Abstract": "An important aspect of support for distributed work is to enable users at different sites to work collaboratively; models need to be accessible by more than one user at a time allowing them to modify them independently from each other supporting parallel evolution [1]. As design is a largely creative process users also use layout to convey meaning. However, tools for merging such models tend to do so from a purely structural perspective, thus losing an important aspect of the meaning conveyed by the modeller. This paper presents a novel approach to model merging which allows us to preserve such layout meaning when merging. We first present evidence from an industrial study, which demonstrates how users use layout to convey specific meanings. We then introduce an approach to merging which will allow for the preservation of meaning and finally describe a prototype tool. © 2012 International Federation for Information Processing.",
      "Keywords": "diagram merging model-driven | distributed | model merging | software engineering | UML class models/diagrams",
      "Publication venue": "IFIP Advances in Information and Communication Technology",
      "Publication date": "2012-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Phalp, Keith;Grimm, Frank;Xu, Lai",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85034642938",
      "Primary study DOI": "10.1007/s10270-017-0631-8",
      "Title": "Enforcing fine-grained access control for secure collaborative modelling using bidirectional transformations",
      "Abstract": "© 2017, The Author(s).Large-scale model-driven system engineering projects are carried out collaboratively. Engineering artefacts stored in model repositories are developed in either offline (checkout–modify–commit) or online (GoogleDoc-style) scenarios. Complex systems frequently integrate models and components developed by different teams, vendors and suppliers. Thus, confidentiality and integrity of design artefacts need to be protected in accordance with access control policies. We propose a secure collaborative modelling approach where fine-grained access control for models is strictly enforced by bidirectional model transformations. Collaborators obtain filtered local copies of the model containing only those model elements which they are allowed to read; write access control policies are checked on the server upon submitting model changes. We present a formal collaboration schema which provenly guarantees certain correctness constraints, and its adaption to online scenarios with on-the-fly change propagation and the integration into existing version control systems to support offline scenarios. The approach is illustrated, and its scalability is evaluated using a case study of the MONDO EU project.",
      "Keywords": "Access control | Bidirectional model transformation | Collaborative modelling | Offline collaboration | Online collaboration | Secured views",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2019-06-01",
      "Publication type": "Article",
      "Authors": "Debreceni, Csaba;Bergmann, Gábor;Ráth, István;Varró, Dániel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77954646468",
      "Primary study DOI": "10.1007/978-3-642-13595-8_17",
      "Title": "Dynamic Computation of Change Operations in Version Management of Business Process Models",
      "Abstract": "Version management of business process models requires that changes can be resolved by applying change operations. In order to give a user maximal freedom concerning the application order of change operations, position parameters of change operations must be computed dynamically during change resolution. In such an approach, change operations with computed position parameters must be applicable on the model and dependencies and conflicts of change operations must be taken into account because otherwise invalid models can be constructed. In this paper, we study the concept of partially specified change operations where parameters are computed dynamically. We provide a formalization for partially specified change operations using graph transformation and provide a concept for their applicability. Based on this, we study potential dependencies and conflicts of change operations and show how these can be taken into account within change resolution. Using our approach, a user can resolve changes of business process models without being unnecessarily restricted to a certain order. © 2010 Springer-Verlag.",
      "Keywords": "Model Synchronization | Model Transformation | Version Management",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-07-21",
      "Publication type": "Conference Paper",
      "Authors": "Küster, Jochen Malte;Gerth, Christian;Engels, Gregor",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79953189070",
      "Primary study DOI": "10.1007/978-3-642-19811-3_15",
      "Title": "A Formal Resolution Strategy for Operation-Based Conflicts in Model Versioning Using Graph Modifications",
      "Abstract": "In model-driven engineering, models are primary artifacts and can evolve heavily during their life cycle. Hence, versioning of models is a key technique which has to be offered by an integrated development environment for model-driven engineering. In contrast to text-based versioning systems, our approach takes abstract syntax structures in model states and operational features into account. Considering the abstract syntax of models as graphs, we define a model revision by a span G ← D → H, called graph modification, where G and H are the old and new versions, respectively, and D the common subgraph that remains unchanged. Based on notions of behavioural equivalence and parallel independence of graph modifications, we are able to show a Local-Church-Rosser Theorem for graph modifications. The main goal of the paper is to handle conflicts of graph modifications which may occur in the case of parallel dependent graph modifications. The main result is a general merge construction for graph modifications that resolves all conflicts simultaneously in the sense that for delete-insert conflicts insertion has priority over deletion. © 2011 Springer-Verlag.",
      "Keywords": "conflict resolution | graph modification | graph transformation | model versioning",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2011-04-04",
      "Publication type": "Conference Paper",
      "Authors": "Ehrig, Hartmut;Ermel, Claudia;Taentzer, Gabriele",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33751378539",
      "Primary study DOI": "10.1007/11888598_55",
      "Title": "From Data to Model Consistency in Shared Engineering Environments",
      "Abstract": "Collaborative and concurrent engineering can be greatly facilitated by enhanced interoperability and consistency of data and tools based on the use of common shared models. In the paper, we examine the situation in model-based collaborative work and discuss the different types of models that are needed and have to be dealt with in a shared engineering environment. On the basis of a generalized cooperation scenario we then address consistency problems related to the model data and present a set of methods for their solution, including model view extraction, model mapping, knowledge-based consistency checking, model matching, model reintegration and model merging. © Springer-Verlag Berlin Heidelberg 2006.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Scherer, Raimar J.;Katranuschkov, Peter",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85084251554",
      "Primary study DOI": "10.1007/978-3-030-45234-6_17",
      "Title": "Towards Multiple Model Synchronization with Comprehensive Systems",
      "Abstract": "© The Author(s) 2020.Model management is a central activity in Software Engineering. The most challenging aspect of model management is to keep models consistent with each other while they evolve. As a consequence, there has been increasing activity in this area, which has produced a number of approaches to address this synchronization challenge. The majority of these approaches, however, is limited to a binary setting; i.e. the synchronization of exactly two models with each other. A recent Dagstuhl seminar on multidirectional transformations made it clear that there is a need for further investigations in the domain of general multiple model synchronization simply because not every multiary consistency relation can be factored into binary ones. However, with the help of an auxiliary artifact, which provides a global view over all models, multiary synchronization can be achieved by existing binary model synchronization means. In this paper, we propose a novel comprehensive system construction to produce such an artifact using the same underlying base modelling language as the one used to define the models. Our approach is based on the definition of partial commonalities among a set of aligned models. Comprehensive systems can be shown to generalize the underlying categories of graph diagrams and triple graph grammars and can efficiently be implemented in existing tools.",
      "Keywords": "Category Theory | Graph Diagrams | Inter-Model Consistency | Model Merging | Model Synchronization | Multidirectional Transformations (MX) | Multimodelling | Triple Graph Grammars",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2020-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Stünkel, Patrick;König, Harald;Lamo, Yngve;Rutle, Adrian",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79956321467",
      "Primary study DOI": "10.1007/978-1-84882-854-4_12",
      "Title": "We can work it out: Collaborative Conflict Resolution in Model Versioning",
      "Abstract": "For the versioning of code a pantheon of version control system (VCS) solutions has been realized and is successfully applied in practice. Nevertheless, when it comes to merging two different versions of one artifact, the resolution of conflicts poses a major challenge. In standard systems, the developer who performs the later commit is sole in charge of this often time-consuming, error-prone task. This commit carries the inherent danger of losing the modifications of the other developer. Recently, collaborative merge approaches for code versioning systems have been proposed to minimize this risk. In this paper we propose to apply similar techniques in the context of model versioning where the challenge of merging two versions is even more formidable due to their graph-structure and their rich semantics. In particular, modeling is used in the early phases of the software development, where a collaborative merge is beneficial to elaborate a consolidated understanding of a domain.",
      "Keywords": "",
      "Publication venue": "ECSCW 2009 - Proceedings of the 11th European Conference on Computer Supported Cooperative Work",
      "Publication date": "2009-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Seidl, Martina;Wieland, Konrad;Wimmer, Manuel;Langer, Philip",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84872714728",
      "Primary study DOI": "10.1007/978-3-642-36089-3_10",
      "Title": "Guided Merging of Sequence Diagrams",
      "Abstract": "The employment of optimistic model versioning systems allows multiple developers of a team to work independently on their local copies of a software model. The merging process towards one consolidated version can be error-prone and time-consuming when performed without any tool support. Recently, several sophisticated approaches for model merging have been presented. However, even for multi-view modeling languages like UML, which distribute the information on the modeled system over different views, these views are merged independently of each other. Hence, inconsistencies are likely to be introduced into the merged model. We suggest to solve this problem by exploiting information stored in one view as constraint for the computation of a consolidated version of another view. More specifically, we demonstrate how state machines can guide the integration of parallel changes performed on a sequence diagram. We give a concise formal description of this problem and suggest a translation to the satisfiability problem of propositional logic. © 2013 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-01-28",
      "Publication type": "Conference Paper",
      "Authors": "Widl, Magdalena;Biere, Armin;Brosch, Petra;Egly, Uwe;Heule, Marijn;Kappel, Gerti;Seidl, Martina;Tompits, Hans",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85025155511",
      "Primary study DOI": "10.1007/978-3-319-61482-3_12",
      "Title": "Model Consistency for Distributed Collaborative Modeling",
      "Abstract": "© Springer International Publishing AG 2017.Current collaborative modeling tools use a centralized architecture, based on version control system, where models are updated asynchronously. These tools depend on a single server and are not completely adapted for collaborative modeling, where update reactivity is essential. In this paper, we propose a framework for building collaborative modeling tools which provides synchronous model update. The framework is based on a peer-to-peer architecture and uses a consistency algorithm for model updating.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2017-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Sunyé, Gerson",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-67650107563",
      "Primary study DOI": "10.1007/978-3-642-00593-0_5",
      "Title": "A Category-Theoretical Approach to the Formalisation of Version Control in MDE",
      "Abstract": "In Model-Driven Engineering (MDE) models are the primary artefacts of the software development process. Similar to other software artefacts, models undergo a complex evolution during their life cycles. Version control is one of the key techniques which enables developers to tackle this complexity. Traditional version control systems are based on the copy-modify-merge paradigm which is not fully exploited in MDE because of the lack of model-specific techniques. In this paper we give a formalisation of the copy-modify-merge paradigm in MDE. In particular, we analyse how common models and merge models can be defined by means of category-theoretical constructions. Moreover, we show how the properties of those constructions can be used to identify model differences and conflicting modifications.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-07-15",
      "Publication type": "Conference Paper",
      "Authors": "Rutle, Adrian;Rossini, Alessandro;Lamo, Yngve;Wolter, Uwe",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-78649797908",
      "Primary study DOI": "10.1145/1866272.1866279",
      "Title": "Specifying Overlaps of Heterogeneous Models for Global Consistency Checking",
      "Abstract": "Software development often involves a set of models defined in different metamodels, each model capturing a specific view of the system. We call this set a mutlimodel, and its elements partial or local models. Since partial models overlap, they may be consistent or inconsistent wrt. a set of global constraints. We present a framework for specifying overlaps between partial models and defining their global consistency. An advantage of the framework is that heterogeneous consistency checking is reduced to the homogeneous case yet merging partial metamodels into one global metamodel is not needed. We illustrate the framework with examples and sketch a formal semantics for it based on category theory.",
      "Keywords": "Design | Languages | Theory | Verification",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2010-12-10",
      "Publication type": "Conference Paper",
      "Authors": "Diskin, Zinovy;Xiong, Yingfei;Czarnecki, Krzysztof",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84910017393",
      "Primary study DOI": "10.1007/978-3-662-45563-0_22",
      "Title": "Software Support Requirements for Awareness in Collaborative Modeling",
      "Abstract": "© Springer-Verlag Berlin Heidelberg 2014.To address issues of traditional modeling tools (installation, model versioning and lack of model repositories), Axellience has developed the first online UML modeling tool. In GenMyModel’s beta-phase, the most requested feature was collaboration. Supporting collaborative modeling involves addressing classical concerns of CSCW. These issues are usually classified through core dimensions like awareness and articulation work. We decided to focus our research on the most important dimension: awareness. Commercial modeling tools and research prototypes provide little support for awareness.To define the importance of awareness in modeling tools, we decided to study what awareness information is really required in collaborative modeling and to assess its importance according to articulation work types. To do this, we have implemented a basic collaboration system without constraint on articulation work. After a few months of use, we have identified three articulation work types present in more than 500 collaborative projects. This preliminary study allowed us to define awareness elements potentially needed for each articulation work type. As these elements are different for each articulation work type, we launched different surveys for each one of them. With these surveys, we have sorted awareness information by relevance according to articulation work types.",
      "Keywords": "Awareness | Collaboration | Modeling | Survey",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2014-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Dirix, Michel;Pallec, Xavier Le;Muller, Alexis",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84874388236",
      "Primary study DOI": "10.1007/978-3-642-37057-1_3",
      "Title": "Change Propagation due to Uncertainty Change",
      "Abstract": "Uncertainty is ubiquitous in software engineering; however, it has been typically handled in adhoc and informal ways within software models. Automated change propagation is recognized as a key tool for managing the accidental complexity that comes with multiple interrelated models. In this paper, we address change propagation in the context of model uncertainty and consider the case where changes in the level of uncertainty in a model can be propagated to related models. We define such uncertainty change propagation using our earlier formalization and develop automated propagation algorithms using an SMT solver. A preliminary evaluation shows that the approach is feasible. © 2013 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-03-04",
      "Publication type": "Conference Paper",
      "Authors": "Salay, Rick;Gorzny, Jan;Chechik, Marsha",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70350680830",
      "Primary study DOI": "10.1007/978-3-642-02674-4_12",
      "Title": "Dependent and Conflicting Change Operations of Process Models",
      "Abstract": "Version management of models is common for structural diagrams such as class diagrams but still challenging for behavioral models such as process models. For process models, conflicts of change operations are difficult to resolve because often dependencies to other change operations exist. As a consequence, conflicts and dependencies between change operations must be computed and shown to the user who can then take them into account while creating a consolidated version. In this paper, we introduce the concepts of dependencies and conflicts of change operations for process models and provide a method how to compute them. We then discuss different possibilities for resolving conflicts. Using our approach it is possible to enable version management of process models with minimal manual intervention of the user. © 2009 Springer Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-11-09",
      "Publication type": "Conference Paper",
      "Authors": "Küster, Jochen M.;Gerth, Christian;Engels, Gregor",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84860602130",
      "Primary study DOI": "10.1007/978-3-642-29645-1_24",
      "Title": "Towards Semantics-Aware Merge Support in Optimistic Model Versioning",
      "Abstract": "Current optimistic model versioning systems, which are indispensable to coordinate the collaboration within teams, are able to detect several kinds of conflicts between two concurrently modified versions of one model. These systems support the detection of syntactical problems such as contradicting changes, violations of the underlying metamodel, and violations of OCL constraints. However, violations of the models' semantics remain unreported. In this paper, we suggest to use redundant information inherent in multi-view models to check if the semantics is violated during the merge process. In particular, we exploit the information encoded in state machine diagrams to validate evolving sequence diagrams by means of the model checker Spin. © 2012 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2012-05-10",
      "Publication type": "Conference Paper",
      "Authors": "Brosch, Petra;Egly, Uwe;Gabmeyer, Sebastian;Kappel, Gerti;Seidl, Martina;Tompits, Hans;Widl, Magdalena;Wimmer, Manuel",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84886738620",
      "Primary study DOI": "10.1007/978-3-642-41033-8_92",
      "Title": "Difference-Preserving Process Merge",
      "Abstract": "Providing merging techniques for business processes fosters the management and maintenance of (large) process model repositories. Contrary to existing approaches that focus on preserving behavior of all participating process models, this paper presents a merging technique that aims at preserving the difference between the participating process models by exploiting the existence of a common parent process, e.g., a reference or standard process model. © 2013 Springer-Verlag.",
      "Keywords": "Process Design | Process Merging",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-11-05",
      "Publication type": "Conference Paper",
      "Authors": "Böhmer, Kristof;Rinderle-Ma, Stefanie",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84891304718",
      "Primary study DOI": "10.1007/978-0-387-35496-5_17",
      "Title": "Supporting Collaborative Design",
      "Abstract": "Collaborative systems provide a rich but potentially chaotic environment for their users. During the collaborative design process, when different users share a common object, concurrency control is necessary to keep the shared object consistent. In this paper, we have developed a model for supporting concurrency control in CSCW applications. We also include version control, allowing versions of both the design entities and their relationships. Consistency in collaborative design is important: the use of the RAISE formal method provides confidence that the transaction mechanism fulfils the consistency requirements. We also generate a prototype from the specification, with a graphical output to show the structure of the design, the entities available, and who is currently locking what.",
      "Keywords": "Concurrency control | Consistency | CSCW | Formal methods | RAISE | Version control",
      "Publication venue": "IFIP Advances in Information and Communication Technology",
      "Publication date": "2002-01-01",
      "Publication type": "Article",
      "Authors": "Yanjie, Wang;George, Chris",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85054835723",
      "Primary study DOI": "10.1007/978-3-030-01042-3_12",
      "Title": "Towards Online Collaborative Multi-view Modelling",
      "Abstract": "© Springer Nature Switzerland AG 2018.Increasingly, distributed software development teams rely on online collaboration tools to work together in real time. Collaborative textual editors are intuitive, since the position of the cursor and the currently selected text, if any, tell other collaborators what part of the text/code a developer is currently focusing on or editing. Model-Driven Engineering (MDE) advocates using models as the primary development artifacts, and to be most effective, the system is described at different levels of abstraction from multiple points of view. This poses additional challenges for online collaboration, as the current focus of the developer and the scope of his changes are often less clear, in particular when the modelling language(s) and views use graphics or have hierarchical or other kinds of dependencies. This paper proposes two algorithms that exploit the metamodels of the involved modelling languages to visualize a collaborator’s change in a multi-view modelling environment. The first algorithm determines the most concise way to highlight the elements that are impacted by a change made by a remote developer in the current views of the local developer. The second algorithm delays the deletion of a model element as long as that element is still being referred to from a different view, and notifies the impacted developers, offering them a chance to collaboratively discuss the deletion or undo the deletion if desired. The proposed algorithms are evaluated by applying them on the Reusable Aspect Models (RAM) metamodel.",
      "Keywords": "Graphical user interface | MDE | Multi-view modelling | Online collaboration",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2018-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Kanagasabai, Nirmal;Alam, Omar;Kienzle, Jörg",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70350385222",
      "Primary study DOI": "10.1007/978-3-642-04216-4_12",
      "Title": "A Flexible Multi-mode Undo Mechanism for a Collaborative Modeling Environment",
      "Abstract": "This paper presents a flexible multi-mode undo mechanism for a collaborative modeling environment supporting different types of graph representations (including Petri Nets and System Dynamics models) as well as free-hand annotations. The undo mechanism is first introduced on a formal basis. It is implemented as an extension of the underlying MatchMaker collaboration server and allows for selecting from and making use of several undo variants with minimal adaptation effort. This is a basis for future usability studies comparing different versions of undo and for better adapting the undo effects to the actual user goals. © 2009 Springer Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-11-02",
      "Publication type": "Conference Paper",
      "Authors": "Göhnert, Tilman;Malzahn, Nils;Hoppe, H. Ulrich",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77249146572",
      "Primary study DOI": "10.1007/978-3-642-04425-0_11",
      "Title": "SLIM—A Lightweight Environment for Synchronous Collaborative Modeling",
      "Abstract": "UML diagrams have become the de-facto standard for the visual modeling of software systems. The creation and discussion of these diagrams is a critical factor impacting the quality of the artifacts under development. Traditionally, facilitating the collaboration of globally distributed team members with heterogeneous system environments has been a costly and time-consuming endeavor. This paper aims to advance the state-of-the-art of model-based development by providing a collaboration environment, which supports the synchronous distributed creation and manipulation of UML diagrams and also lowers the technical entry barriers for participating in the modeling process. We present a prototypical implementation of a collaborative editor for synchronous lightweight modeling (SLIM). Applying innovative techniques, which only rely on functionality natively supported by modern web browsers, technical issues impeding clients to be integrated into the collaborative environment are avoided and ad hoc collaboration is facilitated. © 2009 Springer Berlin Heidelberg.",
      "Keywords": "Collaborative Modeling | Real-Time Editor | Web 2.0",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Thum, Christian;Schwind, Michael;Schader, Martin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77955027607",
      "Primary study DOI": "10.1007/978-3-642-13911-6_19",
      "Title": "A Web-Based Collaborative Metamodeling Environment with Secure Remote Model Access",
      "Abstract": "This contribution presents GEMSjax - a web-based metamodeling tool for the collaborative development of domain specific languages. By making use of modern Web 2.0 technologies like Ajax and REST services, the tool allows for simultaneous web browser-based creation/editing of metamodels and model instances, as well as secure remote model access via REST, which enables remote model modification over a simple HTTP-based interface. This paper describes the complex technical challenges we faced and solutions we produced to provide browser-based synchronous model editing. It further explains on the XACML-based access control mechanisms to provide secure remote access to models and model elements. Additionally, we highlight the usefulness of our approach by describing its application in a realistic usage scenario. © 2010 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-08-03",
      "Publication type": "Conference Paper",
      "Authors": "Farwick, Matthias;Agreiter, Berthold;White, Jules;Forster, Simon;Lanzanasto, Norbert;Breu, Ruth",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85074697559",
      "Primary study DOI": "10.1007/s10270-019-00760-x",
      "Title": "Systematic review of matching techniques used in model-driven methodologies",
      "Abstract": "© 2019, The Author(s).In model-driven methodologies, model matching is the process of finding a matching pair for every model element between two or more software models. Model matching is an important task as it is often used while differencing and merging models, which are key processes in version control systems. There are a number of different approaches to model matching, with most of them focusing on different goals, i.e., the accuracy of the matching process, or the generality of the algorithm. Moreover, there exist algorithms that use the textual representations of the models during the matching process. We present a systematic literature review that was carried out to obtain the state-of-the-art of model matching techniques. The search process was conducted based on a well-defined methodology. We have identified a total of 3274 non-duplicate studies, out of which 119 have been included as primary studies for this survey. We present the state-of-the-art of model matching, highlighting the differences between different matching techniques, mainly focusing on text-based and graph-based algorithms. Finally, the main open questions, challenges, and possible future directions in the field of model matching are discussed, also including topics like benchmarking, performance and scalability, and conflict handling.",
      "Keywords": "Model comparison | Model differencing | Model matching | Systematic literature review | Text-based modeling | Version control",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2020-05-01",
      "Publication type": "Article",
      "Authors": "Somogyi, Ferenc Attila;Asztalos, Mark",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85050384646",
      "Primary study DOI": "10.1007/978-3-319-94764-8_7",
      "Title": "A Consistency-Preserving Editing Model for Dynamic Filtered Engineering of Model-Driven Product Lines",
      "Abstract": "© Springer International Publishing AG, part of Springer Nature 2018.The high cognitive complexity of model-driven software product line engineering is due to the fact that developers have to manually create, edit, and maintain multi-variant artifacts. As a solution, the adaptation of filtered editing has been proposed recently. Filtered editing can be applied in a static or in a dynamic way; in the latter case, new co-evolution problems occur when considering the evolving relationships between the historical, the variant, and the product dimension. This paper investigates, formally defines, and demonstrates by examples nine consistency constraints connected to dynamic filtered editing. Furthermore, we suggest a consistency-preserving editing model comprising four operations that synchronize a transparent multi-version repository with a single-version workspace view being presented to the user: check-out, modify, commit, and a novel operation, migrate, which prepares the workspace for the subsequent edit session. Several advantages of dynamic over static filtered or unfiltered editing are confirmed both on a theoretical and on an experimental basis.",
      "Keywords": "Co-evolution | Filtered editing | Model-driven software engineering | Software product line engineering | Uniform versioning | Variation control",
      "Publication venue": "Communications in Computer and Information Science",
      "Publication date": "2018-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Schwägerl, Felix;Westfechtel, Bernhard",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85019254375",
      "Primary study DOI": "10.1007/978-3-319-56856-0_7",
      "Title": "Discovering Software Architectures with Search-Based Merge of UML Model Variants",
      "Abstract": "© Springer International Publishing AG 2017.Software reuse is a way to reduce costs and improve quality. However, in industry, the reuse of existing software artifacts is commonly done by ad hoc strategies such as clone-and-own. Clone-and-own leads to a set of system variants developed independently, despite of having similar parts. The maintenance of these independent variants is a difficult task, because of duplication and spread functionalities. One problem faced by developers and engineers is the lack of a global view of such variants, providing a better understanding of the actual state of the systems. In this paper we present an approach to discover the architecture of system variants using a search-based technique. Our approach identifies differences between models and uses these differences to generate candidate architectures. The goal is to find a candidate architecture most similar to a set of UML model variants. Our contribution is threefold: (i) we proposed an approach to discover model-based software architecture, (ii) we deal with the merging of multiple UML model variants; and (iii) our approach applies a search-based technique considering state-based merging of models. We evaluate our approach with four case studies and the results show that it is able to find good candidate architectures even when different features are spread among model variants.",
      "Keywords": "Model merging | Model-based architectures | Search-based techniques | UML models",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2017-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Assunção, Wesley K.G.;Vergilio, Silvia R.;Lopez-Herrejon, Roberto E.",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85019549042",
      "Primary study DOI": "10.1007/s00766-017-0271-0",
      "Title": "Advancing viewpoint merging in requirements engineering: a theoretical replication and explanatory study",
      "Abstract": "© 2017, Springer-Verlag London.Compared to building a single requirements view, modeling stakeholder viewpoints and then merging them is shown to improve the understanding of the problem domain, but also very time-consuming. How has the situation changed? This paper reports our replication of a case study, where we take advantage of theoretical replication to mitigate one of the original study design’s threats and to embrace an important evolving factor, namely automated tool support for producing i∗ models. Our replicate study updates the prior results by showing the time saving enabled by the tool and verifies the rich domain understanding gained through viewpoint-based modeling. In an attempt to explain why viewpoints lead to richer domain understanding, we examine in a posteriori way the role that traceability plays in building individual and team-wide requirements models. Our post hoc analysis results suggest that better traceability from the sources makes team-level requirements modeling more focused, whereas the lack of traceability makes it less fruitful. Our work not only shifts the case study from an exploratory to an explanatory nature, but also proposes the integration of conflict-centric views into viewpoint merging to further improve the understanding about stakeholder requirements’ trade-offs.",
      "Keywords": "Comparative study | i∗ | Model merging | Replication | Scholar@UC | Theoretical replication | Traceability | Viewpoints",
      "Publication venue": "Requirements Engineering",
      "Publication date": "2017-09-01",
      "Publication type": "Article",
      "Authors": "Khatwani, Charu;Jin, Xiaoyu;Niu, Nan;Koshoffer, Amy;Newman, Linda;Savolainen, Juha",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84988735029",
      "Primary study DOI": "10.1007/s10664-016-9442-8",
      "Title": "Search-based detection of model level changes",
      "Abstract": "© 2016, Springer Science+Business Media New York.Software models, defined as code abstractions, are iteratively refined, restructured, and evolved due to many reasons such as reflecting changes in requirements or modifying a design to enhance existing features. For understanding the evolution of a model a-posteriori, change detection approaches have been proposed for models. The majority of existing approaches are successful to detect atomic changes. However, composite changes, such as refactorings, are difficult to detect due to several possible combinations of atomic changes or eventually hidden changes in intermediate model versions that may be no longer available. Moreover, a multitude of refactoring sequences may be used to describe the same model evolution. In this paper, we propose a multi-objective approach to detect model changes as a sequence of refactorings. Our approach takes as input an exhaustive list of possible types of model refactoring operations, the initial model, and the revised model, and generates as output a list of refactoring applications representing a good compromise between the following two objectives (i) maximize the similarity between the expected revised model and the generated model after applying the refactoring sequence on the initial model, and (ii) minimize the number of atomic changes used to describe the evolution. In fact, minimizing the number of atomic changes can important since it is maybe easier for a designer to understand and analyze a sequence of refactorings (composite model changes) rather than an equivalent large list of atomic changes (Weissgerber and Diehl 2006). Due to the huge number of possible refactoring sequences, a metaheuristic search method is used to explore the space of possible solutions. To this end, we use the non-dominated sorting genetic algorithm (NSGA-II) to find the best trade-off between our two objectives. The paper reports on the results of an empirical study of our multi-objective model changes detection technique as applied on various versions of real-world models taken from open source projects and one industrial project. We compared our approach to the simple deterministic greedy algorithm, multi-objective particle swarm optimization (MOPSO), an existing mono-objective changes detection approach, and two model changes detection tools not based on computational search. The statistical test results provide evidence to support the claim that our proposal enables the generation of changes detection solutions with correctness higher than 85 %, in average, using a variety of real-world scenarios.",
      "Keywords": "Model changes detection | Multi-objective optimization | Search-based software engineering | Software maintenance",
      "Publication venue": "Empirical Software Engineering",
      "Publication date": "2017-04-01",
      "Publication type": "Article",
      "Authors": "Kessentini, Marouane;Mansoor, Usman;Wimmer, Manuel;Ouni, Ali;Deb, Kalyanmoy",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85086360682",
      "Primary study DOI": "10.1007/s10270-020-00804-7",
      "Title": "On the benefits of file-level modularity for EMF models",
      "Abstract": "© 2020, Springer-Verlag GmbH Germany, part of Springer Nature.Model-driven development (MDD) tools based on the Eclipse Modeling Framework (EMF) typically store all elements in a model in a single file which arguably is one of the main reasons why these tools do not scale well and cannot take advantage of existing code versioning systems and other related facilities such as Git and Make. In this work, we describe an approach for storing models in multiple files. We argue that EMF-based MDD tools can benefit significantly from this file-level modularity not only by improving the performance and scalability of basic model operations, but also by simplifying many model management activities through the use of existing code versioning systems and build automation tools. We introduce a domain-specific language that allows defining, at the metamodel level: (1) the mapping between models’ elements and the file structure for model storage and (2) the dependencies between model elements that affect the code generation and compilation (if the integration with code-based tools is required). Our suite then generates an API and scripts to provide support for file-level modularity and facilitate using code-based versioning and build tools. We have used our DSL in the context of Papyrus-RT, an MDD tool for real-time and embedded software, and show how file-level modularity can (1) substantially improve performance and scalability of load and save operations, (2) enable collaborative model development, and (3) facilitate MDD-specific activities such as model comparison and incremental code generation. Our implementation and the models used for evaluation are publicly available.",
      "Keywords": "Build automation | Incremental code generation | Model comparison | Model management | Model versioning | UML-RT",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2021-02-01",
      "Publication type": "Article",
      "Authors": "Jahed, Karim;Bagherzadeh, Mojtaba;Dingel, Juergen",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85084252327",
      "Primary study DOI": "10.1007/978-3-030-45234-6_14",
      "Title": "Incremental Concurrent Model Synchronization using Triple Graph Grammars",
      "Abstract": "© The Author(s) 2020.In the context of software model-driven development, artifacts are specified by several models describing different aspects, e.g., different views, dynamic behavior, structure, distributed information, etc. Then, maintaining and repairing consistency of the whole specification are crucial issues if the models can be separately developed and updated. Model Synchronization is the process of restoring consistency after the update of one or several of the models. In the present work, we approach the case when conflicts may arise due to concurrently updating different models. Specifically, based on the Triple Graph Grammar approach, we propose an incremental algorithm CSynch for solving conflicts and repairing consistency. In addition, we identify and formalize when a synchronizing solution can be considered adequate and show that our procedure CSynch is sound and complete.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2020-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Orejas, Fernando;Pino, Elvira;Navarro, Marisa",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-80054052967",
      "Primary study DOI": "10.1007/978-3-642-24485-8_21",
      "Title": "Service–Oriented Architecture Modeling: Bridging the Gap between Structure and Behavior",
      "Abstract": "Model-driven development of large-scale software systems is highly likely to produce models that describe the systems from many diverse perspectives using a variety of modeling languages. Checking and maintaining consistency of information captured in such multi-modeling environments is known to be challenging. In this paper we describe an approach to systematically synchronize multi-models. The approach specifically addresses the problem of synchronizing business processes and domain models in a Service-oriented Architecture development environment. In the approach, the human effort required to synchronize independently developed models is supplemented with significant automated support. This process is used to identify concept divergences, that is, a concept in one model which cannot be matched with concepts in the other model. We automate the propagation of divergence resolution decisions across the conflicting models. We illustrate the approach using models developed for a Car Crash Crisis Management System (CCCMS), a case study problem used to assess Aspect-oriented Modeling approaches. © 2011 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2011-10-19",
      "Publication type": "Conference Paper",
      "Authors": "Clavreul, Mickael;Mosser, Sébastien;Blay-Fornarino, Mireille;France, Robert B.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84879875849",
      "Primary study DOI": "10.1007/978-3-642-39013-5_12",
      "Title": "Design Management: A Collaborative Design Solution",
      "Abstract": "Design is more important than ever as software systems continue to increase in complexity, become more distributed, expose multiple interfaces and have more integration points. Design process has also become more complex, involving dispersed teams, third-party components, outsourcing providers and business partners. Nevertheless, design tools have not sufficiently been coping with these growing challenges. In this paper, we discuss design challenges and highlight features of design tools that should help address them. We also describe a new application; Rational Design Management (DM) developed to boost the quality of design and streamline the design process. DM enables a collaborative approach that broadens the understanding of design, improves design quality and shrinks design time. DM leverages semantic web technologies and implements the Open Services for Lifecycle Collaboration (OSLC) specification to deliver a linked data approach for managing design. Such an approach facilitates design extensibility, reuse and integration across the development lifecycle. © 2013 Springer-Verlag.",
      "Keywords": "Architecture | Design | Design Management | Linked Data | UML",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2013-07-12",
      "Publication type": "Conference Paper",
      "Authors": "Elaasar, Maged;Conallen, James",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84942873275",
      "Primary study DOI": "",
      "Title": "MetaEdit+ A Fully Configurable Multi-User and Multi-Tool CASE and CAME Environment",
      "Abstract": "© Springer-Verlag Berlin Heidelberg 1996.Computer Aided Software Engineering (CASE) environments have spread at a lower pace than expected. One reason for this is the immaturity of existing environments in supporting development in-the-large and by-many and their inability to address the varying needs of the software developers. In this paper we report on the development of a next generation CASE environment called MetaEdit+. The environment seeks to overcome all the above deficiencies, but in particular pays attention to catering for the varying needs of the software developers. MetaEdit+ is a multi-method, multi-tool platform for both CASE and Computer Aided Method Engineering (CAME). As a CASE tool it establishes a versatile and powerful multi-tool environment which enables flexible creation, maintenance, manipulation, retrieval and representation of design information among multiple developers. As a CAME environment it offers an easy-to-use yet powerful environment for method specification, integration, management and re-use. The paper explains the motivation for developing MetaEdit+, its design goals and philosophy and discusses the functionality of the CAME tools.",
      "Keywords": "CAME | CASE | Conceptual modeling | Metamodeling | Method | Object oriented modeling | Repository | Software engineering environments | Tool integration | Tool interoperability",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "1996-01-01",
      "Publication type": "Book Chapter",
      "Authors": "Kelly, Steven;Lyytinen, Kalle;Rossi, Matti",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84949324449",
      "Primary study DOI": "10.1007/s12204-015-1593-z",
      "Title": "Research of Consistency Maintenance Mechanism in Real-Time Collaborative Multi-View Business Modeling",
      "Abstract": "© 2015, Shanghai Jiaotong University and Springer-Verlag Berlin Heidelberg.Real-time collaborative editing (RTCE) can support a group of people collaboratively work from distributed locations at the same time. However, consistency maintenance is one key challenge when different types of conflicts happen. Therefore a common synchronous mechanism is proposed to support consistency maintenance in the process of multi-view business modeling. Based on operation analysis on different views of models in the real-time collaborative editing system, detection of potential conflicts is realized by means of a decision-making tree. Then consistency maintenance provides a comprehensive and applicable conflicts detection and resolution for collaborative business modeling. Finally, a prototype of collaborative multi-view business modeling system is introduced to verify the approach. The point is that the mechanism proposes a comprehensive solution for collaborative multi-view business modeling.",
      "Keywords": "computer support cooperative work (CSCW) | consistency maintenance | multi-view business modeling | software engineering",
      "Publication venue": "Journal of Shanghai Jiaotong University (Science)",
      "Publication date": "2015-02-01",
      "Publication type": "Article",
      "Authors": "Cai, Hong ming;Ji, Xiao feng;Bu, Feng lin",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-34748867874",
      "Primary study DOI": "10.1007/s11412-007-9018-0",
      "Title": "Supporting collaborative learning and problem-solving in a constraint-based CSCL environment for UML class diagrams",
      "Abstract": "We present COLLECT-UML, a constraint-based intelligent tutoring system (ITS) that teaches object-oriented analysis and design using Unified Modelling Language (UML). UML is easily the most popular object-oriented modelling technology in current practice. While teaching how to design UML class diagrams, COLLECT-UML also provides feedback on collaboration. Being one of constraint-based tutors, COLLECT-UML represents the domain knowledge as a set of constraints. However, it is the first system to also represent a higher-level skill such as collaboration using the same formalism. We started by developing a single-user ITS that supported students in learning UML class diagrams. The system was evaluated in a real classroom, and the results showed that students' performance increased significantly. In this paper, we present our experiences in extending the system to provide support for collaboration as well as domain-level support. We describe the architecture, interface and support for collaboration in the new, multi-user system. The effectiveness of the system has been evaluated in two studies. In addition to improved problem-solving skills, the participants both acquired declarative knowledge about effective collaboration and did collaborate more effectively. The participants have enjoyed working with the system and found it a valuable asset to their learning. © 2007 International Society of the Learning Sciences, Inc.; Springer Science+ Business Media, LLC.",
      "Keywords": "Collaboration support | Computer supported collaborative learning | Constraint-based modelling | Evaluation | Intelligent tutoring system | Problem-solving support | UML class diagrams",
      "Publication venue": "International Journal of Computer-Supported Collaborative Learning",
      "Publication date": "2007-09-01",
      "Publication type": "Article",
      "Authors": "Baghaei, Nilufar;Mitrovic, Antonija;Irwin, Warwick",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70350627546",
      "Primary study DOI": "10.1007/978-3-540-92831-7_29",
      "Title": "Using Interactive Whiteboard Technology to Support Collaborative Modeling",
      "Abstract": "Modeling is a key activity in conceptual design and system design. Users as well as stakeholders, experts and entrepreneurs need to be able to create shared understanding about a system representation. Technology like interactive whiteboards may provide new opportunities in the support of collaborative modeling. We conduct an exploratory research on experiences in using interactive whiteboards in collaborative modeling, based on semi-structured interviews. This paper offers a first overview of advantages and disadvantages of interactive whiteboards and creates a research agenda to explore how process support can help in harvesting the efficiency gain that we believe can be achieved using this technology. © 2008 Springer Berlin Heidelberg.",
      "Keywords": "Collaborative modeling | Groups | Interactive whiteboards | System and design | Technology",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2008-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Renger, Michiel;Kolfschoten, Gwendolyn L.;De Vreede, Gert Jan",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85064927284",
      "Primary study DOI": "10.1007/978-3-030-16722-6_6",
      "Title": "Pyro: Generating Domain-Specific Collaborative Online Modeling Environments",
      "Abstract": "© The Author(s) 2019.We present Pyro, a framework for enabling domain-specific modeling via the internet. Provided with an adequate metamodel specification, Pyro turns your browser into a collaborative, domain-specific, graphical development environment with features reminiscent of desktop IDEs for textual programming languages. The required metamodeling is supported in a high-level, simplicity-driven fashion, and the entire ready-to-run browser-based domain-specific development environment is generated fully automatically. We will illustrate the steps of this development along the realization of a graphical IDE for the Architecture Analysis and Design Language (AADL).",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2019-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Zweihoff, Philip;Naujokat, Stefan;Steffen, Bernhard",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84856582665",
      "Primary study DOI": "10.1007/978-3-642-28108-2_28",
      "Title": "Towards Collaborative Cross-Organizational Modeling",
      "Abstract": "Standardized business documents are a prerequisite for successful electronic information exchange in inter-organizational systems. These documents are typically defined through Standard Developing Organizations (SDOs) such as the United Nations Centre for Trade Facilitation and eBusiness (UN/CEFACT). In today's highly dynamic environment with ever-changing market demands, SDOs are confronted with the need to constantly evolve their standardized business documents based on the needs of business partners utilizing these documents. However, the business document development process between SDOs and business partners is currently lacking efficient collaborative support. In this position paper, we present (i) a reference model supporting hierarchical, collaborative and cross-organizational business document modeling, (ii) a conflict resolution model to find a consolidated version of a new business document model as well as (iii) our vision of a Configurable Collaboration-Aware Online Model Repository. © 2012 Springer-Verlag.",
      "Keywords": "business document model | collaboration | conflict resolution | cross-organizational | model repository | reference model",
      "Publication venue": "Lecture Notes in Business Information Processing",
      "Publication date": "2012-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Pichler, Christian;Wimmer, Manuel;Wieland, Konrad;Zapletal, Marco;Engel, Robert",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84951844305",
      "Primary study DOI": "10.1007/978-3-319-25264-3_25",
      "Title": "Near Real-Time Collaborative Conceptual Modeling on the Web",
      "Abstract": "© Springer International Publishing Switzerland 2015.Collaboration during the creation of conceptual models is an integral pillar of design processes in many disciplines. Synchronous collaboration, in particular, has received little attention in the conceptual modeling literature so far. There are many modeling and meta-modeling tools available, however most of these do not support synchronous collaboration, are offered under restrictive licenses, or build on proprietary libraries and technologies. To close this gap, this paper introduces the lightweight meta-modeling framework SyncMeta, which supports near real-time collaborative modeling, meta-modeling and generation of model editors in the Web browser. It employs well-proven Operational Transformation algorithms in a peer-to-peer architecture to resolve conflicts occurring during concurrent user edits. SyncMeta was successfully used to create meta-models of various conceptual modeling languages. An enduser evaluation showed that the editing tools of SyncMeta are considered usable and useful by collaborative modelers.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2015-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Derntl, Michael;Nicolaescu, Petru;Erdtmann, Stephan;Klamma, Ralf;Jarke, Matthias",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85089826475",
      "Primary study DOI": "10.1007/s10270-020-00823-4",
      "Title": "Consistent change propagation within models",
      "Abstract": "© 2020, The Author(s).Developers change models with clear intentions—e.g., for refactoring, defects removal, or evolution. However, in doing so, developers are often unaware of the consequences of their changes. Changes to one part of a model may affect other parts of the same model and/or even other models, possibly created and maintained by other developers. The consequences are incomplete changes and with it inconsistencies within or across models. Extensive works exist on detecting and repairing inconsistencies. However, the literature tends to focus on inconsistencies as errors in need of repairs rather than on incomplete changes in need of further propagation. Many changes are non-trivial and require a series of coordinated model changes. As developers start changing the model, intermittent inconsistencies arise with other parts of the model that developers have not yet changed. These inconsistencies are cues for incomplete change propagation. Resolving these inconsistencies should be done in a manner that is consistent with the original changes. We speak of consistent change propagation. This paper leverages classical inconsistency repair mechanisms to explore the vast search space of change propagation. Our approach not only suggests changes to repair a given inconsistency but also changes to repair inconsistencies caused by the aforementioned repair. In doing so, our approach follows the developer’s intent where subsequent changes may not contradict or backtrack earlier changes. We argue that consistent change propagation is essential for effective model-driven engineering. Our approach and its tool implementation were empirically assessed on 18 case studies from industry, academia, and GitHub to demonstrate its feasibility and scalability. A comparison with two versioned models shows that our approach identifies actual repair sequences that developers had chosen. Furthermore, an experiment involving 22 participants shows that our change propagation approach meets the workflow of how developers handle changes by always computing the sequence of repairs resulting from the change propagation.",
      "Keywords": "Change propagation | Consistency detection | Inconsistency repair | Model-driven engineering",
      "Publication venue": "Software and Systems Modeling",
      "Publication date": "2021-04-01",
      "Publication type": "Article",
      "Authors": "Kretschmer, Roland;Khelladi, Djamel Eddine;Lopez-Herrejon, Roberto Erick;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84976647405",
      "Primary study DOI": "10.1007/978-3-319-39696-5_1",
      "Title": "View-based near real-time collaborative modeling for information systems engineering",
      "Abstract": "© Springer International Publishing Switzerland 2016.Conceptual modeling is a creative, social process that is driven by the views of involved stakeholders. However, few systems offer view-based conceptual modeling on the Web using lock-free synchronous collaborative editing mechanisms. Based on a (meta-)modeling framework that supports near real-time collaborative modeling and metamodeling in the Web browser, this paper proposes an exploratory approach for collaboratively defining views and viewpoints on conceptual models. Viewpoints are defined on the metamodeling layer and instantiated as views within a model editor instance. The approach was successfully used for various conceptual modeling languages and it is based on user requirements for model-based creation and generation of nextgeneration community applications. An end-user evaluation showed the usefulness, usability and limitations of view-based collaborative modeling. We expect that Web-based collaborative modeling powered by view extensions will pave the way for a new generation of collaboratively and socially engineered information systems.",
      "Keywords": "Collaborative conceptual modeling | Viewpoints | Views",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2016-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Nicolaescu, Petru;Rosenstengel, Mario;Derntl, Michael;Klamma, Ralf;Jarke, Matthias",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84859121415",
      "Primary study DOI": "10.1007/978-3-642-28872-2_13",
      "Title": "Concurrent model synchronization with conflict resolution based on triple graph grammars",
      "Abstract": "Triple graph grammars (TGGs) have been used successfully to analyse correctness of bidirectional model transformations. Recently, also a corresponding formal approach to model synchronization has been presented, where updates on a given domain (either source or target) can be correctly (forward or backward) propagated to the other model. However, a corresponding formal approach of concurrent model synchronization, where a source and a target modification have to be synchronized simultaneously, has not yet been presented and analysed. This paper closes this gap taking into account that the given and propagated source or target model modifications are in conflict with each other. Our conflict resolution strategy is semi-automatic, where a formal resolution strategy - known from previous work - can be combined with a user-specific strategy. As first result, we show correctness of concurrent model synchronization, that is, each result of our nondeterministic concurrent update leads to a consistent correspondence between source and target models, where consistency is defined by the TGG. As second result, we show compatibility of concurrent with basic model synchronization: concurrent model synchronization can realize both forward and backward propagation. The results are illustrated by a running example on updating organizational models. © 2012 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "bidirectional model transformation | conflict resolution | correctness | model synchronization | model versioning | triple graph grammars",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2012-04-03",
      "Publication type": "Conference Paper",
      "Authors": "Hermann, Frank;Ehrig, Hartmut;Ermel, Claudia;Orejas, Fernando",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33750284265",
      "Primary study DOI": "10.1007/11880240_15",
      "Title": "Detecting and Resolving Model Inconsistencies Using Transformation Dependency Analysis",
      "Abstract": "Model inconsistency management is a crucial aspect of model-driven software engineering. It is therefore important to provide automated support for this activity. The problem is, however, that the resolution of inconsistencies may give rise to new inconsistencies. To address this problem, we propose to express inconsistency detection and resolutions as graph transformation rules, and to apply the theory of critical pair analysis to analyse potential dependencies between the detection and resolution of model inconsistencies. As a proof-of-concept, we report on an experiment that we have carried out along these lines using the critical pair analysis algorithm implemented in the state-of-the-art graph transformation tool AGG. The results show that both anticipated and unexpected dependencies between inconsistency detection and resolution rules are found by AGG. We discuss how the integration of the proposed approach into contemporary modelling tools may improve inconsistency management in various ways. © Springer-Verlag Berlin Heidelberg 2006.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2006-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Mens, Tom;Van Straeten, Ragnhild Der;D'Hondt, Maja",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85096969521",
      "Primary study DOI": "10.1145/3419804.3420271",
      "Title": "Layout Merging with Relative Positioning",
      "Abstract": "© 2020 Association for Computing Machinery.The advent of modeling in software engineering, like other engineering fields, has revolutionized the formalism and pace of software development. However, software applications are not built from scratch, instead, other existing software artifacts are reused and combined with new artifacts. This notion of software reuse has been in existence for decades. When structural models such as class diagrams are reused, the reusing and reused models often need to be merged and the result visualized to the modeler. However, layout mechanisms such as GraphViz, JGraphX, and other related layout tools do not retain the original layout and rather arbitrarily layout the merged models. Therefore, important information that corresponds to the mental map of a modeler and is conveyed by the specific layout is currently lost. This paper aims to establish a robust layout algorithm called rpGraph that retains the general layout of the reusing and reused models after merging. rpGraph uses the relative positioning of model elements to inform the positioning of merged model elements. Our findings are evaluated with 20 example model reuses from a library of reusable software model artifacts. A comparison of the merged layouts of rpGraph, GraphViz, and JGraphX shows that rpGraph performs better in terms of retaining the original layouts.",
      "Keywords": "Automatic Layout | Class Diagram | Model Composition | Relative Positioning | Software Reuse",
      "Publication venue": "Proceedings of the 12th System Analysis and Modelling Conference, SAM 2020",
      "Publication date": "2020-10-19",
      "Publication type": "Conference Paper",
      "Authors": "Ali, Hyacinth;Mussbacher, Gunter",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85099374578",
      "Primary study DOI": "10.1145/3422392.3422440",
      "Title": "What causes merge conflicts?",
      "Abstract": "© 2020 ACM.During the software development process, several developers commonly change artifacts in parallel. A merge process can combine parallel changes. In the case of changes that cannot be automatically combined, the developer responsible for the merge must reconcile decisions and resolve conflicts. Some studies are concerned with investigating ways to deal with merge conflicts and measuring the effort that this activity may require. However, the investigation of factors that may reduce the occurrence of conflicts needs more and deeper attention. This paper aims at identifying and analyzing attributes of past merges with and without conflicts to understand what may induce physical conflicts. We analyzed 182,273 merge scenarios from 80 projects written in eight different programming languages to find characteristics that increase the chances of a merge to have a conflict. We found that attributes such as the number of committers, the number of commits, and the number of changed files seem to have the biggest influence in the occurrence of merge conflicts. Moreover, attributes in the branch that is being integrated seem to be more influential than the same attributes in the other branch. Additionally, we discovered positive correlations between the occurrence of conflicts and both the duration of the branch and the intersection of developers.",
      "Keywords": "Attributes | Merge | Merge Conflicts | Repository Mining",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2020-10-21",
      "Publication type": "Conference Paper",
      "Authors": "Menezes, Jose William;Trindade, Bruno;Pimentel, João Felipe;Moura, Tayane;Plastino, Alexandre;Murta, Leonardo;Costa, Catarina",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85096771332",
      "Primary study DOI": "10.1145/3417990.3420201",
      "Title": "Towards access control for collaborative modelling apps",
      "Abstract": "© 2020 ACM.Domain-specific languages (DSLs) are small languages tailored to narrow domains. Their purpose is to cope with the needs of domain experts, who might not have a software engineering background. In previous work, we proposed the novel notion of Active DSLs, which are graphical DSLs extended to benefit from mobility using geolocation and interactions with external services and devices. Active DSLs are the central component of a mobile collaborative appl called DSL-comet. Modelling using DSLs can be done collaboratively by a group of stakeholders, and the levels of required confidentiality and integrity may vary across modelling artefacts. While preventing the access to protected data has been tackled for DSLs used on static environments like laptops and desktop computers, it has not been envisioned for modelling on mobile devices. The latter poses further challenges as access permissions may depend not just on user profiles but also on conditions that only make sense in mobility, such as geolocation or information retrieved from nearby sensors. Embracing the approach of Active DSLs, we propose an annotation meta-model to provide fine-grained role-based access control to any domain meta-model, hence enabling model element protection when collaborating in mobility. The paper describes our current implementation and our envisioned low-code solution, which includes a cloud-based textual editor to define role hierarchies and permissions for the domain meta-models.",
      "Keywords": "Active DSLs | Collaborative modelling | Low-code engineering platforms | Mobile app | Mobile modelling | Role-based access control",
      "Publication venue": "Proceedings - 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS-C 2020 - Companion Proceedings",
      "Publication date": "2020-10-16",
      "Publication type": "Conference Paper",
      "Authors": "Brunschwig, Leá;Guerra, Esther;De Lara, Juan",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85097834993",
      "Primary study DOI": "10.1145/3382025.3414969",
      "Title": "Detecting inconsistencies in annotated product line models",
      "Abstract": "© 2020 ACM.Model-based product line engineering applies the reuse practices from product line engineering with graphical modeling for the specification of software intensive systems. Variability is usually described in separate variability models, while the implementation of the variable systems is specified in system models that use modeling languages such as SysML. Most of the SysML modeling tools with variability support, implement the annotation-based modeling approach. Annotated product line models tend to be error-prone since the modeler implicitly describes every possible variant in a single system model. To identifying variability-related inconsistencies, in this paper, we firstly define restrictions on the use of SysML for annotative modeling in order to avoid situations where resulting instances of the annotated model may contain ambiguous model constructs. Secondly, inter-feature constraints are extracted from the annotated model, based on relations between elements that are annotated with features. By analyzing the constraints, we can identify if the combined variability- and system model can result in incorrect or ambiguous instances. The evaluation of our prototype implementation shows the potential of our approach by identifying inconsistencies in the product line model of our industrial partner which went undetected through several iterations of the model.",
      "Keywords": "consistency checking | model-based systems engineering | product line engineering | SysML | variability modeling",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2020-10-19",
      "Publication type": "Conference Paper",
      "Authors": "Bilic, Damir;Carlson, Jan;Sundmark, Daniel;Afzal, Wasif;Wallin, Peter",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85097836099",
      "Primary study DOI": "10.1145/3382025.3414964",
      "Title": "Consistency-preserving evolution planning on feature models",
      "Abstract": "© 2020 ACM.A software product line (SPL) enables large-scale reuse in a family of related software systems through configurable features. SPLs represent a long-term investment so that their ongoing evolution becomes paramount and requires careful planning. While existing approaches enable to create an evolution plan for an SPL on feature-model (FM) level, they assume the plan to be rigid and do not support retroactive changes. In this paper, we present a method that enables to create and retroactively adapt an FM evolution plan while preventing undesired impacts on its structural and logical consistency. This method is founded in structural operational semantics and linear temporal logic. We implement our method using rewriting logic, integrate it within an FM tool suite and perform an evaluation using a collection of existing FM evolution scenarios.",
      "Keywords": "feature model evolution | feature models | formal semantics | linear temporal logic | rewriting logic | software evolution | software product lines | structural operational semantics",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2020-10-19",
      "Publication type": "Conference Paper",
      "Authors": "Hoff, Adrian;Nieke, Michael;Seidl, Christoph;Sæther, Eirik Halvard;Motzfeldt, Ida Sandberg;Din, Crystal Chang;Yu, Ingrid Chieh;Schaefer, Ina",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85097722582",
      "Primary study DOI": "10.1145/3426425.3426932",
      "Title": "A search-based and fault-tolerant approach to concurrent model synchronisation",
      "Abstract": "© 2020 ACM.In collaboration scenarios, we often encounter situations in which semantically interrelated models are changed concurrently. Concurrent model synchronization denotes the task of keeping these models consistent by propagating changes between them. This is challenging as changes can contradict each other and thus be in conflict. A problem with current synchronisation approaches is that they are often nondeterministic, i.e., the order in which changes are propagated is essential for the result. Furthermore, a common limitation is that the involved models must have been in a consistent state at some point, and that the applied changes are at least valid for the domain in which they were made. We propose a hybrid approach based on Triple Graph Grammars (TGGs) and Integer Linear Programming (ILP) to overcome these issues: TGGs are a grammar-based means that supplies us with a superset of possible synchronization solutions, forming a search space from which an optimum solution incorporating user-defined preferences can be chosen by ILP. Therefore, the proposed method combines configurability by comprising expert knowledge via TGGs with the flexible input handling of search-based techniques: By accepting arbitrary graph structures as input models, the approach is tolerant towards errors induced during the modelling process, i.e., it can cope with input models which do not conform to their metamodel or which cannot be generated by the TGG at hand. The approach is implemented in the model transformation tool eMoflon and evaluated regarding scalability for growing model sizes and an increasing number of changes.",
      "Keywords": "Concurrent Synchronisation | Fault-Tolerance | Integer Linear Programming | Triple Graph Grammars",
      "Publication venue": "SLE 2020 - Proceedings of the 13th ACM SIGPLAN International Conference on Software Language Engineering, Co-located with SPLASH 2020",
      "Publication date": "2020-11-16",
      "Publication type": "Conference Paper",
      "Authors": "Weidmann, Nils;Fritsche, Lars;Anjorin, Anthony",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85097127582",
      "Primary study DOI": "10.1007/978-3-030-63322-6_27",
      "Title": "Conflict Resolution in Process Models Merging",
      "Abstract": "© 2020, The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG.Process models consist mainly of process elements that are linked by process relations, as well as control elements and control relations (called control parts). These later facilitate the readability of a process model or control some of its fragments. In many cases of process models merging, control parts can cause conflicts (called control conflicts), that must be identified and resolved to ensure the reliability of the merged process model. We study in this article a control conflict, related to the control element Choice along with a task outflows, when merging process models. We propose the resolution of this conflict in the various scenarios that can arise, in order to ensure a reliable merging result.",
      "Keywords": "Choice element | Conflict resolution | Control element | Control relation | Model merging | Process element | Process meta model | Process model | Process model improvement | Process model reliability | Process relation",
      "Publication venue": "Advances in Intelligent Systems and Computing",
      "Publication date": "2020-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Hachemi, Asma;Ahmed-Nacer, Mohamed",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77954628413",
      "Primary study DOI": "10.1007/978-3-642-13595-8_18",
      "Title": "Detecting Inconsistencies in Multi-View Models with Variability",
      "Abstract": "Multi-View Modeling (MVM) is a common modeling practice that advocates the use of multiple, different and yet related models to represent the needs of diverse stakeholders. Of crucial importance in MVM is consistency checking - the description and verification of semantic relationships amongst the views. Variability is the capacity of software artifacts to vary, and its effective management is a core tenet of the research in Software Product Lines (SPL). MVM has proven useful for developing one-of-a-kind systems; however, to reap the potential benefits of MVM in SPL it is vital to provide consistency checking mechanisms that cope with variability. In this paper we describe how to address this need by applying Safe Composition - the guarantee that all programs of a product line are type safe. We evaluate our approach with a case study. © 2010 Springer-Verlag.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2010-07-21",
      "Publication type": "Conference Paper",
      "Authors": "Lopez-Herrejon, Roberto Erick;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85041806209",
      "Primary study DOI": "10.1007/978-3-319-75396-6_3",
      "Title": "Multi-view Consistency in UML: A Survey",
      "Abstract": "© 2018, Springer International Publishing AG, part of Springer Nature.We study the question of consistency of multi-view models in UML and OCL. We critically survey the large amount of literature that already exists. We find that only limited subsets of the UML/OCL have been covered so far and that consistency checks mostly only cover structural aspects, whereas only few methods also address behaviour. We also give a classification of different techniques for multi-view UML/OCL consistency: consistency rules, the system model approach, dynamic meta-modelling, universal logic, and heterogeneous transformation. Finally, we briefly outline a possible comprehensive distributed semantics approach to consistency.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2018-01-01",
      "Publication type": "Book Chapter",
      "Authors": "Knapp, Alexander;Mossakowski, Till",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84962617975",
      "Primary study DOI": "10.1145/2814251.2814263",
      "Title": "Using decision rules for solving conflicts in extended feature models",
      "Abstract": "© 2015 ACM.Software Product Line Engineering has introduced feature modeling as a domain analysis technique used to represent the variability of software products and decision-making scenarios. We present a model-based transformation approach to solve conflicts among configurations performed by different stakeholders on feature models. We propose the usage of a domain-specific language named CoCo to specify attributes as non-functional properties of features, and to describe busineb-related decision rules in terms of costs, time, and human resources. These specifications along with the stakeholders' configurations and the feature model are transformed into a constraint programming problem, on which decision rules are executed to find a non-conflicting set of solution configurations that are aligned to busineb objectives. We evaluate CoCo's compositionality and model complexity simplification while using a set of motivating decision scenarios.",
      "Keywords": "Conflicting Configurations | Constraint Satisfaction Problem | Domain Engineering | Domain-Specific Language | Extended Feature Model | Model Transformation Chain",
      "Publication venue": "SLE 2015 - Proceedings of the 2015 ACM SIGPLAN International Conference on Software Language Engineering",
      "Publication date": "2015-10-26",
      "Publication type": "Conference Paper",
      "Authors": "Ochoa, Lina;González-Rojas, Oscar;Thüm, Thomas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-70450228910",
      "Primary study DOI": "10.1145/1509239.1509252",
      "Title": "Aspect-oriented multi-view modeling",
      "Abstract": "Multi-view modeling allows a developer to describe a software system from multiple points of view, e.g. structural and behavioral, using different modeling notations. Aspect-oriented modeling techniques have been proposed to address the scalability problem within individual modeling notations. This paper presents RAM, an aspect-oriented modeling approach that provides scalable multi-view modeling. RAM allows the modeler to define stand-alone reusable aspect models using 3 modeling notations. The aspect models support the modeling of structure (using UML class diagrams) and behavior (using UML state and sequence diagrams). RAM supports aspect dependency chains, which allows an aspect providing complex functionality to reuse the functionality provided by other aspects. The RAM weaver can create woven views of the composed model for debugging, simulation or code generation purpose, as well as perform consistency checks during the weaving and on the woven model to detect inconsistencies of the composition. Copyright 2009 ACM.",
      "Keywords": "Aspect dependencies | Aspect-oriented modeling | Binding | Class diagrams | Instantiation | Sequence diagrams | State diagrams",
      "Publication venue": "Proceedings of the 8th ACM International Conference on Aspect-Oriented Software Development, AOSD'09",
      "Publication date": "2009-11-30",
      "Publication type": "Conference Paper",
      "Authors": "Kienzle, Jörg;Abed, Wisam Al;Klein, Jacques",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84989196090",
      "Primary study DOI": "10.1145/2970276.2970304",
      "Title": "Efficient detection of inconsistencies in a multi-developer engineering environment",
      "Abstract": "© 2016 ACM.Software developers work concurrently on different kinds of development artifacts such as requirements, architecture, design, or source code. To keep these development artifacts consistent, developers have a wide range of consistency checking approaches available. However, most existing consistency checkers work best in context of single tools and they are not well suited when development artifacts are distributed among different tools and are being modified concurrently by many developers. This paper presents a novel, cloud-based approach to consistency checking in a multi-developer/-tool engineering environment. It allows instant consistency checking even if developers and their tools are distributed and even if they do not have access to all artifacts. It does this by systematically reusing consistency checking knowledge to keep the memory/CPU cost of consistency checking to a small constant overhead per developer. The feasibility and scalability of our approach is demonstrated through an empirical validation with 22 partly industrial system models. A prototype implementation implementation is available through the DesignSpace Engineering Cloud.",
      "Keywords": "Incremental Consistency Checking | Model-Driven Engineering | Multi-Developer Engineering",
      "Publication venue": "ASE 2016 - Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering",
      "Publication date": "2016-08-25",
      "Publication type": "Conference Paper",
      "Authors": "Demuth, Andreas;Riedl-Ehrenleitner, Markus;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-80053192551",
      "Primary study DOI": "10.1145/2024445.2024468",
      "Title": "An agent-based framework for distributed collaborative model evolution",
      "Abstract": "In recent years, an increasingly large number of software systems have been developed at different geographical regions. As a result, the maintenance and evolution of those systems have shifted from being conducted at a single site to being geographically distributed at multiple locations around the world. In these collaborative development environments, it is a critical challenge to maintain consistency within a software model during its evolution since changes are rapidly and concurrently made to the model without the awareness of team members at various locations. Most of existing software modelling applications however primarily support single-user settings whereas some other recent approaches which rely on version control tools fail to provide effective, real-time support in a collaborative modelling setting requiring frequent interactions and short feedback cycles. In this paper, we present a framework that supports designers in evolving software models in a collaborative modelling setting. This framework is built upon the well-known Belief Desire Intention agent architecture to exploit its robustness and flexibility in maintaining consistency within a design model and resolving conflicts in real time when changes are concurrently made to it by different designers. © 2011 ACM.",
      "Keywords": "change propagation | collaborative software engineering | consistency maintenance | software evolution",
      "Publication venue": "IWPSE-EVOL'11 - Proceedings of the 12th International Workshop on Principles on Software Evolution",
      "Publication date": "2011-09-30",
      "Publication type": "Conference Paper",
      "Authors": "Dam, Hoa Khanh;Ghose, Aditya",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-77952372962",
      "Primary study DOI": "10.1145/1101908.1101998",
      "Title": "Formal Support for Merging and Negotiation",
      "Abstract": "Model merging is an important activity in software development. We often need to integrate a set of models coming from different sources so as to create a unified model encompassing all the given models. Inconsistencies between models can make model merging significantly more complex. To deal with inconsistencies efficiently, a systematic negotiation process is needed. This paper outlines a formal approach to merging and negotiation over behavioural models and presents the results achieved so far. Copyright 2005 ACM.",
      "Keywords": "3-valued logic | Inconsistency detection | Model checking | Model merging | Negotiation | Refinement",
      "Publication venue": "20th IEEE/ACM International Conference on Automated Software Engineering, ASE 2005",
      "Publication date": "2005-12-01",
      "Publication type": "Conference Paper",
      "Authors": "Nejati, Shiva",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85081028445",
      "Primary study DOI": "10.1016/j.scico.2020.102438",
      "Title": "Mediator: A component-based modeling language for concurrent and distributed systems",
      "Abstract": "© 2020 Elsevier B.V.In this paper we propose a new language Mediator to formalize component-based concurrent and distributed system models. Mediator supports a two-step hierarchical modeling approach: Automata, which provide an interface of ports, are the basic behavior units; Systems declare components or connectors through automata, and glue them together. With the help of Mediator, components and systems can be modeled separately and precisely. The distributed Mediator and its semantics can be used to capture the inherent real-time and asynchronous behavior in distributed systems. Properties of Mediator models can be specified through CTL* formulae that support various families of properties such as safety and liveness, which can be verified using the nuXmv model checker. A leader election example is presented to show that this language is capable for modeling practical scenarios.",
      "Keywords": "Component-based development | Coordination | Distributed systems | Mediator | Modeling language",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2020-06-15",
      "Publication type": "Article",
      "Authors": "Li, Yi;Sun, Weidi;Sun, Meng",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84856249312",
      "Primary study DOI": "10.1007/s11334-011-0155-2",
      "Title": "A relationship-based approach to model integration",
      "Abstract": "A key problem in model-based development is integrating a collection of models into a single, larger, specification as a way to construct a functional system, to develop a unified understanding, or to enable automated reasoning about properties of the resulting system. In this article, we suggest that the choice of a particular model integration operator depends on the inter-model relationships that hold between individual models. Based on this observation, we distinguish three key integration operators studied in the literature-merge, composition and weaving-and describe each operator along with the notion of relationship that underlies it. We then focus on the merge activity and provide a detailed look at the factors that one must consider in defining a merge operator, particularly the way in which the relationships should be captured during merge. We illustrate these factors using two merge operators that we have developed in our earlier work for combining models that originate from distributed teams. © 2011 Springer-Verlag London Limited.",
      "Keywords": "Composition | Merge | Model integration | Model-based development | Weaving",
      "Publication venue": "Innovations in Systems and Software Engineering",
      "Publication date": "2012-03-01",
      "Publication type": "Article",
      "Authors": "Chechik, Marsha;Nejati, Shiva;Sabetzadeh, Mehrdad",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-84976621289",
      "Primary study DOI": "10.1007/978-3-319-39696-5_2",
      "Title": "A Framework for Model-Driven Execution of Collaboration Structures",
      "Abstract": "© Springer International Publishing Switzerland 2016.Human interaction-intensive process environments need collaboration support beyond traditional BPM approaches. Process primitives are ill suited to model and execute collaborations for shared artifact editing, chatting, or voting. To this end, this paper introduces a framework for specifying and executing such collaboration structures. The framework explicitly supports the required human autonomy in shaping the collaboration structure. We demonstrate the application of our framework to an exemplary collaboration-intensive hiring process.",
      "Keywords": "Collaboration configuration | Collaboration patterns | Human Architecture Description Language | Scripting collaborations",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2016-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Mayr-Dorn, Christoph;Dustdar, Schahram",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-27644568193",
      "Primary study DOI": "10.1109/re.2005.8",
      "Title": "An Algebraic Framework for Merging Incomplete and Inconsistent Views",
      "Abstract": "View merging, also called view integration, is a key problem in conceptual modeling. Large models are often constructed and accessed by manipulating individual views, but it is important to be able to consolidate a set of views to gain a unified perspective, to understand interactions between views, or to perform various types of end-to-end analysis. View merging is complicated by inconsistency of views. Once views are merged, it is useful to be able to trace the elements of the merged view back to their sources. In this paper, we propose a framework for merging incomplete and inconsistent graph-based views. We introduce a formalism, called annotated graphs, which incorporates a systematic annotation scheme capable of modeling incompleteness and inconsistency as well as providing a built-in mechanism for stakeholder traceability. We show how structure-preserving maps can capture the relationships between disparate views modeled as annotated graphs, and provide a general algorithm for merging views with arbitrary interconnections. We use the i* modeling language [31] as an example to demonstrate how our approach can be applied to existing graph-based modeling languages. © 2005 IEEE.",
      "Keywords": "",
      "Publication venue": "Proceedings of the IEEE International Conference on Requirements Engineering",
      "Publication date": "2005-01-01",
      "Publication type": "Conference Paper",
      "Authors": "Sabetzadeh, Mehrdad;Easterbrook, Steve",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-33745063916",
      "Primary study DOI": "10.1007/s00766-006-0032-y",
      "Title": "View merging in the presence of incompleteness and inconsistency",
      "Abstract": "View merging, also called view integration, is a key problem in conceptual modeling. Large models are often constructed and accessed by manipulating individual views, but it is important to be able to consolidate a set of views to gain a unified perspective, to understand interactions between views, or to perform various types of analysis. View merging is complicated by incompleteness and inconsistency: Stakeholders often have varying degrees of confidence about their statements. Their views capture different but overlapping aspects of a problem, and may have discrepancies over the terminology being used, the concepts being modeled, or how these concepts should be structured. Once views are merged, it is important to be able to trace the elements of the merged view back to their sources and to the merge assumptions related to them. In this paper, we present a framework for merging incomplete and inconsistent graph-based views. We introduce a formalism, called annotated graphs, with a built-in annotation scheme for modeling incompleteness and inconsistency. We show how structure-preserving maps can be employed to express the relationships between disparate views modeled as annotated graphs, and provide a general algorithm for merging views with arbitrary interconnections. We provide a systematic way to generate and represent the traceability information required for tracing the merged view elements back to their sources, and to the merge assumptions giving rise to the elements. © Springer-Verlag London Limited 2006.",
      "Keywords": "Inconsistency management | Model management | View merging | View-based development",
      "Publication venue": "Requirements Engineering",
      "Publication date": "2006-06-01",
      "Publication type": "Article",
      "Authors": "Sabetzadeh, Mehrdad;Easterbrook, Steve",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-68749107355",
      "Primary study DOI": "10.1007/978-3-642-02050-6_8",
      "Title": "Composing Models for Detecting Inconsistencies: A Requirements Engineering Perspective",
      "Abstract": "[Context and motivation] Ever-growing systems' complexity and novel requirements engineering approaches such as reuse or globalization imply that requirements are produced by different stakeholders and written in possibly different languages. [Question/ problem] In this context, checking consistency so that requirements specifications are amenable to formal analysis is a challenge. Current techniques either fail to consider the requirement set as a whole, missing certain inconsistency types or are unable to take heterogeneous (i.e. expressed in different languages) specifications into account. [Principal ideas/ results] We propose to use model composition to address this problem in a staged approach. First, heterogeneous requirements are translated in model fragments which are instances of a common metamodel. Then, these fragments are merged in one unique model. On such a model inconsistencies such as under-specifications can be incrementally detected and formal analysis is made possible. Our approach is fully supported by our model composition framework. [Contribution] We propose model composition as means to address flexibility needs in requirements integration. Threats to validity such as the impact of new requirements languages needs to be addressed in future work. © 2009 Springer Berlin Heidelberg.",
      "Keywords": "Flexible inconsistency management | Model composition | Model-driven requirements engineering",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2009-08-20",
      "Publication type": "Conference Paper",
      "Authors": "Perrouin, Gilles;Brottier, Erwan;Baudry, Benoit;Le Traon, Yves",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-56649088000",
      "Primary study DOI": "10.1007/978-3-540-87875-9_15",
      "Title": "A General Approach for Scenario Integration",
      "Abstract": "An approach to integrating UML Sequence Diagrams is presented. It rests on a well-established theory, is generalizable to a large class of requirements engineering models, and supports many different kinds of scenario integration operations. An implementation of the approach as an Eclipse extension is described. Lessons learned from the implementation and during first, preliminary experiments to study the practical aspects of the approach, are discussed. © 2008 Springer-Verlag Berlin Heidelberg.",
      "Keywords": "",
      "Publication venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
      "Publication date": "2008-11-28",
      "Publication type": "Conference Paper",
      "Authors": "Liang, Hongzhi;Diskin, Zinovy;Dingel, Juergen;Posse, Ernesto",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-79960496037",
      "Primary study DOI": "10.1109/ICECCS.2011.26",
      "Title": "A Formal Approach to Model Composition Applied to VUML",
      "Abstract": "Several approaches adopted by the software engineering community rely on the principle of multi-modeling which allows to separate concerns and to model a system as a set of less complex sub-models. Model composition is a crucial activity in Model Driven Engineering (MDE). It is particularly useful when adopting a multi-modeling approach to analyze and design software systems. In previous work, we have defined a view-based UML profile called VUML. In this paper, we describe a formal approach for model composition in which we consider the composition as an algebraic operator on the set of UML-compliant models. We specify the semantics of our composition operator by means of graph transformations. Furthermore, we present a composition scheme interpreted by a two-steps composition process based on two strategies of correspondence and merging. To illustrate our approach, we apply it to the composition of UML class models diagrams into one VUML model class diagram. © 2011 IEEE.",
      "Keywords": "Formal approach | Graph transformation | Model composition | Model-driven development | VUML profile",
      "Publication venue": "Proceedings - 2011 16th IEEE International Conference on Engineering of Complex Computer Systems, ICECCS 2011",
      "Publication date": "2011-07-25",
      "Publication type": "Conference Paper",
      "Authors": "Anwar, Adil;Dkaki, Taoufiq;Ebersold, Sophie;Coulette, Bernard;Nassar, Mahmoud",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85015792125",
      "Primary study DOI": "10.1109/ICInfA.2016.7831989",
      "Title": "Deriving all minimal hitting-sets by merging",
      "Abstract": "© 2016 IEEE.Deriving all minimal hitting-sets (MHSes), as candidate diagnoses, is an active topic in model-based diagnosis. Based on the \"Divide and Conquer\" principle, an algorithm for computing all MHSes by recursive merging is proposed. First, each given (large) family of conflict sets is divided into two smaller sub-families, every one of which is used for computing its own MHSes, respectively. Then, the cross-product of the two corresponding sub-families of MHSes is generated. Finally, the family of MHSes for the whole conflict sets is obtained, only with the additional final step: minimizing the product. Detailed theoretical analysis of time complexity is given in different cases. Experimental results show that our approach has better efficiency than other approaches in many cases.",
      "Keywords": "Conflict set | Divide and conquer | Hitting-set | Merge | Model-based diagnosis",
      "Publication venue": "2016 IEEE International Conference on Information and Automation, IEEE ICIA 2016",
      "Publication date": "2017-01-24",
      "Publication type": "Conference Paper",
      "Authors": "Zhao, Xiangfu;Ouyang, Dantong",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85073508123",
      "Primary study DOI": "10.1016/j.scico.2019.102323",
      "Title": "Correct composition in the presence of behavioural conflicts and dephasing",
      "Abstract": "© 2019 Elsevier B.V.Scenarios of execution are commonly used to specify partial behaviour and interactions between different objects and components in a system. To avoid overall inconsistency in specifications, various automated methods have emerged in the literature to compose scenario-based models. In recent work, we have shown how the theorem prover Isabelle/HOL can be combined with an SMT solver to detect inconsistencies between sequence diagrams and, only in their absence, generate the behavioural composition. In this paper, we exploit this combination further and present an efficient approach that generates all valid composed traces giving us an equivalent representation of the conflict-free valid composed model. In addition, we show a novel way to prove the correctness of the computed results, and compare this method with the implementation and verification done within Isabelle alone. To reduce the complexity of our technique, we consider priority constraints and a notion of dephased models, i.e., models which start execution at different times. This work has been inspired by a problem from a medical domain where different clinical guidelines for chronic conditions may be applied to the same patient at different points in time. We illustrate the approach with a realistic example from this domain.",
      "Keywords": "Formal methods | Model composition | Optimisation | SMT solver | Theorem prover",
      "Publication venue": "Science of Computer Programming",
      "Publication date": "2019-11-01",
      "Publication type": "Article",
      "Authors": "Küster Filipe Bowles, Juliana;Caminati, Marco B.",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85114556077",
      "Primary study DOI": "10.1109/ICSSP-ICGSE52873.2021.00017",
      "Title": "Timestamp-based Consistency Checking of Collaboratively Developed Engineering Artifacts",
      "Abstract": "© 2021 IEEE.Engineering projects typically involve many engineers who work concurrently on a multitude of engineering artifacts such as requirements, models, code, or even non-software artifacts, e.g., drawings or computations. These projects require tight collaboration within and across engineering disciplines in order to guarantee a consistent engineering process. Existing collaborative engineering tools provide limited functionality in this regard. Inconsistencies among engineering artifacts are currently identified only after all involved engineers merge their artifacts. This is problematic because considerable amount of time may elapse between these merges and engineers inadvertently may spend considerable time working under wrong/changed assumptions. This leads to more inconsistencies. This paper proposes an approach for checking the consistency of the engineers' artifacts against the continuously evolving, timestamped version history of a public artifact storage. This avoids costly reworks as engineers understand the implications of their work long before they merge their engineering artifacts. To evaluate our work, we conducted an empirical study utilizing the proposed approach.",
      "Keywords": "collaboration | consistency checking | engineering artifacts | timestamps",
      "Publication venue": "Proceedings - 2021 IEEE/ACM Joint 15th International Conference on Software and System Processes and 16th ACM/IEEE International Conference on Global Software Engineering, ICSSP/ICGSE 2021",
      "Publication date": "2021-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Trols, Michael Alexander;Mashkoor, Atif;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85115665553",
      "Primary study DOI": "10.1109/ICSE-Companion52605.2021.00116",
      "Title": "Team-Oriented Consistency Checking of Heterogeneous Engineering Artifacts",
      "Abstract": "© 2021 IEEE.Consistency checking of interdependent heterogeneous engineering artifacts, such as requirements, specifications, and code, is a challenging task in large-scale engineering projects. The lack of team-oriented solutions allowing a multitude of project stakeholders to collaborate in a consistent manner is thus becoming a critical problem. In this context, this work proposes an approach for team-oriented consistency checking of collaboratively developed heterogeneous engineering artifacts.",
      "Keywords": "Collaboration | Engineering Artifacts | Global Consistency Checking",
      "Publication venue": "Proceedings - International Conference on Software Engineering",
      "Publication date": "2021-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Trols, Michael Alexander;Mashkoor, Atif;Egyed, Alexander",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85114554462",
      "Primary study DOI": "10.1109/ICSSP-ICGSE52873.2021.00018",
      "Title": "Hierarchical Distribution of Consistency-relevant Changes in a Collaborative Engineering Environment",
      "Abstract": "© 2021 IEEE.Engineering is a collaborative process, incorporating a multitude of heterogeneous artifacts. These artifacts share interdependent properties, which must be kept consistent during the engineering process (e.g., code must correspond to architectural design documents). To address this circumstance, existing works propose the unification of heterogeneous artifacts in a single collaborative engineering environment where artifacts are analysed for consistency on the basis of their interdependent properties. The work presented in this paper expands the collaboration possibilities of such environments by adopting hierarchically organized work areas storing artifact changes. We discuss different implications such hierarchies have on the computation of consistency information and propose a mechanism of instantly distributing consistency-relevant change information throughout the collaborative engineering environment. This way, engineers are provided with a unique perspective on their engineering artifacts, which is immediately re-evaluated whenever new changes are made within the hierarchy. To evaluate this mechanism, we provide an experiment - motivating the instant distribution of change information - as well as a scenario simulation - testing our mechanism against an exhaustive set of possible inputs.",
      "Keywords": "collaboration | consistency checking | engineering artifacts",
      "Publication venue": "Proceedings - 2021 IEEE/ACM Joint 15th International Conference on Software and System Processes and 16th ACM/IEEE International Conference on Global Software Engineering, ICSSP/ICGSE 2021",
      "Publication date": "2021-05-01",
      "Publication type": "Conference Paper",
      "Authors": "Trols, Michael Alexander;Mashkoor, Atif;Egyed, Alexander",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85093362626",
      "Primary study DOI": "10.1109/ETFA46521.2020.9211900",
      "Title": "Towards Model Consistency Representations in a Multi-Disciplinary Engineering Network",
      "Abstract": "© 2020 IEEE.Production Systems Engineering (PSE) networks create engineering results represented by interdependent engineering data models. A key aspect of engineering result quality is the consistency achieved in and among the discipline-specific data models. However, the heterogeneity of discipline-specific data models makes it hard to represent and evaluate consistency across engineering disciplines. In this paper, we introduce PSE-MECon - a method for Modelling and Evaluating Consistency rules in PSE environments across disciplines. We describe a meta-model for representing consistency rules in a multi-disciplinary data model and demonstrate the viability of the meta-model by representing dependencies in AutomationML as a foundation for consistency checks for engineering data logistics in multi-disciplinary engineering networks.",
      "Keywords": "AutomationML | Consistency Rules | Engineering Data Logistics | Production Systems Engineering",
      "Publication venue": "IEEE International Conference on Emerging Technologies and Factory Automation, ETFA",
      "Publication date": "2020-09-01",
      "Publication type": "Conference Paper",
      "Authors": "Winkler, Dietmar;Lüder, Arndt;Meixner, K.;Rinker, F.;Biffl, Stefan",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85096092739",
      "Primary study DOI": "10.1109/EDOCW49879.2020.00014",
      "Title": "A Formal Verification of the Integration of Activity and Goal-Based Workflows",
      "Abstract": "© 2020 IEEE.The spectrum of business process workflow models goes from prescriptive approaches, which enforce a particular behavior to achieve the business process goals, to descriptive approaches, which state what are the goals to achieve but do not define how they can be achieved. The former promote the standardization of the organizational behavior whereas the latter empower the worker, knowledge worker, to apply its domain-specific knowledge whenever unexpected situations occur. I propose an approach that integrates these two different perspectives of the same business process. I use a formalization, using the Alloy specification language, that integrates two different models of the same business process, an activity model, which enforces a particular set of paths of execution, and a goal model, which only enforces the minimal set of conditions necessary to achieve the business goal, such that a larger number of execution paths is allowed. Alloy is used to verify the correctness of the design process of the two models, activity and goal, which preserves their inter-consistency. Therefore, the business process goals can be achieved according to any of the models, and any intermediate state of the execution, in both the activity and goal models, preserves a set of model invariants. This approach merges the best of both worlds by integrating two different models of the same business process. Some recent research also proposes the mapping between different representations of business processes but consider one of them as primary, the one which is used for execution.",
      "Keywords": "Activity-based workflow | Adaptive workflow | Data-centric workflow | Flexible workflows | Goal-based workflow",
      "Publication venue": "Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOCW",
      "Publication date": "2020-10-01",
      "Publication type": "Conference Paper",
      "Authors": "Silva, António Rito",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85101158701",
      "Primary study DOI": "10.1145/3442391.3442399",
      "Title": "On Preserving Variability Consistency in Multiple Models",
      "Abstract": "© 2021 ACM.Model-driven software product line engineering (MDPLE) is a holistic approach to realize variability-intensive systems by using models. In MDPLE the usage of models aims to increase the level of automation by reducing the product derivation to a pure code derivation step. Since models are present at different development phases, they have to be kept consistent all over these phases, for example by storing information about corresponding elements in model transformations. Reasons why to use model transformations or similar automated mechanisms are manifold. For instance, if the product line is built in a forward-engineering process, model transformations will be beneficial to propagate the coarse-grained information of an early phase to the subsequent phase automatically. In contrast to single-variant engineering, in MDPLE there is not only the challenge to keep multiple models consistent but also their presence conditions. Since variability mechanisms and the ways how presence conditions across different models are maintained vary, this contribution categorizes the consistency maintenance of presence conditions in MDPLE approaches to give an overview of already existing techniques. As a result, we find that while several automated solutions to keep presence conditions across models consistent exist, they are not employed in the MDPLE tool landscape.",
      "Keywords": "Model-driven Software Product Line Engineering | multi-variant model transformations | multi-view modeling | software evolution",
      "Publication venue": "ACM International Conference Proceeding Series",
      "Publication date": "2021-02-09",
      "Publication type": "Conference Paper",
      "Authors": "Greiner, Sandra;Westfechtel, Bernhard",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85110183845",
      "Primary study DOI": "10.1145/3449639.3459283",
      "Title": "Concurrent model synchronisation with multiple objectives",
      "Abstract": "© 2021 ACM.Concurrent model synchronisation, i.e. the (bidirectional) propagation of updates between two models, is an important problem in the area of model-driven engineering (MDE). Compared to other consistency management tasks, synchronising concurrent updates is especially challenging as they can be conflicting, such that restoring a consistent state is not possible when all updates must be considered. Recent approaches create a search space of possible solutions and determine the optimum solution via exact methods, such as integer linear programming (ILP), via a configurable, scalarised objective function that takes conflicting goals into account. However, the determination of suitable configuration parameters and runtime efficiency improvements are still an open issue, which is commonly addressed by using heuristics instead of exact methods. We investigate on whether it is beneficial to apply heuristics to solve concurrent model synchronisation problems. First, a multiobjective evolutionary algorithm is used for small instances for which all pareto-optimal solutions can be presented to a user to select the best one. Second, for larger models, we propose a method to determine suitable weightings for aggregating all objectives into a single function. Finally, these insights are used to recommend a strategy for determining solutions of satisfying quality within an acceptable amount of time.",
      "Keywords": "Model synchronisation | Multiobjective optimization | Search-based software engineering",
      "Publication venue": "GECCO 2021 - Proceedings of the 2021 Genetic and Evolutionary Computation Conference",
      "Publication date": "2021-06-26",
      "Publication type": "Conference Paper",
      "Authors": "Weidmann, Nils;Engels, Gregor",
      "Ground truth": "Exclude",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85102024930",
      "Primary study DOI": "10.1007/s10664-020-09892-x",
      "Title": "variED: an editor for collaborative, real-time feature modeling",
      "Abstract": "© 2021, The Author(s).Feature models are a helpful means to document, manage, maintain, and configure the variability of a software system, and thus are a core artifact in software product-line engineering. Due to the various purposes of feature models, they can be a cross-cutting concern in an organization, integrating technical and business aspects. For this reason, various stakeholders (e.g., developers and consultants) may get involved into modeling the features of a software product line. Currently, collaboration in such a scenario can only be done with face-to-face meetings or by combining single-user feature-model editors with additional communication and version-control systems. While face-to-face meetings are often costly and impractical, using version-control systems can cause merge conflicts and inconsistency within a model, due to the different intentions of the involved stakeholders. Advanced tools that solve these problems by enabling collaborative, real-time feature modeling, analogous to Google Docs or Overleaf for text editing, are missing. In this article, we build on a previous paper and describe (1) the extended formal foundations of collaborative, real-time feature modeling, (2) our conflict resolution algorithm in more detail, (3) proofs that our formalization converges and preserves causality as well as user intentions, (4) the implementation of our prototype, and (5) the results of an empirical evaluation to assess the prototype’s usability. Our contributions provide the basis for advancing existing feature-modeling tools and practices to support collaborative feature modeling. The results of our evaluation show that our prototype is considered helpful and valuable by 17 users, also indicating potential for extending our tool and opportunities for new research directions.",
      "Keywords": "Collaboration | Consistency maintenance | Feature modeling | Groupware | Software product lines | Variability",
      "Publication venue": "Empirical Software Engineering",
      "Publication date": "2021-03-01",
      "Publication type": "Article",
      "Authors": "Kuiter, Elias;Krieter, Sebastian;Krüger, Jacob;Saake, Gunter;Leich, Thomas",
      "Ground truth": "Include",
      "Reason": ""
    },
    {
      "Secondary study DOI": "10.1007/s10270-022-01050-9",
      "Primary study Scopus EID": "2-s2.0-85101124440",
      "Primary study DOI": "10.1007/s11704-020-9518-x",
      "Title": "A semi-transparent selective undo algorithm for multi-user collaborative editors",
      "Abstract": "© 2021, Higher Education Press.Multi-user collaborative editors are useful computer-aided tools to support human-to-human collaboration. For multi-user collaborative editors, selective undo is an essential utility enabling users to undo any editing operations at any time. Collaborative editors usually adopt operational transformation (OT) to address concurrency and consistency issues. However, it is still a great challenge to design an efficient and correct OT algorithm capable of handling both normal do operations and user-initiated undo operations because these two kinds of operations can interfere with each other in various forms. In this paper, we propose a semi-transparent selective undo algorithm that handles both do and undo in a unified framework, which separates the processing part of do operations from the processing part of undo operations. Formal proofs are provided to prove the proposed algorithm under the well-established criteria. Theoretical analysis and experimental evaluation are conducted to show that the proposed algorithm outperforms the prior OT-based selective undo algorithms.",
      "Keywords": "collaborative editing systems | concurrency control | human-centric collaboration | replication consistency | selective undo",
      "Publication venue": "Frontiers of Computer Science",
      "Publication date": "2021-10-01",
      "Publication type": "Article",
      "Authors": "Cai, Weiwei;He, Fazhi;Lv, Xiao;Cheng, Yuan",
      "Ground truth": "Include",
      "Reason": ""
    }
  ]
}